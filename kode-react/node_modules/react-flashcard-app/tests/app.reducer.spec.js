import { expect } from 'chai';
import { describe, it, beforeEach } from 'mocha';
import reducer from '../src/reducers/app';
import Deck from '../src/models/deck';

describe('app reducer', () => {
  let deck;

  beforeEach(() => {
    const data = {
      id: 1,
      name: 'Deck 1',
      cards: ['foo', 'bar', 'boo', 'far', 'roo', 'faa'],
    };
    deck = new Deck(data);
  });

  it('returns the initial state', () => {
    expect(
      reducer(undefined, {}),
    ).eql({});
  });

  it('returns the first free index', () => {
    const data = {
      id: 1,
      name: 'Deck 1',
      cards: ['foo', 'bar', 'boo', 'far', 'roo', 'faa'],
    };
    expect(
      reducer(
        {
          removed: [0, 1],
          cardIndex: 1,
        },
        {
          type: 'INIT_APP',
          data: {
            data,
            deckIndex: 0,
            removed: [0, 1],
          },
        },
      ).cardIndex,
    ).equal(2);
  });

  it('handles RESET', () => {
    expect(
      reducer(
        {
          removed: [0],
          cardIndex: 1,
        },
        {
          type: 'RESET',
        },
      ),
    ).eql(
      {
        removed: [],
        cardIndex: 0,
      },
    );
  });

  it('handles REMOVE_CARD', () => {
    expect(
      reducer(
        {
          deck,
          removed: [],
          cardIndex: 0,
        },
        {
          type: 'REMOVE_CARD',
        },
      ),
    ).eql(
      {
        deck,
        removed: [0],
        cardIndex: 1,
      },
    );
  });

  it('handles UNDO_REMOVE', () => {
    expect(
      reducer(
        {
          deck,
          removed: [2],
          cardIndex: 1,
        },
        {
          type: 'UNDO_REMOVE',
        },
      ),
    ).eql(
      {
        deck,
        removed: [],
        cardIndex: 2,
      },
    );
  });

  it('handles INCREMENT', () => {
    expect(
      reducer(
        {
          deck,
          removed: [1],
          cardIndex: 0,
        },
        {
          type: 'INCREMENT',
        },
      ),
    ).eql(
      {
        deck,
        removed: [1],
        cardIndex: 2,
      },
    );
  });

  it('handles DECREMENT', () => {
    expect(
      reducer(
        {
          deck,
          removed: [1],
          cardIndex: 2,
        },
        {
          type: 'DECREMENT',
        },
      ),
    ).eql(
      {
        deck,
        removed: [1],
        cardIndex: 0,
      },
    );
  });
});
