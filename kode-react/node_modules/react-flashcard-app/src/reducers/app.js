import Deck from '../models/deck';

const app = (state = {}, action) => {
  let cardIndex;
  let removed;
  let deck;
  switch (action.type) {
    case 'TOGGLE_DECK_SELECT':
      return { ...state, deckSelectActive: !state.deckSelectActive };
    case 'INIT_APP':
      deck = new Deck(action.data.data);
      return {
        ...state,
        deck,
        removed: action.data.removed,
        deckIndex: action.data.data.id,
        cardIndex: deck.first(action.data.removed),
      };
    case 'SELECT_DECK':
      return {
        ...state,
        deck: action.deck,
        removed: action.removed,
        deckIndex: action.id,
        cardIndex: action.deck.first(action.removed),
        deckSelectActive: false,
      };
    case 'RESET':
      return { ...state, cardIndex: 0, removed: [] };
    case 'REMOVE_CARD':
      if (state.deck.length - state.removed.length > 0) {
        removed = state.removed.concat([]);
        removed.push(state.deck.idByIndex(state.cardIndex));
        cardIndex = state.deck.getNext(state.cardIndex, removed);
        return { ...state, cardIndex, removed };
      }
      return state;
    case 'UNDO_REMOVE':
      if (state.removed.length > 0) {
        removed = state.removed.concat([]);
        cardIndex = state.deck.indexById(removed.pop());
        return { ...state, cardIndex, removed };
      }
      return state;
    case 'INCREMENT':
      if (state.deck.length - state.removed.length > 1) {
        cardIndex = state.deck.getNext(state.cardIndex, state.removed);
        return { ...state, cardIndex };
      }
      return state;
    case 'DECREMENT':
      if (state.deck.length - state.removed.length > 1) {
        cardIndex = state.deck.getNext(state.cardIndex, state.removed, -1);
        return { ...state, cardIndex };
      }
      return state;
    case 'SHUFFLE':
      if (state.deck.length - state.removed.length > 1) {
        state.deck.shuffle();
        cardIndex = state.deck.first(state.removed);
        return { ...state, cardIndex };
      }
      return state;
    default:
      return state;
  }
};

export default app;
