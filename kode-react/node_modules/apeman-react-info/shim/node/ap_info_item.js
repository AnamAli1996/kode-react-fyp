/**
 * Item of info.
 * @class ApInfoItem
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _apemanReactMixinPure = require('apeman-react-mixin-pure');

var _apemanReactTouchable = require('apeman-react-touchable');

var _apemanReactIcon = require('apeman-react-icon');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApInfoItem */
var ApInfoItem = _react2.default.createClass({
  displayName: 'ApInfoItem',


  // --------------------
  // Specs
  // --------------------

  propTypes: {
    label: _react.PropTypes.string,
    value: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number, _react.PropTypes.node]),
    unit: _react.PropTypes.string,
    icon: _react.PropTypes.string,
    link: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.func]),
    linkText: _react.PropTypes.string
  },

  mixins: [_apemanReactMixinPure.ApPureMixin],

  statics: {
    OPEN_ICON: 'fa fa-angle-down',
    CLOSE_ICON: 'fa fa-angle-right',
    NEXT_ICON: 'fa fa-angle-right',
    PREV_ICON: 'fa fa-angle-left'
  },

  getInitialState: function getInitialState() {
    return {};
  },
  getDefaultProps: function getDefaultProps() {
    return {
      icon: null,
      label: null,
      value: null,
      link: null,
      linkText: null,
      unit: null
    };
  },
  render: function render() {
    var s = this;
    var state = s.state;
    var props = s.props;

    var className = (0, _classnames2.default)('ap-info-item', {
      'ap-info-item-tappable': !!props.React
    }, props.className);
    var label = props.label;
    var value = props.value;
    var unit = props.unit;
    var link = props.link;
    var linkText = props.linkText;
    var icon = props.icon;

    return _react2.default.createElement(
      'div',
      { className: className,
        style: (0, _assign2.default)({}, props.style) },
      label ? s.renderLabel(label) : null,
      props.children,
      _react2.default.createElement(
        'div',
        { className: 'ap-info-item-value' },
        link && linkText ? s.renderValueText(value) : null,
        link ? s.renderValueLink(linkText || value, link) : s.renderValueText(value),
        unit ? _react2.default.createElement(
          'small',
          { className: 'ap-info-item-unit' },
          unit
        ) : null,
        icon ? s.renderIcon(icon) : null
      )
    );
  },


  // --------------------
  // Lifecycle
  // --------------------

  // ------------------
  // Custom
  // ------------------

  // ------------------
  // Private
  // ------------------
  renderLabel: function renderLabel(label) {
    var s = this;
    return _react2.default.createElement(
      'div',
      { className: 'ap-info-item-label' },
      label
    );
  },
  renderValueText: function renderValueText(text) {
    return _react2.default.createElement(
      'span',
      { className: 'ap-info-item-value-text' },
      text
    );
  },
  renderValueLink: function renderValueLink(text, link) {
    var s = this;
    if (typeof link === 'function') {
      return _react2.default.createElement(
        'a',
        { className: 'ap-info-item-link', href: 'javascript:void(0)',
          onClick: link },
        text
      );
    } else {
      return _react2.default.createElement(
        'a',
        { className: 'ap-info-item-link', href: link },
        text
      );
    }
  },
  renderIcon: function renderIcon(icon) {
    var s = this;
    return _react2.default.createElement(_apemanReactIcon.ApIcon, { className: (0, _classnames2.default)(icon, 'ap-info-item-icon') });
  }
});

exports.default = (0, _apemanReactTouchable.withTouch)(ApInfoItem);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwX2luZm9faXRlbS5qc3giXSwibmFtZXMiOlsiQXBJbmZvSXRlbSIsImNyZWF0ZUNsYXNzIiwicHJvcFR5cGVzIiwibGFiZWwiLCJzdHJpbmciLCJ2YWx1ZSIsIm9uZU9mVHlwZSIsIm51bWJlciIsIm5vZGUiLCJ1bml0IiwiaWNvbiIsImxpbmsiLCJmdW5jIiwibGlua1RleHQiLCJtaXhpbnMiLCJzdGF0aWNzIiwiT1BFTl9JQ09OIiwiQ0xPU0VfSUNPTiIsIk5FWFRfSUNPTiIsIlBSRVZfSUNPTiIsImdldEluaXRpYWxTdGF0ZSIsImdldERlZmF1bHRQcm9wcyIsInJlbmRlciIsInMiLCJzdGF0ZSIsInByb3BzIiwiY2xhc3NOYW1lIiwiUmVhY3QiLCJzdHlsZSIsInJlbmRlckxhYmVsIiwiY2hpbGRyZW4iLCJyZW5kZXJWYWx1ZVRleHQiLCJyZW5kZXJWYWx1ZUxpbmsiLCJyZW5kZXJJY29uIiwidGV4dCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBS0E7Ozs7Ozs7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQTtBQUNBLElBQU1BLGFBQWEsZ0JBQU1DLFdBQU4sQ0FBa0I7QUFBQTs7O0FBRW5DO0FBQ0E7QUFDQTs7QUFFQUMsYUFBVztBQUNUQyxXQUFPLGlCQUFNQyxNQURKO0FBRVRDLFdBQU8saUJBQU1DLFNBQU4sQ0FBZ0IsQ0FDckIsaUJBQU1GLE1BRGUsRUFFckIsaUJBQU1HLE1BRmUsRUFHckIsaUJBQU1DLElBSGUsQ0FBaEIsQ0FGRTtBQU9UQyxVQUFNLGlCQUFNTCxNQVBIO0FBUVRNLFVBQU0saUJBQU1OLE1BUkg7QUFTVE8sVUFBTSxpQkFBTUwsU0FBTixDQUFnQixDQUNwQixpQkFBTUYsTUFEYyxFQUVwQixpQkFBTVEsSUFGYyxDQUFoQixDQVRHO0FBYVRDLGNBQVUsaUJBQU1UO0FBYlAsR0FOd0I7O0FBc0JuQ1UsVUFBUSxtQ0F0QjJCOztBQTBCbkNDLFdBQVM7QUFDUEMsZUFBVyxrQkFESjtBQUVQQyxn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REY7QUFHRDtBQUNGLEdBNUdrQztBQThHbkNELFlBOUdtQyxzQkE4R3ZCdkIsSUE5R3VCLEVBOEdqQjtBQUNoQixRQUFNYSxJQUFJLElBQVY7QUFDQSxXQUNFLHlEQUFRLFdBQVksMEJBQVdiLElBQVgsRUFBaUIsbUJBQWpCLENBQXBCLEdBREY7QUFHRDtBQW5Ia0MsQ0FBbEIsQ0FBbkI7O2tCQXNIZSxxQ0FBVVYsVUFBVixDIiwiZmlsZSI6ImFwX2luZm9faXRlbS5qc3giLCJzb3VyY2VSb290IjoibGliIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBJdGVtIG9mIGluZm8uXG4gKiBAY2xhc3MgQXBJbmZvSXRlbVxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIGFzIHR5cGVzIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJ1xuaW1wb3J0IHsgQXBQdXJlTWl4aW4gfSBmcm9tICdhcGVtYW4tcmVhY3QtbWl4aW4tcHVyZSdcbmltcG9ydCB7IHdpdGhUb3VjaCB9IGZyb20gJ2FwZW1hbi1yZWFjdC10b3VjaGFibGUnXG5pbXBvcnQgeyBBcEljb24gfSBmcm9tICdhcGVtYW4tcmVhY3QtaWNvbidcblxuLyoqIEBsZW5kcyBBcEluZm9JdGVtICovXG5jb25zdCBBcEluZm9JdGVtID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIFNwZWNzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgbGFiZWw6IHR5cGVzLnN0cmluZyxcbiAgICB2YWx1ZTogdHlwZXMub25lT2ZUeXBlKFtcbiAgICAgIHR5cGVzLnN0cmluZyxcbiAgICAgIHR5cGVzLm51bWJlcixcbiAgICAgIHR5cGVzLm5vZGVcbiAgICBdKSxcbiAgICB1bml0OiB0eXBlcy5zdHJpbmcsXG4gICAgaWNvbjogdHlwZXMuc3RyaW5nLFxuICAgIGxpbms6IHR5cGVzLm9uZU9mVHlwZShbXG4gICAgICB0eXBlcy5zdHJpbmcsXG4gICAgICB0eXBlcy5mdW5jXG4gICAgXSksXG4gICAgbGlua1RleHQ6IHR5cGVzLnN0cmluZ1xuICB9LFxuXG4gIG1peGluczogW1xuICAgIEFwUHVyZU1peGluXG4gIF0sXG5cbiAgc3RhdGljczoge1xuICAgIE9QRU5fSUNPTjogJ2ZhIGZhLWFuZ2xlLWRvd24nLFxuICAgIENMT1NFX0lDT046ICdmYSBmYS1hbmdsZS1yaWdodCcsXG4gICAgTkVYVF9JQ09OOiAnZmEgZmEtYW5nbGUtcmlnaHQnLFxuICAgIFBSRVZfSUNPTjogJ2ZhIGZhLWFuZ2xlLWxlZnQnXG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlICgpIHtcbiAgICByZXR1cm4ge31cbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHMgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBpY29uOiBudWxsLFxuICAgICAgbGFiZWw6IG51bGwsXG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGxpbms6IG51bGwsXG4gICAgICBsaW5rVGV4dDogbnVsbCxcbiAgICAgIHVuaXQ6IG51bGxcbiAgICB9XG4gIH0sXG5cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIGxldCB7IHN0YXRlLCBwcm9wcyB9ID0gc1xuICAgIGxldCBjbGFzc05hbWUgPSBjbGFzc25hbWVzKCdhcC1pbmZvLWl0ZW0nLCB7XG4gICAgICAnYXAtaW5mby1pdGVtLXRhcHBhYmxlJzogISFwcm9wcy5SZWFjdFxuICAgIH0sIHByb3BzLmNsYXNzTmFtZSlcbiAgICBsZXQgeyBsYWJlbCwgdmFsdWUsIHVuaXQsIGxpbmssIGxpbmtUZXh0LCBpY29uIH0gPSBwcm9wc1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17IGNsYXNzTmFtZSB9XG4gICAgICAgICAgIHN0eWxlPXsgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMuc3R5bGUpIH0+XG4gICAgICAgIHsgbGFiZWwgPyBzLnJlbmRlckxhYmVsKGxhYmVsKSA6IG51bGwgfVxuICAgICAgICB7IHByb3BzLmNoaWxkcmVuIH1cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2FwLWluZm8taXRlbS12YWx1ZSc+XG4gICAgICAgICAgeyAobGluayAmJiBsaW5rVGV4dCkgPyBzLnJlbmRlclZhbHVlVGV4dCh2YWx1ZSkgOiBudWxsIH1cbiAgICAgICAgICB7IGxpbmsgPyBzLnJlbmRlclZhbHVlTGluayhsaW5rVGV4dCB8fCB2YWx1ZSwgbGluaykgOiBzLnJlbmRlclZhbHVlVGV4dCh2YWx1ZSkgfVxuICAgICAgICAgIHsgdW5pdCA/IDxzbWFsbCBjbGFzc05hbWU9J2FwLWluZm8taXRlbS11bml0Jz57IHVuaXQgfTwvc21hbGw+IDogbnVsbCB9XG4gICAgICAgICAgeyBpY29uID8gcy5yZW5kZXJJY29uKGljb24pIDogbnVsbCB9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9LFxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIExpZmVjeWNsZVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBDdXN0b21cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIFByaXZhdGVcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHJlbmRlckxhYmVsIChsYWJlbCkge1xuICAgIGNvbnN0IHMgPSB0aGlzXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdhcC1pbmZvLWl0ZW0tbGFiZWwnPlxuICAgICAgICB7IGxhYmVsIH1cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfSxcblxuICByZW5kZXJWYWx1ZVRleHQgKHRleHQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPHNwYW4gY2xhc3NOYW1lPSdhcC1pbmZvLWl0ZW0tdmFsdWUtdGV4dCc+eyB0ZXh0IH08L3NwYW4+XG4gICAgKVxuICB9LFxuXG4gIHJlbmRlclZhbHVlTGluayAodGV4dCwgbGluaykge1xuICAgIGNvbnN0IHMgPSB0aGlzXG4gICAgaWYgKHR5cGVvZiBsaW5rID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8YSBjbGFzc05hbWU9J2FwLWluZm8taXRlbS1saW5rJyBocmVmPSdqYXZhc2NyaXB0OnZvaWQoMCknXG4gICAgICAgICAgIG9uQ2xpY2s9eyBsaW5rIH0+eyB0ZXh0IH08L2E+XG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxhIGNsYXNzTmFtZT0nYXAtaW5mby1pdGVtLWxpbmsnIGhyZWY9eyBsaW5rIH0+eyB0ZXh0IH08L2E+XG4gICAgICApXG4gICAgfVxuICB9LFxuXG4gIHJlbmRlckljb24gKGljb24pIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIHJldHVybiAoXG4gICAgICA8QXBJY29uIGNsYXNzTmFtZT17IGNsYXNzbmFtZXMoaWNvbiwgJ2FwLWluZm8taXRlbS1pY29uJykgfS8+XG4gICAgKVxuICB9XG59KVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoVG91Y2goQXBJbmZvSXRlbSlcbiJdfQ==