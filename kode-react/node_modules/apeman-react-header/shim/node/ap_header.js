/**
 * apeman react package for header components.
 * @class ApHeader
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _apemanReactTouchable = require('apeman-react-touchable');

var _apemanReactMixinResize = require('apeman-react-mixin-resize');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _events = require('./events');

var _events2 = _interopRequireDefault(_events);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var addResizeHandler = _events2.default.addResizeHandler;
var removeResizeHandler = _events2.default.removeResizeHandler;

/** @lends ApHeader */

var ApHeader = _react2.default.createClass({
  displayName: 'ApHeader',


  // --------------------
  // Specs
  // --------------------

  propTypes: {},

  mixins: [_apemanReactMixinResize.ApResizeMixin],

  getInitialState: function getInitialState() {
    return {
      headerHeight: 'auto'
    };
  },
  getDefaultProps: function getDefaultProps() {
    return {};
  },
  render: function render() {
    var s = this;
    var state = s.state;
    var props = s.props;


    return _react2.default.createElement(
      'div',
      { className: 'ap-header-space',
        style: { minHeight: state.headerHeight } },
      _react2.default.createElement(
        'header',
        { className: (0, _classnames2.default)('ap-header', props.className),
          style: (0, _assign2.default)({}, props.style),
          ref: function ref(header) {
            s.header = header;
          } },
        _react2.default.createElement('div', { className: 'ap-header-back' }),
        props.children
      )
    );
  },


  // --------------------
  // Lifecycle
  // --------------------

  componentDidMount: function componentDidMount() {
    var s = this;
    s.resizeHeader();
    addResizeHandler(s.resizeHeader);
  },
  componentWillUnmount: function componentWillUnmount() {
    var s = this;
    removeResizeHandler(s.resizeHeader);
  },
  windowDidResize: function windowDidResize() {
    var s = this;
    s.resizeHeader();
  },


  // ------------------
  // Custom
  // ------------------

  resizeHeader: function resizeHeader() {
    var s = this;
    var header = s.header;

    if (!header) {
      return;
    }

    var _header$getBoundingCl = header.getBoundingClientRect();

    var height = _header$getBoundingCl.height;

    s.setState({
      headerHeight: height
    });
  }

  // ------------------
  // Private
  // ------------------

});

var ApHeaderWrap = (0, _apemanReactTouchable.withOutside)(ApHeader);
ApHeaderWrap.events = _events2.default;

exports.default = ApHeaderWrap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwX2hlYWRlci5qc3giXSwibmFtZXMiOlsiYWRkUmVzaXplSGFuZGxlciIsInJlbW92ZVJlc2l6ZUhhbmRsZXIiLCJBcEhlYWRlciIsImNyZWF0ZUNsYXNzIiwicHJvcFR5cGVzIiwibWl4aW5zIiwiZ2V0SW5pdGlhbFN0YXRlIiwiaGVhZGVySGVpZ2h0IiwiZ2V0RGVmYXVsdFByb3BzIiwicmVuZGVyIiwicyIsInN0YXRlIiwicHJvcHMiLCJtaW5IZWlnaHQiLCJjbGFzc05hbWUiLCJzdHlsZSIsImhlYWRlciIsImNoaWxkcmVuIiwiY29tcG9uZW50RGlkTW91bnQiLCJyZXNpemVIZWFkZXIiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsIndpbmRvd0RpZFJlc2l6ZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImhlaWdodCIsInNldFN0YXRlIiwiQXBIZWFkZXJXcmFwIiwiZXZlbnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFLQTs7Ozs7Ozs7OztBQUVBOzs7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0lBRVFBLGdCLG9CQUFBQSxnQjtJQUFrQkMsbUIsb0JBQUFBLG1COztBQUUxQjs7QUFDQSxJQUFNQyxXQUFXLGdCQUFNQyxXQUFOLENBQWtCO0FBQUE7OztBQUVqQztBQUNBO0FBQ0E7O0FBRUFDLGFBQVcsRUFOc0I7O0FBUWpDQyxVQUFRLHVDQVJ5Qjs7QUFZakNDLGlCQVppQyw2QkFZZDtBQUNqQixXQUFPO0FBQ0xDLG9CQUFjO0FBRFQsS0FBUDtBQUdELEdBaEJnQztBQWtCakNDLGlCQWxCaUMsNkJBa0JkO0FBQ2pCLFdBQU8sRUFBUDtBQUNELEdBcEJnQztBQXNCakNDLFFBdEJpQyxvQkFzQnZCO0FBQ1IsUUFBTUMsSUFBSSxJQUFWO0FBRFEsUUFFRkMsS0FGRSxHQUVlRCxDQUZmLENBRUZDLEtBRkU7QUFBQSxRQUVLQyxLQUZMLEdBRWVGLENBRmYsQ0FFS0UsS0FGTDs7O0FBSVIsV0FDRTtBQUFBO0FBQUEsUUFBSyxXQUFVLGlCQUFmO0FBQ0ssZUFBUSxFQUFFQyxXQUFXRixNQUFNSixZQUFuQixFQURiO0FBRUU7QUFBQTtBQUFBLFVBQVEsV0FBWSwwQkFBVyxXQUFYLEVBQXdCSyxNQUFNRSxTQUE5QixDQUFwQjtBQUNRLGlCQUFRLHNCQUFjLEVBQWQsRUFBa0JGLE1BQU1HLEtBQXhCLENBRGhCO0FBRVEsZUFBTSxhQUFDQyxNQUFELEVBQVk7QUFBRU4sY0FBRU0sTUFBRixHQUFXQSxNQUFYO0FBQW1CLFdBRi9DO0FBR0UsK0NBQUssV0FBVSxnQkFBZixHQUhGO0FBSUlKLGNBQU1LO0FBSlY7QUFGRixLQURGO0FBV0QsR0FyQ2dDOzs7QUF1Q2pDO0FBQ0E7QUFDQTs7QUFFQUMsbUJBM0NpQywrQkEyQ1o7QUFDbkIsUUFBTVIsSUFBSSxJQUFWO0FBQ0FBLE1BQUVTLFlBQUY7QUFDQW5CLHFCQUFpQlUsRUFBRVMsWUFBbkI7QUFDRCxHQS9DZ0M7QUFpRGpDQyxzQkFqRGlDLGtDQWlEVDtBQUN0QixRQUFNVixJQUFJLElBQVY7QUFDQVQsd0JBQW9CUyxFQUFFUyxZQUF0QjtBQUNELEdBcERnQztBQXNEakNFLGlCQXREaUMsNkJBc0RkO0FBQ2pCLFFBQU1YLElBQUksSUFBVjtBQUNBQSxNQUFFUyxZQUFGO0FBQ0QsR0F6RGdDOzs7QUEyRGpDO0FBQ0E7QUFDQTs7QUFFQUEsY0EvRGlDLDBCQStEakI7QUFDZCxRQUFNVCxJQUFJLElBQVY7QUFEYyxRQUVSTSxNQUZRLEdBRUdOLENBRkgsQ0FFUk0sTUFGUTs7QUFHZCxRQUFJLENBQUNBLE1BQUwsRUFBYTtBQUNYO0FBQ0Q7O0FBTGEsZ0NBTUdBLE9BQU9NLHFCQUFQLEVBTkg7O0FBQUEsUUFNUkMsTUFOUSx5QkFNUkEsTUFOUTs7QUFPZGIsTUFBRWMsUUFBRixDQUFXO0FBQ1RqQixvQkFBY2dCO0FBREwsS0FBWDtBQUdEOztBQUVEO0FBQ0E7QUFDQTs7QUE3RWlDLENBQWxCLENBQWpCOztBQWdGQSxJQUFNRSxlQUFlLHVDQUFZdkIsUUFBWixDQUFyQjtBQUNBdUIsYUFBYUMsTUFBYjs7a0JBRWVELFkiLCJmaWxlIjoiYXBfaGVhZGVyLmpzeCIsInNvdXJjZVJvb3QiOiJsaWIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIGFwZW1hbiByZWFjdCBwYWNrYWdlIGZvciBoZWFkZXIgY29tcG9uZW50cy5cbiAqIEBjbGFzcyBBcEhlYWRlclxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIGFzIHR5cGVzIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyB3aXRoT3V0c2lkZSB9IGZyb20gJ2FwZW1hbi1yZWFjdC10b3VjaGFibGUnXG5pbXBvcnQgeyBBcFJlc2l6ZU1peGluIH0gZnJvbSAnYXBlbWFuLXJlYWN0LW1peGluLXJlc2l6ZSdcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnXG5pbXBvcnQgZXZlbnRzIGZyb20gJy4vZXZlbnRzJ1xuXG5jb25zdCB7IGFkZFJlc2l6ZUhhbmRsZXIsIHJlbW92ZVJlc2l6ZUhhbmRsZXIgfSA9IGV2ZW50c1xuXG4vKiogQGxlbmRzIEFwSGVhZGVyICovXG5jb25zdCBBcEhlYWRlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBTcGVjc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIHByb3BUeXBlczoge30sXG5cbiAgbWl4aW5zOiBbXG4gICAgQXBSZXNpemVNaXhpblxuICBdLFxuXG4gIGdldEluaXRpYWxTdGF0ZSAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhlYWRlckhlaWdodDogJ2F1dG8nXG4gICAgfVxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wcyAoKSB7XG4gICAgcmV0dXJuIHt9XG4gIH0sXG5cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIGxldCB7IHN0YXRlLCBwcm9wcyB9ID0gc1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdhcC1oZWFkZXItc3BhY2UnXG4gICAgICAgICAgIHN0eWxlPXsgeyBtaW5IZWlnaHQ6IHN0YXRlLmhlYWRlckhlaWdodCB9IH0+XG4gICAgICAgIDxoZWFkZXIgY2xhc3NOYW1lPXsgY2xhc3NuYW1lcygnYXAtaGVhZGVyJywgcHJvcHMuY2xhc3NOYW1lKSB9XG4gICAgICAgICAgICAgICAgc3R5bGU9eyBPYmplY3QuYXNzaWduKHt9LCBwcm9wcy5zdHlsZSkgfVxuICAgICAgICAgICAgICAgIHJlZj17IChoZWFkZXIpID0+IHsgcy5oZWFkZXIgPSBoZWFkZXIgfSB9PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdhcC1oZWFkZXItYmFjayc+PC9kaXY+XG4gICAgICAgICAgeyBwcm9wcy5jaGlsZHJlbiB9XG4gICAgICAgIDwvaGVhZGVyPlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9LFxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIExpZmVjeWNsZVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIHMucmVzaXplSGVhZGVyKClcbiAgICBhZGRSZXNpemVIYW5kbGVyKHMucmVzaXplSGVhZGVyKVxuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIHJlbW92ZVJlc2l6ZUhhbmRsZXIocy5yZXNpemVIZWFkZXIpXG4gIH0sXG5cbiAgd2luZG93RGlkUmVzaXplICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIHMucmVzaXplSGVhZGVyKClcbiAgfSxcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gQ3VzdG9tXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIHJlc2l6ZUhlYWRlciAoKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBsZXQgeyBoZWFkZXIgfSA9IHNcbiAgICBpZiAoIWhlYWRlcikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGxldCB7IGhlaWdodCB9ID0gaGVhZGVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gICAgcy5zZXRTdGF0ZSh7XG4gICAgICBoZWFkZXJIZWlnaHQ6IGhlaWdodFxuICAgIH0pXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gUHJpdmF0ZVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cbn0pXG5cbmNvbnN0IEFwSGVhZGVyV3JhcCA9IHdpdGhPdXRzaWRlKEFwSGVhZGVyKVxuQXBIZWFkZXJXcmFwLmV2ZW50cyA9IGV2ZW50c1xuXG5leHBvcnQgZGVmYXVsdCBBcEhlYWRlcldyYXBcbiJdfQ==