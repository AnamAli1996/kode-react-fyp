/**
 * Style for ApSwitch.
 * @class ApSwitchStyle
 */

'use strict'

import React, {PropTypes as types} from 'react'
import {ApStyle} from 'apeman-react-style'

/** @lends ApSwitchStyle */
const ApSwitchStyle = React.createClass({
  propTypes: {
    style: types.object,
    highlightColor: types.string
  },
  getDefaultProps () {
    return {
      style: {},
      highlightColor: ApStyle.DEFAULT_HIGHLIGHT_COLOR,
      backgroundColor: ApStyle.DEFAULT_BACKGROUND_COLOR,
      borderColor: '#CCC'
    }
  },
  statics: {
    styleData (config) {
      let { highlightColor, backgroundColor, borderColor } = config
      let handleSize = 24
      let transition = 400
      let minWidth = handleSize * 1.5
      return {
        all: {
          '.ap-switch': {
            display: 'inline-flex',
            justifyContent: 'center',
            alignItems: 'center',
            cursor: 'pointer'
          },
          '.ap-switch-radio': {
            display: 'none'
          },
          '.ap-switch-label': {
            width: '100%',
            height: '100%',
            boxSizing: 'border-box',
            textAlign: 'center',
            fontSize: '14px',
            whiteSpace: 'nowrap',
            textOverflow: 'ellipsis',
            overflow: 'hidden',
            padding: 0,
            flexGrow: 1,
            flexShrink: 1,
            cursor: 'pointer',
            transition: `width ${transition}ms`,
            lineHeight: `${handleSize}px`
          },
          '.ap-switch-label-text': {
            display: 'inline-block',
            width: '100%',
            padding: '0 8px',
            boxSizing: 'border-box',
            whiteSpace: 'nowrap',
            overflow: 'hidden',
            textOverflow: 'ellipsis',
            minWidth: minWidth
          },
          '.ap-switch-on-label': {
            background: highlightColor,
            color: 'white',
            borderRadius: `${handleSize / 2}px 0 0 ${handleSize / 2}px`,
            marginRight: -1 * handleSize / 2
          },
          '.ap-switch-off-label': {
            background: '#FAFAFA',
            color: '#AAA',
            borderRadius: `0 ${handleSize / 2}px ${handleSize / 2}px 0`,
            marginLeft: -1 * handleSize / 2
          },
          '.ap-switch-on .ap-switch-off-label': {
            width: `${handleSize / 2 + 2}px !important`
          },
          '.ap-switch-off .ap-switch-on-label': {
            width: `${handleSize / 2 + 2}px !important`
          },
          '.ap-switch-inner': {
            display: 'inline-flex',
            justifyContent: 'flex-start',
            alignItems: 'center',
            backgroundColor: backgroundColor,
            height: handleSize,
            borderRadius: (handleSize / 2 + 1),
            minWidth: minWidth,
            border: `1px solid ${borderColor}`,
            overflow: 'hidden',
            width: '100%'
          },
          '.ap-switch-handle': {
            display: 'inline-block',
            borderRadius: '50%',
            width: handleSize,
            height: handleSize,
            backgroundColor: 'white',
            border: `1px solid ${borderColor}`,
            flexGrow: 0,
            flexShrink: 0,
            position: 'relative',
            zIndex: 4
          }
        }
      }
    }
  },
  render () {
    const s = this
    let { props } = s

    let { all, small, medium, large } = ApSwitchStyle.styleData(props)

    return (
      <ApStyle data={ Object.assign(all, props.style) }
               smallMediaData={ small }
               mediumMediaData={ medium }
               largeMediaData={ large }
      >{ props.children }</ApStyle>
    )
  }
})

export default ApSwitchStyle
