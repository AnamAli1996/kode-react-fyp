/**
 * Dropdown component
 * @class ApDropdown
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _apemanReactSpinner = require('apeman-react-spinner');

var _apemanReactTouchable = require('apeman-react-touchable');

var _apemanReactMixinLayout = require('apeman-react-mixin-layout');

var _apemanReactButton = require('apeman-react-button');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApDropdown */
var ApDropdown = _react2.default.createClass({
  displayName: 'ApDropdown',


  // --------------------
  // Specs
  // --------------------
  propTypes: {
    /** Icon class name for open state */
    openIcon: _react.PropTypes.string,
    /** Icon class name for closed state */
    closedIcon: _react.PropTypes.string,
    /** Open or not */
    open: _react.PropTypes.bool.isRequired,
    /** Handler for tap event */
    onTap: _react.PropTypes.func.isRequired,
    /** Dropdown title */
    title: _react.PropTypes.node
  },

  mixins: [_apemanReactMixinLayout.ApLayoutMixin],

  getInitialState: function getInitialState() {
    return {
      open: false
    };
  },
  getDefaultProps: function getDefaultProps() {
    return {
      openIcon: 'ion ion-chevron-up',
      closedIcon: 'ion ion-chevron-down'
    };
  },
  render: function render() {
    var s = this;
    var state = s.state;
    var props = s.props;
    var layouts = s.layouts;

    var className = (0, _classnames2.default)('ap-dropdown', {
      'ap-dropdown-open': props.open,
      'ap-dropdown-closed': !props.open
    }, props.className);
    return _react2.default.createElement(
      'div',
      { className: className,
        style: (0, _assign2.default)({}, props.style) },
      props.spinner,
      _react2.default.createElement(
        'div',
        { className: 'ap-dropdown-button-wrap' },
        _react2.default.createElement(
          _apemanReactButton.ApButton,
          { className: 'ap-dropdown-button', onTap: s.handleButtonTap },
          props.title,
          _react2.default.createElement('i', { className: (0, _classnames2.default)('ap-dropdown-icon', props.open ? props.openIcon : props.closedIcon) })
        )
      ),
      _react2.default.createElement(
        'div',
        { className: 'ap-dropdown-content', style: layouts.content },
        _react2.default.createElement(
          'div',
          { className: 'ap-dropdown-content-inner',
            ref: function ref(inner) {
              return s.registerContentInner(inner);
            } },
          props.children
        )
      )
    );
  },


  // --------------------
  // Lifecycle
  // --------------------

  componentWillMount: function componentWillMount() {
    var s = this;
  },
  componentDidMount: function componentDidMount() {
    var s = this;
    s.layout();
  },


  // ------------------
  // For ApLayoutMixin
  // ------------------

  getInitialLayouts: function getInitialLayouts() {
    return {
      content: null
    };
  },
  calcLayouts: function calcLayouts() {
    var s = this;
    var contentInner = s.contentInner;

    var contentRect = contentInner.getBoundingClientRect();
    return {
      content: {
        height: contentRect.height
      }
    };
  },


  // ------------------
  // Custom
  // ------------------

  contentInner: null,

  registerContentInner: function registerContentInner(contentInner) {
    var s = this;
    s.contentInner = contentInner;
  },
  handleButtonTap: function handleButtonTap(e) {
    var s = this;
    var props = s.props;

    props.onTap(e);
  }
});

exports.default = (0, _apemanReactTouchable.withOutside)((0, _apemanReactSpinner.withSpin)(ApDropdown));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwX2Ryb3Bkb3duLmpzeCJdLCJuYW1lcyI6WyJBcERyb3Bkb3duIiwiY3JlYXRlQ2xhc3MiLCJwcm9wVHlwZXMiLCJvcGVuSWNvbiIsInN0cmluZyIsImNsb3NlZEljb24iLCJvcGVuIiwiYm9vbCIsImlzUmVxdWlyZWQiLCJvblRhcCIsImZ1bmMiLCJ0aXRsZSIsIm5vZGUiLCJtaXhpbnMiLCJnZXRJbml0aWFsU3RhdGUiLCJnZXREZWZhdWx0UHJvcHMiLCJyZW5kZXIiLCJzIiwic3RhdGUiLCJwcm9wcyIsImxheW91dHMiLCJjbGFzc05hbWUiLCJzdHlsZSIsInNwaW5uZXIiLCJoYW5kbGVCdXR0b25UYXAiLCJjb250ZW50IiwiaW5uZXIiLCJyZWdpc3RlckNvbnRlbnRJbm5lciIsImNoaWxkcmVuIiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJsYXlvdXQiLCJnZXRJbml0aWFsTGF5b3V0cyIsImNhbGNMYXlvdXRzIiwiY29udGVudElubmVyIiwiY29udGVudFJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJoZWlnaHQiLCJlIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFLQTs7Ozs7Ozs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7OztBQUVBO0FBQ0EsSUFBTUEsYUFBYSxnQkFBTUMsV0FBTixDQUFrQjtBQUFBOzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0FDLGFBQVc7QUFDVDtBQUNBQyxjQUFVLGlCQUFNQyxNQUZQO0FBR1Q7QUFDQUMsZ0JBQVksaUJBQU1ELE1BSlQ7QUFLVDtBQUNBRSxVQUFNLGlCQUFNQyxJQUFOLENBQVdDLFVBTlI7QUFPVDtBQUNBQyxXQUFPLGlCQUFNQyxJQUFOLENBQVdGLFVBUlQ7QUFTVDtBQUNBRyxXQUFPLGlCQUFNQztBQVZKLEdBTHdCOztBQWtCbkNDLFVBQVEsdUNBbEIyQjs7QUFzQm5DQyxpQkF0Qm1DLDZCQXNCaEI7QUFDakIsV0FBTztBQUNMUixZQUFNO0FBREQsS0FBUDtBQUdELEdBMUJrQztBQTRCbkNTLGlCQTVCbUMsNkJBNEJoQjtBQUNqQixXQUFPO0FBQ0xaLGdCQUFVLG9CQURMO0FBRUxFLGtCQUFZO0FBRlAsS0FBUDtBQUlELEdBakNrQztBQW1DbkNXLFFBbkNtQyxvQkFtQ3pCO0FBQ1IsUUFBTUMsSUFBSSxJQUFWO0FBRFEsUUFFRkMsS0FGRSxHQUV3QkQsQ0FGeEIsQ0FFRkMsS0FGRTtBQUFBLFFBRUtDLEtBRkwsR0FFd0JGLENBRnhCLENBRUtFLEtBRkw7QUFBQSxRQUVZQyxPQUZaLEdBRXdCSCxDQUZ4QixDQUVZRyxPQUZaOztBQUdSLFFBQUlDLFlBQVksMEJBQVcsYUFBWCxFQUEwQjtBQUN4QywwQkFBb0JGLE1BQU1iLElBRGM7QUFFeEMsNEJBQXNCLENBQUNhLE1BQU1iO0FBRlcsS0FBMUIsRUFHYmEsTUFBTUUsU0FITyxDQUFoQjtBQUlBLFdBQ0U7QUFBQTtBQUFBLFFBQUssV0FBWUEsU0FBakI7QUFDSyxlQUFRLHNCQUFjLEVBQWQsRUFBa0JGLE1BQU1HLEtBQXhCLENBRGI7QUFFSUgsWUFBTUksT0FGVjtBQUdFO0FBQUE7QUFBQSxVQUFLLFdBQVUseUJBQWY7QUFDRTtBQUFBO0FBQUEsWUFBVSxXQUFVLG9CQUFwQixFQUF5QyxPQUFRTixFQUFFTyxlQUFuRDtBQUNJTCxnQkFBTVIsS0FEVjtBQUVFLCtDQUFHLFdBQVksMEJBQVcsa0JBQVgsRUFBK0JRLE1BQU1iLElBQU4sR0FBYWEsTUFBTWhCLFFBQW5CLEdBQThCZ0IsTUFBTWQsVUFBbkUsQ0FBZjtBQUZGO0FBREYsT0FIRjtBQVNFO0FBQUE7QUFBQSxVQUFLLFdBQVUscUJBQWYsRUFBcUMsT0FBUWUsUUFBUUssT0FBckQ7QUFDRTtBQUFBO0FBQUEsWUFBSyxXQUFVLDJCQUFmO0FBQ0ssaUJBQU0sYUFBQ0MsS0FBRDtBQUFBLHFCQUFXVCxFQUFFVSxvQkFBRixDQUF1QkQsS0FBdkIsQ0FBWDtBQUFBLGFBRFg7QUFFSVAsZ0JBQU1TO0FBRlY7QUFERjtBQVRGLEtBREY7QUFrQkQsR0E1RGtDOzs7QUE4RG5DO0FBQ0E7QUFDQTs7QUFFQUMsb0JBbEVtQyxnQ0FrRWI7QUFDcEIsUUFBTVosSUFBSSxJQUFWO0FBQ0QsR0FwRWtDO0FBc0VuQ2EsbUJBdEVtQywrQkFzRWQ7QUFDbkIsUUFBTWIsSUFBSSxJQUFWO0FBQ0FBLE1BQUVjLE1BQUY7QUFDRCxHQXpFa0M7OztBQTJFbkM7QUFDQTtBQUNBOztBQUVBQyxtQkEvRW1DLCtCQStFZDtBQUNuQixXQUFPO0FBQ0xQLGVBQVM7QUFESixLQUFQO0FBR0QsR0FuRmtDO0FBcUZuQ1EsYUFyRm1DLHlCQXFGcEI7QUFDYixRQUFNaEIsSUFBSSxJQUFWO0FBRGEsUUFFUGlCLFlBRk8sR0FFVWpCLENBRlYsQ0FFUGlCLFlBRk87O0FBR2IsUUFBSUMsY0FBY0QsYUFBYUUscUJBQWIsRUFBbEI7QUFDQSxXQUFPO0FBQ0xYLGVBQVM7QUFDUFksZ0JBQVFGLFlBQVlFO0FBRGI7QUFESixLQUFQO0FBS0QsR0E5RmtDOzs7QUFnR25DO0FBQ0E7QUFDQTs7QUFFQUgsZ0JBQWMsSUFwR3FCOztBQXNHbkNQLHNCQXRHbUMsZ0NBc0diTyxZQXRHYSxFQXNHQztBQUNsQyxRQUFNakIsSUFBSSxJQUFWO0FBQ0FBLE1BQUVpQixZQUFGLEdBQWlCQSxZQUFqQjtBQUNELEdBekdrQztBQTJHbkNWLGlCQTNHbUMsMkJBMkdsQmMsQ0EzR2tCLEVBMkdmO0FBQ2xCLFFBQU1yQixJQUFJLElBQVY7QUFEa0IsUUFFWkUsS0FGWSxHQUVGRixDQUZFLENBRVpFLEtBRlk7O0FBR2xCQSxVQUFNVixLQUFOLENBQVk2QixDQUFaO0FBQ0Q7QUEvR2tDLENBQWxCLENBQW5COztrQkFtSGUsdUNBQVksa0NBQVN0QyxVQUFULENBQVosQyIsImZpbGUiOiJhcF9kcm9wZG93bi5qc3giLCJzb3VyY2VSb290IjoibGliIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEcm9wZG93biBjb21wb25lbnRcbiAqIEBjbGFzcyBBcERyb3Bkb3duXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgYXMgdHlwZXMgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnXG5pbXBvcnQgeyB3aXRoU3BpbiB9IGZyb20gJ2FwZW1hbi1yZWFjdC1zcGlubmVyJ1xuaW1wb3J0IHsgd2l0aE91dHNpZGUgfSBmcm9tICdhcGVtYW4tcmVhY3QtdG91Y2hhYmxlJ1xuXG5pbXBvcnQgeyBBcExheW91dE1peGluIH0gZnJvbSAnYXBlbWFuLXJlYWN0LW1peGluLWxheW91dCdcbmltcG9ydCB7IEFwQnV0dG9uIH0gZnJvbSAnYXBlbWFuLXJlYWN0LWJ1dHRvbidcblxuLyoqIEBsZW5kcyBBcERyb3Bkb3duICovXG5jb25zdCBBcERyb3Bkb3duID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIFNwZWNzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHByb3BUeXBlczoge1xuICAgIC8qKiBJY29uIGNsYXNzIG5hbWUgZm9yIG9wZW4gc3RhdGUgKi9cbiAgICBvcGVuSWNvbjogdHlwZXMuc3RyaW5nLFxuICAgIC8qKiBJY29uIGNsYXNzIG5hbWUgZm9yIGNsb3NlZCBzdGF0ZSAqL1xuICAgIGNsb3NlZEljb246IHR5cGVzLnN0cmluZyxcbiAgICAvKiogT3BlbiBvciBub3QgKi9cbiAgICBvcGVuOiB0eXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgLyoqIEhhbmRsZXIgZm9yIHRhcCBldmVudCAqL1xuICAgIG9uVGFwOiB0eXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgLyoqIERyb3Bkb3duIHRpdGxlICovXG4gICAgdGl0bGU6IHR5cGVzLm5vZGVcbiAgfSxcblxuICBtaXhpbnM6IFtcbiAgICBBcExheW91dE1peGluXG4gIF0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb3BlbjogZmFsc2VcbiAgICB9XG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgb3Blbkljb246ICdpb24gaW9uLWNoZXZyb24tdXAnLFxuICAgICAgY2xvc2VkSWNvbjogJ2lvbiBpb24tY2hldnJvbi1kb3duJ1xuICAgIH1cbiAgfSxcblxuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IHMgPSB0aGlzXG4gICAgbGV0IHsgc3RhdGUsIHByb3BzLCBsYXlvdXRzIH0gPSBzXG4gICAgbGV0IGNsYXNzTmFtZSA9IGNsYXNzbmFtZXMoJ2FwLWRyb3Bkb3duJywge1xuICAgICAgJ2FwLWRyb3Bkb3duLW9wZW4nOiBwcm9wcy5vcGVuLFxuICAgICAgJ2FwLWRyb3Bkb3duLWNsb3NlZCc6ICFwcm9wcy5vcGVuXG4gICAgfSwgcHJvcHMuY2xhc3NOYW1lKVxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17IGNsYXNzTmFtZSB9XG4gICAgICAgICAgIHN0eWxlPXsgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMuc3R5bGUpIH0+XG4gICAgICAgIHsgcHJvcHMuc3Bpbm5lciB9XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdhcC1kcm9wZG93bi1idXR0b24td3JhcCc+XG4gICAgICAgICAgPEFwQnV0dG9uIGNsYXNzTmFtZT0nYXAtZHJvcGRvd24tYnV0dG9uJyBvblRhcD17IHMuaGFuZGxlQnV0dG9uVGFwIH0+XG4gICAgICAgICAgICB7IHByb3BzLnRpdGxlIH1cbiAgICAgICAgICAgIDxpIGNsYXNzTmFtZT17IGNsYXNzbmFtZXMoJ2FwLWRyb3Bkb3duLWljb24nLCBwcm9wcy5vcGVuID8gcHJvcHMub3Blbkljb24gOiBwcm9wcy5jbG9zZWRJY29uKSB9Lz5cbiAgICAgICAgICA8L0FwQnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2FwLWRyb3Bkb3duLWNvbnRlbnQnIHN0eWxlPXsgbGF5b3V0cy5jb250ZW50IH0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2FwLWRyb3Bkb3duLWNvbnRlbnQtaW5uZXInXG4gICAgICAgICAgICAgICByZWY9eyAoaW5uZXIpID0+IHMucmVnaXN0ZXJDb250ZW50SW5uZXIoaW5uZXIpIH0+XG4gICAgICAgICAgICB7IHByb3BzLmNoaWxkcmVuIH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH0sXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gTGlmZWN5Y2xlXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgY29tcG9uZW50V2lsbE1vdW50ICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICB9LFxuXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIHMubGF5b3V0KClcbiAgfSxcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gRm9yIEFwTGF5b3V0TWl4aW5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgZ2V0SW5pdGlhbExheW91dHMgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBjb250ZW50OiBudWxsXG4gICAgfVxuICB9LFxuXG4gIGNhbGNMYXlvdXRzICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIGxldCB7IGNvbnRlbnRJbm5lciB9ID0gc1xuICAgIGxldCBjb250ZW50UmVjdCA9IGNvbnRlbnRJbm5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIHJldHVybiB7XG4gICAgICBjb250ZW50OiB7XG4gICAgICAgIGhlaWdodDogY29udGVudFJlY3QuaGVpZ2h0XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBDdXN0b21cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgY29udGVudElubmVyOiBudWxsLFxuXG4gIHJlZ2lzdGVyQ29udGVudElubmVyIChjb250ZW50SW5uZXIpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIHMuY29udGVudElubmVyID0gY29udGVudElubmVyXG4gIH0sXG5cbiAgaGFuZGxlQnV0dG9uVGFwIChlKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBsZXQgeyBwcm9wcyB9ID0gc1xuICAgIHByb3BzLm9uVGFwKGUpXG4gIH1cblxufSlcblxuZXhwb3J0IGRlZmF1bHQgd2l0aE91dHNpZGUod2l0aFNwaW4oQXBEcm9wZG93bikpXG4iXX0=