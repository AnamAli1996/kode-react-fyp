/**
 * Prev button component.
 * @class ApPrevButton
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ap_button = require('./ap_button');

var _ap_button2 = _interopRequireDefault(_ap_button);

var _apemanReactIcon = require('apeman-react-icon');

var _asobj = require('asobj');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApPrevButton */
var ApPrevButton = _react2.default.createClass({
  displayName: 'ApPrevButton',


  // --------------------
  // Specs
  // --------------------

  propTypes: {
    disabled: _react.PropTypes.bool,
    onTap: _react.PropTypes.func,
    text: _react.PropTypes.string,
    size: _react.PropTypes.number,
    icon: _react.PropTypes.string
  },

  mixins: [],

  getInitialState: function getInitialState() {
    return {};
  },
  getDefaultProps: function getDefaultProps() {
    return {
      disabled: false,
      onTap: null,
      text: null,
      icon: 'fa fa-caret-left'
    };
  },
  render: function render() {
    var s = this;
    var props = s.props;

    return _react2.default.createElement(
      _ap_button2.default,
      (0, _extends3.default)({}, props, {
        className: (0, _classnames2.default)('ap-prev-button', props.className),
        wide: false,
        style: (0, _assign2.default)({}, props.style)
      }),
      _react2.default.createElement(_apemanReactIcon.ApIcon, { className: (0, _classnames2.default)('ap-prev-button-icon', props.icon) }),
      _react2.default.createElement(
        'span',
        { className: 'ap-prev-button-text' },
        props.text
      ),
      props.children
    );
  },


  // --------------------
  // Lifecycle
  // --------------------

  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    var s = this;
    var props = s.props,
        state = s.state;

    return !(0, _asobj.shallowEqual)(props, nextProps) || !(0, _asobj.shallowEqual)(state, nextState);
  }
});

exports.default = ApPrevButton;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwX3ByZXZfYnV0dG9uLmpzeCJdLCJuYW1lcyI6WyJBcFByZXZCdXR0b24iLCJjcmVhdGVDbGFzcyIsInByb3BUeXBlcyIsImRpc2FibGVkIiwiYm9vbCIsIm9uVGFwIiwiZnVuYyIsInRleHQiLCJzdHJpbmciLCJzaXplIiwibnVtYmVyIiwiaWNvbiIsIm1peGlucyIsImdldEluaXRpYWxTdGF0ZSIsImdldERlZmF1bHRQcm9wcyIsInJlbmRlciIsInMiLCJwcm9wcyIsImNsYXNzTmFtZSIsInN0eWxlIiwiY2hpbGRyZW4iLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJuZXh0UHJvcHMiLCJuZXh0U3RhdGUiLCJzdGF0ZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBS0E7Ozs7Ozs7Ozs7Ozs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFFQTtBQUNBLElBQU1BLGVBQWUsZ0JBQU1DLFdBQU4sQ0FBa0I7QUFBQTs7O0FBRXJDO0FBQ0E7QUFDQTs7QUFFQUMsYUFBVztBQUNUQyxjQUFVLGlCQUFNQyxJQURQO0FBRVRDLFdBQU8saUJBQU1DLElBRko7QUFHVEMsVUFBTSxpQkFBTUMsTUFISDtBQUlUQyxVQUFNLGlCQUFNQyxNQUpIO0FBS1RDLFVBQU0saUJBQU1IO0FBTEgsR0FOMEI7O0FBY3JDSSxVQUFRLEVBZDZCOztBQWdCckNDLGlCQWhCcUMsNkJBZ0JsQjtBQUNqQixXQUFPLEVBQVA7QUFDRCxHQWxCb0M7QUFvQnJDQyxpQkFwQnFDLDZCQW9CbEI7QUFDakIsV0FBTztBQUNMWCxnQkFBVSxLQURMO0FBRUxFLGFBQU8sSUFGRjtBQUdMRSxZQUFNLElBSEQ7QUFJTEksWUFBTTtBQUpELEtBQVA7QUFNRCxHQTNCb0M7QUE2QnJDSSxRQTdCcUMsb0JBNkIzQjtBQUNSLFFBQU1DLElBQUksSUFBVjtBQURRLFFBRUZDLEtBRkUsR0FFUUQsQ0FGUixDQUVGQyxLQUZFOztBQUdSLFdBQ0U7QUFBQTtBQUFBLGlDQUFlQSxLQUFmO0FBQ1UsbUJBQVksMEJBQVcsZ0JBQVgsRUFBNkJBLE1BQU1DLFNBQW5DLENBRHRCO0FBRVUsY0FBTyxLQUZqQjtBQUdVLGVBQU8sc0JBQWMsRUFBZCxFQUFrQkQsTUFBTUUsS0FBeEI7QUFIakI7QUFLRSwrREFBUSxXQUFZLDBCQUFXLHFCQUFYLEVBQWtDRixNQUFNTixJQUF4QyxDQUFwQixHQUxGO0FBTUU7QUFBQTtBQUFBLFVBQU0sV0FBVSxxQkFBaEI7QUFDY00sY0FBTVY7QUFEcEIsT0FORjtBQVNJVSxZQUFNRztBQVRWLEtBREY7QUFhRCxHQTdDb0M7OztBQStDckM7QUFDQTtBQUNBOztBQUVBQyx1QkFuRHFDLGlDQW1EZEMsU0FuRGMsRUFtREhDLFNBbkRHLEVBbURRO0FBQzNDLFFBQU1QLElBQUksSUFBVjtBQUQyQyxRQUVyQ0MsS0FGcUMsR0FFcEJELENBRm9CLENBRXJDQyxLQUZxQztBQUFBLFFBRTlCTyxLQUY4QixHQUVwQlIsQ0FGb0IsQ0FFOUJRLEtBRjhCOztBQUczQyxXQUFPLENBQUMseUJBQWFQLEtBQWIsRUFBb0JLLFNBQXBCLENBQUQsSUFBbUMsQ0FBQyx5QkFBYUUsS0FBYixFQUFvQkQsU0FBcEIsQ0FBM0M7QUFDRDtBQXZEb0MsQ0FBbEIsQ0FBckI7O2tCQTJEZXZCLFkiLCJmaWxlIjoiYXBfcHJldl9idXR0b24uanN4Iiwic291cmNlUm9vdCI6ImxpYiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUHJldiBidXR0b24gY29tcG9uZW50LlxuICogQGNsYXNzIEFwUHJldkJ1dHRvblxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgUmVhY3QsIHtQcm9wVHlwZXMgYXMgdHlwZXN9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcydcbmltcG9ydCBBcEJ1dHRvbiBmcm9tICcuL2FwX2J1dHRvbidcbmltcG9ydCB7QXBJY29ufSBmcm9tICdhcGVtYW4tcmVhY3QtaWNvbidcbmltcG9ydCB7c2hhbGxvd0VxdWFsfSBmcm9tICdhc29iaidcblxuLyoqIEBsZW5kcyBBcFByZXZCdXR0b24gKi9cbmNvbnN0IEFwUHJldkJ1dHRvbiA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBTcGVjc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIHByb3BUeXBlczoge1xuICAgIGRpc2FibGVkOiB0eXBlcy5ib29sLFxuICAgIG9uVGFwOiB0eXBlcy5mdW5jLFxuICAgIHRleHQ6IHR5cGVzLnN0cmluZyxcbiAgICBzaXplOiB0eXBlcy5udW1iZXIsXG4gICAgaWNvbjogdHlwZXMuc3RyaW5nXG4gIH0sXG5cbiAgbWl4aW5zOiBbXSxcblxuICBnZXRJbml0aWFsU3RhdGUgKCkge1xuICAgIHJldHVybiB7fVxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wcyAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgIG9uVGFwOiBudWxsLFxuICAgICAgdGV4dDogbnVsbCxcbiAgICAgIGljb246ICdmYSBmYS1jYXJldC1sZWZ0J1xuICAgIH1cbiAgfSxcblxuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IHMgPSB0aGlzXG4gICAgbGV0IHsgcHJvcHMgfSA9IHNcbiAgICByZXR1cm4gKFxuICAgICAgPEFwQnV0dG9uIHsgLi4ucHJvcHMgfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17IGNsYXNzbmFtZXMoJ2FwLXByZXYtYnV0dG9uJywgcHJvcHMuY2xhc3NOYW1lKSB9XG4gICAgICAgICAgICAgICAgd2lkZT17IGZhbHNlIH1cbiAgICAgICAgICAgICAgICBzdHlsZT17T2JqZWN0LmFzc2lnbih7fSwgcHJvcHMuc3R5bGUpfVxuICAgICAgPlxuICAgICAgICA8QXBJY29uIGNsYXNzTmFtZT17IGNsYXNzbmFtZXMoJ2FwLXByZXYtYnV0dG9uLWljb24nLCBwcm9wcy5pY29uKSB9Lz5cbiAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdhcC1wcmV2LWJ1dHRvbi10ZXh0Jz5cbiAgICAgICAgICAgICAgICAgICAgeyBwcm9wcy50ZXh0IH1cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIHsgcHJvcHMuY2hpbGRyZW4gfVxuICAgICAgPC9BcEJ1dHRvbj5cbiAgICApXG4gIH0sXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gTGlmZWN5Y2xlXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlIChuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIGNvbnN0IHMgPSB0aGlzXG4gICAgbGV0IHsgcHJvcHMsIHN0YXRlIH0gPSBzXG4gICAgcmV0dXJuICFzaGFsbG93RXF1YWwocHJvcHMsIG5leHRQcm9wcykgfHwgIXNoYWxsb3dFcXVhbChzdGF0ZSwgbmV4dFN0YXRlKVxuICB9XG5cbn0pXG5cbmV4cG9ydCBkZWZhdWx0IEFwUHJldkJ1dHRvblxuIl19