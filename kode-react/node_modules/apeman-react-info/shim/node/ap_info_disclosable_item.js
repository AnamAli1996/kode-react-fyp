/**
 * Info item with disclosable feature
 * @class ApInfoDisclosableItem
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _apemanReactMixinPure = require('apeman-react-mixin-pure');

var _apemanReactMixinLayout = require('apeman-react-mixin-layout');

var _ap_info_item = require('./ap_info_item');

var _ap_info_item2 = _interopRequireDefault(_ap_info_item);

var _apemanReactButton = require('apeman-react-button');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var NEXT_ICON = _ap_info_item2.default.NEXT_ICON;
var PREV_ICON = _ap_info_item2.default.PREV_ICON;

/** @lends ApInfoDisclosableItem */

var ApInfoDisclosableItem = _react2.default.createClass({
  displayName: 'ApInfoDisclosableItem',

  // --------------------
  // Specs
  // --------------------

  propTypes: {
    label: _react.PropTypes.string,
    value: _react.PropTypes.string,
    unit: _react.PropTypes.string
  },

  mixins: [_apemanReactMixinPure.ApPureMixin, _apemanReactMixinLayout.ApLayoutMixin],

  getInitialState: function getInitialState() {
    return {
      open: false
    };
  },
  render: function render() {
    var s = this;
    var state = s.state;
    var props = s.props;
    var layouts = s.layouts;

    var className = (0, _classnames2.default)('ap-info-disclosable-item', props.className);
    return _react2.default.createElement(
      'div',
      { className: className },
      _react2.default.createElement(
        'div',
        { className: (0, _classnames2.default)('ap-info-disclosable-wrap', {
            'ap-info-disclosable-wrap-open': state.open
          }),
          style: state.open ? layouts.wrapOpen : layouts.wrapClosed
        },
        _react2.default.createElement(
          'div',
          { className: 'ap-info-disclosable-summary',
            ref: function ref(summary) {
              s.summary = summary;
            }
          },
          _react2.default.createElement(
            'div',
            { ref: function ref(summaryInner) {
                s.summaryInner = summaryInner;
              } },
            _react2.default.createElement(_ap_info_item2.default, { label: props.label,
              unit: props.unit,
              value: props.value,
              icon: NEXT_ICON,
              onTap: s.toggleDisclosable
            })
          )
        ),
        _react2.default.createElement(
          'div',
          { className: 'ap-info-disclosable-detail',
            ref: function ref(detail) {
              s.detail = detail;
            }
          },
          _react2.default.createElement(_apemanReactButton.ApIconButton, { className: 'ap-info-disclosable-back',
            icon: (0, _classnames2.default)('ap-info-item-icon ap-info-disclosable-back-icon', PREV_ICON),
            simple: true,
            onTap: s.toggleDisclosable
          }),
          _react2.default.createElement(
            'div',
            { className: 'ap-info-disclosable-detail-inner',
              ref: function ref(detailInner) {
                s.detailInner = detailInner;
              }
            },
            props.children
          )
        )
      )
    );
  },


  // --------------------
  // For ApLayoutMixin
  // --------------------

  getInitialLayouts: function getInitialLayouts() {
    return {
      wrapOpen: {
        height: 'auto'
      },
      wrapClosed: {
        height: 'auto'
      }
    };
  },
  calcLayouts: function calcLayouts() {
    var s = this;
    var summaryInner = s.summaryInner;
    var detailInner = s.detailInner;

    var summaryInnerRect = summaryInner && summaryInner.getBoundingClientRect();
    var detailInnerRect = detailInner && detailInner.getBoundingClientRect();
    return {
      wrapOpen: {
        height: detailInnerRect && detailInnerRect.height
      },
      wrapClosed: {
        height: summaryInnerRect && summaryInnerRect.height
      }
    };
  },


  // --------------------
  // Custom
  // --------------------
  toggleDisclosable: function toggleDisclosable() {
    var s = this;
    var state = s.state;

    s.setState({
      open: !state.open
    });
  }
});

exports.default = ApInfoDisclosableItem;
//# sourceMappingURL=data:application/json;base64,