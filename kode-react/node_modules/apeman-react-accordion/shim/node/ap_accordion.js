/**
 * apeman react package for accordion components.
 * @class ApAccordion
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApAccordion */
var ApAccordion = _react2.default.createClass({
  displayName: 'ApAccordion',


  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Is open or not */
    open: _react.PropTypes.bool
  },

  mixins: [],

  statics: {},

  getInitialState: function getInitialState() {
    var s = this;
    return {
      innerHeight: 1200
    };
  },
  getDefaultProps: function getDefaultProps() {
    return {};
  },
  render: function render() {
    var s = this;
    var state = s.state;
    var props = s.props;

    return _react2.default.createElement(
      'div',
      { className: (0, _classnames2.default)('ap-accordion', {
          'ap-accordion-closed': !props.open
        }), style: { maxHeight: state.innerHeight } },
      _react2.default.createElement(
        'div',
        { className: 'ap-accordion-inner',
          ref: function ref(inner) {
            return s.registerInner(inner);
          } },
        props.children
      )
    );
  },


  // --------------------
  // Lifecycle
  // --------------------

  componentWillMount: function componentWillMount() {
    var s = this;
  },
  componentDidMount: function componentDidMount() {
    var s = this;
    window.addEventListener('resize', s.handleResize);
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var s = this;
    s.setState({
      innerHeight: s.getInnerHeight()
    });
  },
  componentWillUnmount: function componentWillUnmount() {
    var s = this;
    window.removeEventListener('resize', s.handleResize);
  },


  // ------------------
  // Helpers
  // ------------------

  handleResize: function handleResize() {
    var s = this;
    s.setState({
      innerHeight: s.getInnerHeight()
    });
  },
  getInnerHeight: function getInnerHeight() {
    var s = this;
    var inner = s.inner;

    return inner.offsetHeight;
  },


  // ------------------
  // Custom
  // ---------
  // ---------
  inner: null,

  registerInner: function registerInner(inner) {
    var s = this;
    s.inner = inner;
  }
});

exports.default = ApAccordion;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwX2FjY29yZGlvbi5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBS0E7Ozs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUE7QUFDQSxJQUFNLGNBQWMsZ0JBQU0sV0FBTixDQUFrQjtBQUFBOzs7QUFFcEM7QUFDQTtBQUNBOztBQUVBLGFBQVc7QUFDVDtBQUNBLFVBQU0saUJBQU07QUFGSCxHQU55Qjs7QUFXcEMsVUFBUSxFQVg0Qjs7QUFhcEMsV0FBUyxFQWIyQjs7QUFlcEMsaUJBZm9DLDZCQWVqQjtBQUNqQixRQUFNLElBQUksSUFBVjtBQUNBLFdBQU87QUFDTCxtQkFBYTtBQURSLEtBQVA7QUFHRCxHQXBCbUM7QUFzQnBDLGlCQXRCb0MsNkJBc0JqQjtBQUNqQixXQUFPLEVBQVA7QUFDRCxHQXhCbUM7QUEwQnBDLFFBMUJvQyxvQkEwQjFCO0FBQ1IsUUFBTSxJQUFJLElBQVY7QUFEUSxRQUVGLEtBRkUsR0FFZSxDQUZmLENBRUYsS0FGRTtBQUFBLFFBRUssS0FGTCxHQUVlLENBRmYsQ0FFSyxLQUZMOztBQUdSLFdBQ0U7QUFBQTtBQUFBLFFBQUssV0FBWSwwQkFBVyxjQUFYLEVBQTJCO0FBQ2xDLGlDQUF1QixDQUFDLE1BQU07QUFESSxTQUEzQixDQUFqQixFQUVXLE9BQVEsRUFBQyxXQUFXLE1BQU0sV0FBbEIsRUFGbkI7QUFHRTtBQUFBO0FBQUEsVUFBSyxXQUFVLG9CQUFmO0FBQ0ssZUFBTSxhQUFDLEtBQUQ7QUFBQSxtQkFBVyxFQUFFLGFBQUYsQ0FBZ0IsS0FBaEIsQ0FBWDtBQUFBLFdBRFg7QUFFSSxjQUFNO0FBRlY7QUFIRixLQURGO0FBVUQsR0F2Q21DOzs7QUF5Q3BDO0FBQ0E7QUFDQTs7QUFFQSxvQkE3Q29DLGdDQTZDZDtBQUNwQixRQUFNLElBQUksSUFBVjtBQUNELEdBL0NtQztBQWlEcEMsbUJBakRvQywrQkFpRGY7QUFDbkIsUUFBTSxJQUFJLElBQVY7QUFDQSxXQUFPLGdCQUFQLENBQXdCLFFBQXhCLEVBQWtDLEVBQUUsWUFBcEM7QUFDRCxHQXBEbUM7QUFzRHBDLDJCQXREb0MscUNBc0RULFNBdERTLEVBc0RFO0FBQ3BDLFFBQU0sSUFBSSxJQUFWO0FBQ0EsTUFBRSxRQUFGLENBQVc7QUFDVCxtQkFBYSxFQUFFLGNBQUY7QUFESixLQUFYO0FBR0QsR0EzRG1DO0FBNkRwQyxzQkE3RG9DLGtDQTZEWjtBQUN0QixRQUFNLElBQUksSUFBVjtBQUNBLFdBQU8sbUJBQVAsQ0FBMkIsUUFBM0IsRUFBcUMsRUFBRSxZQUF2QztBQUNELEdBaEVtQzs7O0FBa0VwQztBQUNBO0FBQ0E7O0FBRUEsY0F0RW9DLDBCQXNFcEI7QUFDZCxRQUFNLElBQUksSUFBVjtBQUNBLE1BQUUsUUFBRixDQUFXO0FBQ1QsbUJBQWEsRUFBRSxjQUFGO0FBREosS0FBWDtBQUdELEdBM0VtQztBQTZFcEMsZ0JBN0VvQyw0QkE2RWxCO0FBQ2hCLFFBQU0sSUFBSSxJQUFWO0FBRGdCLFFBRVYsS0FGVSxHQUVBLENBRkEsQ0FFVixLQUZVOztBQUdoQixXQUFPLE1BQU0sWUFBYjtBQUNELEdBakZtQzs7O0FBbUZwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQU8sSUF2RjZCOztBQXlGcEMsZUF6Rm9DLHlCQXlGckIsS0F6RnFCLEVBeUZkO0FBQ3BCLFFBQU0sSUFBSSxJQUFWO0FBQ0EsTUFBRSxLQUFGLEdBQVUsS0FBVjtBQUNEO0FBNUZtQyxDQUFsQixDQUFwQjs7a0JBK0ZlLFciLCJmaWxlIjoiYXBfYWNjb3JkaW9uLmpzeCIsInNvdXJjZVJvb3QiOiJsaWIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIGFwZW1hbiByZWFjdCBwYWNrYWdlIGZvciBhY2NvcmRpb24gY29tcG9uZW50cy5cbiAqIEBjbGFzcyBBcEFjY29yZGlvblxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgUmVhY3QsIHtQcm9wVHlwZXMgYXMgdHlwZXN9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSdcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnXG5cbi8qKiBAbGVuZHMgQXBBY2NvcmRpb24gKi9cbmNvbnN0IEFwQWNjb3JkaW9uID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIFNwZWNzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgLyoqIElzIG9wZW4gb3Igbm90ICovXG4gICAgb3BlbjogdHlwZXMuYm9vbFxuICB9LFxuXG4gIG1peGluczogW10sXG5cbiAgc3RhdGljczoge30sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIHJldHVybiB7XG4gICAgICBpbm5lckhlaWdodDogMTIwMFxuICAgIH1cbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHMgKCkge1xuICAgIHJldHVybiB7fVxuICB9LFxuXG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBsZXQgeyBzdGF0ZSwgcHJvcHMgfSA9IHNcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9eyBjbGFzc25hbWVzKCdhcC1hY2NvcmRpb24nLCB7XG4gICAgICAgICAgICAgICAgJ2FwLWFjY29yZGlvbi1jbG9zZWQnOiAhcHJvcHMub3BlblxuICAgICAgICAgICAgfSkgfSBzdHlsZT17IHttYXhIZWlnaHQ6IHN0YXRlLmlubmVySGVpZ2h0fSB9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFwLWFjY29yZGlvbi1pbm5lclwiXG4gICAgICAgICAgICAgcmVmPXsgKGlubmVyKSA9PiBzLnJlZ2lzdGVySW5uZXIoaW5uZXIpIH0+XG4gICAgICAgICAgeyBwcm9wcy5jaGlsZHJlbiB9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9LFxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIExpZmVjeWNsZVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIGNvbXBvbmVudFdpbGxNb3VudCAoKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgfSxcblxuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcy5oYW5kbGVSZXNpemUpXG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAobmV4dFByb3BzKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBzLnNldFN0YXRlKHtcbiAgICAgIGlubmVySGVpZ2h0OiBzLmdldElubmVySGVpZ2h0KClcbiAgICB9KVxuICB9LFxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50ICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzLmhhbmRsZVJlc2l6ZSlcbiAgfSxcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gSGVscGVyc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cblxuICBoYW5kbGVSZXNpemUgKCkge1xuICAgIGNvbnN0IHMgPSB0aGlzXG4gICAgcy5zZXRTdGF0ZSh7XG4gICAgICBpbm5lckhlaWdodDogcy5nZXRJbm5lckhlaWdodCgpXG4gICAgfSlcbiAgfSxcblxuICBnZXRJbm5lckhlaWdodCAoKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBsZXQgeyBpbm5lciB9ID0gc1xuICAgIHJldHVybiBpbm5lci5vZmZzZXRIZWlnaHRcbiAgfSxcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gQ3VzdG9tXG4gIC8vIC0tLS0tLS0tLVxuICAvLyAtLS0tLS0tLS1cbiAgaW5uZXI6IG51bGwsXG5cbiAgcmVnaXN0ZXJJbm5lciAoaW5uZXIpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIHMuaW5uZXIgPSBpbm5lclxuICB9XG59KVxuXG5leHBvcnQgZGVmYXVsdCBBcEFjY29yZGlvblxuIl19