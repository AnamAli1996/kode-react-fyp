/**
 * iframe components with marker.
 * @class ApMarkableFrame
 */

'use strict'

import React, {PropTypes as types} from 'react'
import classnames from 'classnames'
import {shallowEqual} from 'asobj'
import {ApLayoutMixin} from 'apeman-react-mixin-layout'
import ApFrame from './ap_frame'

let markerKey = (selector, i) => [ selector, i ].join('-')

/** @lends ApMarkableFrame */
const ApMarkableFrame = React.createClass({

  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Selector for detectable elements */
    detectableSelector: types.string,
    /** Handler for detection */
    onDetect: types.func,
    /** Selector for highlight */
    highlightSelector: types.string,
    /** Handler for tap on markable */
    onMarkableTap: types.func,
    /** Handler for hover-in on markable */
    onMarkableHoverIn: types.func,
    /** Handler for hover-out on markable */
    onMarkableHoverOut: types.func
  },

  mixins: [
    ApLayoutMixin
  ],

  statics: {},

  getInitialState () {
    const s = this
    let { props } = s
    return {
      detected: null,
      highlighted: null
    }
  },

  getDefaultProps () {
    return {}
  },

  render () {
    const s = this
    let { state, props } = s
    let { detected } = state
    let className = classnames('ap-frame', 'ap-markable-frame', props.className)
    return (
      <ApFrame { ...props }
        className={ className }
        onLoad={ s.handleLoad }>
        {
          Object.keys(detected || {}).map((selector) =>
            s._renderMarkable(selector, detected[ selector ] || [])
          )
        }
      </ApFrame>
    )
  },

  // --------------------
  // Lifecycle
  // --------------------

  shouldComponentUpdate (nextProps, nextState) {
    const s = this
    let { props, state } = s
    return !shallowEqual(props, nextProps) || !shallowEqual(state, nextState)
  },

  componentWillReceiveProps (nextProps) {
    const s = this
    let { props } = s

    let highlightChanged = props.highlightSelector !== nextProps.highlightSelector
    if (highlightChanged) {
      let highlighted = s.queryMarkables(props.highlightSelector)
      s.setState({ highlighted })
      s.layout()
    }
  },

  // ------------------
  // Custom
  // ------------------

  handleLoad (e) {
    const s = this
    let { props } = s
    s.iframe = e.target

    if (props.onLoad) {
      props.onLoad(e)
    }

    let markables = s.queryMarkables(props.detectableSelector)
    s.setState({ detected: markables })
    if (props.onDetect) {
      props.onDetect({ markables })
    }
  },

  getContentBody () {
    const s = this
    let { iframe } = s
    if (!iframe) {
      return null
    }
    let contentDocument = iframe.contentDocument || (iframe.contentWindow && iframe.contentWindow.document)
    if (!contentDocument) {
      return null
    }
    return contentDocument.body
  },

  queryMarkables (selector) {
    const s = this
    let body = s.getContentBody()
    if (!body) {
      return null
    }
    if (!selector) {
      return null
    }
    return (selector || '').split(',')
      .map((selector) => selector.trim())
      .reduce((items, selector) => Object.assign(items, {
        [selector]: [ ...body.querySelectorAll(selector) ]
      }), {})
  },

  // ------------------
  // For ApLayoutMixin
  // ------------------
  getInitialLayouts () {
    return {
      markables: {}
    }
  },

  calcLayouts () {
    const s = this
    let { props, state } =  s
    let markables = {}
    for (let selector of Object.keys(state.detected || {})) {
      let elms = state.detected[ selector ]
      for (let i = 0; i < elms.length; i++) {
        let elm = elms[ i ]
        let key = markerKey(selector, i)
        let { top, left, width, height } = elm.getBoundingClientRect()
        markables[ key ] = { top, left, width, height }
      }
    }
    return {
      markables
    }
  },

  // ------------------
  // Private
  // ------------------

  _renderMarkable (selector, elms) {
    const s = this
    let { layouts } = s
    return (
      <div className='ap-markable-frame-markable'
           data-ap-markable-slector={ selector }
           key={ selector }>
        {
          elms.map((elm, i) => {
            let key = markerKey(selector, i)
            let style = layouts.markables[ key ]
            return (
              <div className='ap-markable-frame-markable-item'
                   data-ap-markable-key={ key }
                   key={ key }
                   style={ style }
              >
              </div>
            )
          })
        }
      </div>
    )
  }
})

export default ApMarkableFrame
