/**
 * Grid component.
 * @class ApGrid
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _apemanReactScroll = require('apeman-react-scroll');

var _apemanReactMixinLayout = require('apeman-react-mixin-layout');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApGrid */
var ApGrid = _react2.default.createClass({
  displayName: 'ApGrid',


  // --------------------
  // Specs
  // --------------------

  propTypes: {
    selectedIndex: _react.PropTypes.number,
    detail: _react.PropTypes.node,
    animationDuration: _react.PropTypes.number
  },

  mixins: [_apemanReactMixinLayout.ApLayoutMixin],

  statics: {},

  getInitialState: function getInitialState() {
    return {
      selectedIndex: -1,
      indexOfDetail: -1,
      indexOfClosingDetail: -1
    };
  },
  getDefaultProps: function getDefaultProps() {
    return {
      selectedIndex: -1,
      detail: null,
      animationDuration: 300
    };
  },
  render: function render() {
    var s = this;
    var state = s.state;
    var props = s.props;


    var children = _react2.default.Children.toArray(props.children);
    return _react2.default.createElement(
      'div',
      { className: (0, _classnames2.default)('ap-grid', props.className),
        style: Object.assign({}, props.style),
        ref: function ref(grid) {
          return s.handleGridMount(grid);
        }
      },
      children.map(function (item, i) {
        return [s._renderItemWrap(item, i), s._renderDetailWrap(item, i)];
      }, []).reduce(function (a, b) {
        return [].concat(a, b);
      }, [])
    );
  },


  // --------------------
  // Lifecycle
  // --------------------

  componentWillMount: function componentWillMount() {
    var s = this;

    s.itemWraps = [];
  },
  componentDidMount: function componentDidMount() {
    var s = this;
    var props = s.props;
    var selectedIndex = props.selectedIndex;

    s.setState({
      selectedIndex: selectedIndex,
      indexOfDetail: s.findIndexOfDetail(selectedIndex),
      indexOfClosingDetail: -1
    });
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var s = this;
    var props = s.props;
    var state = s.state;
    var selectedIndex = nextProps.selectedIndex;


    clearTimeout(s._closeTimer);

    var selectChanged = props.selectedIndex !== selectedIndex;
    if (selectChanged) {
      clearTimeout(s._closeTimer);
      s.setState({
        selectedIndex: selectedIndex,
        indexOfClosingDetail: state.indexOfDetail,
        indexOfDetail: s.findIndexOfDetail(selectedIndex)
      });
      s._closeTimer = setTimeout(function () {
        s.setState({ indexOfClosingDetail: -1 });
      }, props.animationDuration);
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    var s = this;
  },


  // ------------------
  // Custom
  // ------------------

  handleGridMount: function handleGridMount(grid, i) {
    var s = this;
    s.gird = grid;
  },
  handleItemWrapMount: function handleItemWrapMount(itemWrap, i) {
    var s = this;
    s.itemWraps[i] = itemWrap;
  },
  handleDetailWrapInnerMount: function handleDetailWrapInnerMount(detailWrapInner) {
    var s = this;
    s.detailWrapInner = detailWrapInner;
  },
  findIndexOfDetail: function findIndexOfDetail(start) {
    if (start === -1) {
      return -1;
    }
    var s = this;
    var itemWraps = s.itemWraps;

    for (var i = start; i < itemWraps.length - 1; i++) {
      var current = itemWraps[i];
      var next = itemWraps[i + 1];
      if (current && next) {
        var rowChanged = current.getBoundingClientRect().top + 10 < next.getBoundingClientRect().top;
        if (rowChanged) {
          return i;
        }
      }
    }
    return itemWraps.filter(function (itemWrap) {
      return !!itemWrap;
    }).length - 1;
  },


  // ------------------
  // For ApLayoutMixin
  // ------------------

  getInitialLayouts: function getInitialLayouts() {
    return {
      detailWrap: {
        maxHeight: 800,
        height: 'auto'
      }
    };
  },
  calcLayouts: function calcLayouts() {
    var s = this;
    var detailWrapInner = s.detailWrapInner;

    return {
      detailWrap: {
        maxHeight: window.innerHeight,
        height: detailWrapInner && detailWrapInner.getBoundingClientRect().height || null
      }
    };
  },


  // ------------------
  // Private
  // ------------------

  _renderItemWrap: function _renderItemWrap(item, i) {
    if (!item) {
      return null;
    }
    var s = this;
    var state = s.state;
    var props = s.props;

    var selected = props.selectedIndex === i;
    return _react2.default.createElement(
      'div',
      { className: (0, _classnames2.default)('ap-grid-item-wrap', {
          'ap-grid-item-wrap-selected': selected
        }),
        ref: function ref(wrap) {
          return s.handleItemWrapMount(wrap, i);
        },
        key: 'item-wrap-' + i
      },
      item,
      selected ? _react2.default.createElement('span', { className: 'ap-grid-item-arrow' }) : null
    );
  },
  _renderDetailWrap: function _renderDetailWrap(item, i) {
    var s = this;
    var state = s.state;
    var props = s.props;
    var layouts = s.layouts;

    var open = state.indexOfDetail === i;
    var closing = state.indexOfClosingDetail === i;
    return _react2.default.createElement(
      _apemanReactScroll.ApScroll,
      { className: (0, _classnames2.default)('ap-grid-detail-wrap', {
          'ap-grid-detail-wrap-active': open || closing,
          'ap-grid-detail-wrap-closed': !open
        }),
        disableMouseWheel: true,
        style: layouts.detailWrap,
        key: 'detail-wrap-' + i
      },
      _react2.default.createElement(
        'div',
        { className: 'ap-grid-detail-wrap-inner',
          ref: function ref(wrapInner) {
            return s.handleDetailWrapInnerMount(wrapInner);
          } },
        props.detail
      )
    );
  },


  _closeTimer: -1

});

exports.default = ApGrid;
//# sourceMappingURL=data:application/json;base64,bnVsbA==