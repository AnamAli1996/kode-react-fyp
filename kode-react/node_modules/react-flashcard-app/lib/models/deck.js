'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _utilsData = require('../utils/data');

function Deck(data) {
  var _this = this;

  this.id = data.id;
  this.name = data.name;
  this.cards = (0, _utilsData.getPairs)(data);
  this.length = this.cards.length;

  this.getNext = function (startIndex, removed) {
    var step = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];

    if (_this.cards.length > removed.length) {
      var index = startIndex;
      do {
        index = _this.nextIndex(index, step);
      } while (removed.indexOf(_this.cards[index].id) !== -1);
      return index;
    }
    return -1;
  };

  this.nextIndex = function (index, step) {
    var next = index + step;
    if (next >= _this.cards.length) {
      return 0;
    }
    if (next < 0) {
      return _this.cards.length - 1;
    }
    return next;
  };

  this.first = function (removed) {
    return _this.getNext(-1, removed);
  };

  this.idByIndex = function (index) {
    return _this.cards[index].id;
  };

  this.indexById = function (id) {
    for (var i = 0; i < _this.cards.length; i += 1) {
      if (_this.cards[i].id === id) {
        return i;
      }
    }
    return -1;
  };

  this.shuffle = function () {
    var shuffledArr = _this.cards.concat();
    for (var i = shuffledArr.length; i; i -= 1) {
      var j = Math.floor(Math.random() * i);
      var _ref = [shuffledArr[j], shuffledArr[i - 1]];
      shuffledArr[i - 1] = _ref[0];
      shuffledArr[j] = _ref[1];
    }
    _this.cards = shuffledArr;
    return true;
  };
}

exports['default'] = Deck;
module.exports = exports['default'];