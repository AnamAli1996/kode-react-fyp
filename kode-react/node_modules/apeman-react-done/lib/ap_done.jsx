/**
 * apeman react package for done components.
 * @class ApDone
 */

'use strict'

import React, {Component, PropTypes as types} from 'react'
import classnames from 'classnames'
import {ApButton} from 'apeman-react-button'
import {shallowEqual} from 'asobj'

/** @lends ApDone */
class ApDone extends Component {
  render () {
    const s = this
    let { props } = s

    return (
      <div className={ classnames('ap-done', props.className) }
           style={ Object.assign({}, props.style) }>

        <p className="ap-done-message">
          { props.message }
        </p>
        { props.children }
        <div className="ap-done-button-container">
          <ApDone.Button text={ props.subActionText }
                         action={ props.onSubAction }
          />
          <ApDone.Button text={ props.actionText }
                         action={ props.onAction }
                         primary
          />
        </div>
        <div>
          <ApDone.Link text={ props.linkText }
                       href={ props.linkHref }
          />
        </div>
      </div>
    )
  }

  // --------------------
  // Lifecycle
  // --------------------

  shouldComponentUpdate (nextProps, nextState) {
    const s = this
    let { props, state } = s
    return !shallowEqual(props, nextProps) || !shallowEqual(state, nextState)
  }
}

Object.assign(ApDone, {

  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Done message string */
    message: types.string,
    /** Action button text */
    actionText: types.string,
    /** Handler for action */
    onAction: types.func,
    /** Sub action button text */
    subActionText: types.string,
    /** Handler for sub action */
    onSubAction: types.func,
    /** Link url */
    link: types.string,
    /** Text of link */
    linkText: types.string
  },

  defaultProps: {
    message: null,
    actionText: null,
    onAction: null,
    subActionText: null,
    onSubAction: null,
    linkHref: null,
    linkText: null
  },

  Button ({ text, action, primary }) {
    if (!text) {
      return null
    }
    return (
      <ApButton className="ap-done-button"
                onTap={ action }
                primary={ primary }
      >{ text }</ApButton>
    )
  },

  Link ({ text, href }) {
    if (!text) {
      return null
    }
    return (
      <a href={ href } className="ap-done-link">{ text }</a>
    )
  }
})

export default ApDone
