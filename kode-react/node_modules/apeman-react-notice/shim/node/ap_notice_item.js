/**
 * Notice item component
 * @class ApNoticeItem
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _stringcase = require('stringcase');

var _stringcase2 = _interopRequireDefault(_stringcase);

var _apemanReactButton = require('apeman-react-button');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApNoticeItem */
var ApNoticeItem = _react2.default.createClass({
  displayName: 'ApNoticeItem',

  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Item text */
    text: _react.PropTypes.string,
    /** Action button text and handlers */
    actions: _react.PropTypes.object,
    /** Hide component */
    hidden: _react.PropTypes.bool,
    /** Information level */
    level: _react.PropTypes.oneOf(['DEFAULT', 'INFO', 'WARN', 'ERROR'])
  },

  mixins: [],

  statics: {},

  getInitialState: function getInitialState() {
    return {};
  },
  getDefaultProps: function getDefaultProps() {
    return {
      text: null,
      actions: null,
      hidden: false,
      level: 'DEFAULT'
    };
  },
  render: function render() {
    var s = this;
    var props = s.props;
    var text = props.text;
    var hidden = props.hidden;
    var actions = props.actions;
    var level = props.level;


    var buttons = Object.keys(actions || {}).map(function (title) {
      return s._renderButton(title, actions[title], {
        key: '' + title
      });
    });
    var className = (0, _classnames2.default)('ap-notice-item', 'ap-notice-item-' + _stringcase2.default.spinalcase(String(level).toLowerCase()), {
      'ap-notice-item-hidden': hidden
    }, props.className);
    return _react2.default.createElement(
      'div',
      { className: className,
        style: Object.assign({}, props.style) },
      _react2.default.createElement(
        'div',
        { className: 'ap-notice-item-inner' },
        _react2.default.createElement(
          'span',
          null,
          text
        ),
        _react2.default.createElement(
          'span',
          null,
          props.children
        ),
        _react2.default.createElement(
          'span',
          { className: 'ap-notice-item-action' },
          buttons
        )
      )
    );
  },


  // --------------------
  // Lifecycle
  // --------------------

  // ------------------
  // Custom
  // ------------------

  // ------------------
  // Private
  // ------------------

  _renderButton: function _renderButton(title, handler, props) {
    return _react2.default.createElement(
      _apemanReactButton.ApButton,
      _extends({}, props, {
        onTap: handler,
        className: 'ap-notice-item-button'
      }),
      title
    );
  }
});

exports.default = ApNoticeItem;
//# sourceMappingURL=data:application/json;base64,bnVsbA==