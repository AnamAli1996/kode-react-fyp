import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import CardDeck from './deck';
import ControlBar from '../components/control_bar';
import { initApp } from '../actions';
import { initialState } from '../utils/data';
import '../../css/flashcards.css';

class App extends Component {

  componentWillMount() {
    this.props.initApp(initialState(this.props.data));
  }

  componentDidUpdate() {
    this.props.initApp(initialState(this.props.data));
  }

  render() {
    return (
      <div className='flashcard-app'>
        <div className='row top-row'>
          <div className='col-md-12'>
            <ControlBar
              id='top-control-bar'
              options={{
                buttons: this.props.options.topControlBar,
                buttonTexts: this.props.options.buttonTexts,
              }}
            />
          </div>
        </div>
        <div className='row middle-row'>
          <div className='col-md-12'>
            <CardDeck />
          </div>
        </div>
        <div className='row bottom-row'>
          <div className='col-md-12'>
            <ControlBar
              id='bottom-control-bar'
              options={{
                buttons: this.props.options.bottomControlBar,
                buttonTexts: this.props.options.buttonTexts,
              }}
            />
          </div>
        </div>
      </div>
    );
  }
}

App.propTypes = {
  initApp: PropTypes.func.isRequired,
  data: PropTypes.shape({
    id: PropTypes.number,
    name: PropTypes.string,
    cards: PropTypes.arrayOf(PropTypes.string),
  }).isRequired,
  options: PropTypes.shape({
    topControlBar: PropTypes.arrayOf(PropTypes.string),
    bottomControlBar: PropTypes.arrayOf(PropTypes.string),
    buttonTexts: PropTypes.objectOf(PropTypes.string),
  }),
};

App.defaultProps = {
  options: {},
};

const mapStateToProps = () => ({});

const mapDispatchToProps = dispatch => (
  bindActionCreators({ initApp }, dispatch)
);

export default connect(mapStateToProps, mapDispatchToProps)(App);
