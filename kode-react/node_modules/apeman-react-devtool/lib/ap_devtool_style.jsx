/**
 * Style for ApDevtool.
 * @class ApDevtoolStyle
 */

'use strict'

import React, {PropTypes as types} from 'react'
import {ApStyle} from 'apeman-react-style'

/** @lends ApDevtoolStyle */
const ApDevtoolStyle = React.createClass({
  propTypes: {
    style: types.object,
    highlightColor: types.string
  },
  getDefaultProps () {
    return {
      style: {},
      highlightColor: ApStyle.DEFAULT_HIGHLIGHT_COLOR,
      baseColor: 'rgba(0,0,0,0.8)'
    }
  },
  statics: {
    styleData (config) {
      let { highlightColor, baseColor } = config
      let textColor = '#AAA'
      let duration = '400ms'
      let shadowColor = 'rgba(0,0,0,0.33)'
      let closeSize = 36
      let closeMargin = 16
      return {
        all: {
          '.ap-devtool': {
            display: 'block',
            boxShadow: `4px 4px 8px 4px ${shadowColor}`,
            color: `${textColor}`,
            position: 'absolute',
            fontSize: '12px',
            right: '84px',
            bottom: '64px',
            zIndex: 9999,
            cursor: 'pointer',
            boxSizing: 'border-box',
            background: 'transparent',
            border: 'none',
            transition: `width ${duration}, height ${duration}`,
            overflow: 'visible'
          },
          '.ap-devtool-title': {
            display: 'inline-block',
            borderRadius: '2px',
            position: 'absolute',
            color: '#888',
            textShadow: '2px 2px 4px rgba(0,0,0,0.5)',
            left: 0,
            fontSize: '9px',
            top: '-14px',
            right: 0,
            textAlign: 'center'
          },
          '.ap-devtool-display': {
            position: 'absolute',
            left: 0,
            top: 0,
            right: 0,
            bottom: 0,
            backgroundColor: `${baseColor}`,
            border: '1px solid rgba(0,0,0,0.8)',
            overflow: 'hidden'
          },
          '.ap-devtool:hover': {
            opacity: '0.98'
          },
          '.ap-devtool:active': {
            opacity: '1'
          },
          '.ap-devtool-closed': {
            height: `${closeSize}px !important`,
            width: `${closeSize}px !important`,
            borderRadius: `${closeSize / 2}px !important`
          },
          '.ap-devtool-closed .ap-devtool-display': {
            borderRadius: `${closeSize / 2}px !important`
          },
          '.ap-devtool-closed-handle': {
            position: 'absolute',
            left: -closeMargin,
            right: -closeMargin,
            top: -closeMargin,
            bottom: -closeMargin,
            display: 'none'
          },
          '.ap-devtool-closed .ap-devtool-closed-handle': {
            display: 'block'
          },
          '.ap-devtool-open': {},
          '.ap-devtool-inner': {
            minWidth: '192px',
            minHeight: '40px',
            padding: '4px 8px'
          },
          '.ap-devtool-caption': {
            color: '#CCC'
          },
          '.ap-devtool-env-label': {
            display: 'inline-block'
          },
          '.ap-devtool-env-label-undefined': {
            color: '#FAA'
          },
          '.ap-devtool-env-label-development': {
            color: '#AAF'
          },
          '.ap-devtool-env-label-test': {
            color: '#FFA'
          },
          '.ap-devtool-cell': {
            padding: '2px 4px',
            border: '1px solid #555'
          },
          'th.ap-devtool-cell': {
            textAlign: 'left',
            fontWeight: `normal`,
            width: `1px`
          },
          '.ap-devtool-version-label': {
            display: 'inline-block'
          },
          '.ap-devtool-at-label': {
            display: 'inline-block',
            margin: `0 1px`

          },
          'td.ap-devtool-cell': {
            textAlign: 'right',
            color: '#CCC'
          },
          '.ap-devtool-cell:first-child': {
            borderLeft: 'none'
          },
          '.ap-devtool-cell:last-child': {
            borderRight: 'none'
          },
          '.ap-devtool-numeric': {
            textAlign: 'right'
          },
          '.ap-devtool-info-table': {
            borderCollapse: 'collapse',
            color: '#888',
            fontSize: '10px',
            width: '100%',
            padding: '4px',
            margin: '4px 0',
            boxSizing: 'border-box'
          },
          '.ap-devtool-info-row:first-child .ap-devtool-cell': {
            borderTop: 'none'
          },
          '.ap-devtool-info-row:last-child .ap-devtool-cell': {
            borderBottom: 'none'
          },
          '.ap-devtool-actions': {
            display: 'flex',
            flexWrap: 'wrap',
            margin: '4px 0',
            padding: '4px 0'
          },
          '.ap-devtool-action-button': {
            color: 'white',
            borderColor: 'white',
            borderRadius: '50%',
            width: '36px',
            height: '36px',
            display: 'inline-flex',
            justifyContent: 'center',
            alignItems: 'center',
            fontSize: '7px',
            textAlign: 'center',
            margin: '2px',
            backgroundColor: 'transparent'
          },
          '.ap-devtool-action-button:hover': {
            backgroundColor: 'rgba(255,255,255,0.1)'
          },
          '.ap-devtool-action-button:active': {
            backgroundColor: 'rgba(255,255,255,0.3)'
          }
        }
      }
    }
  },
  render () {
    const s = this
    let { props } = s

    let { all, small, medium, large } = ApDevtoolStyle.styleData(props)

    return (
      <ApStyle data={ Object.assign(all, props.style) }
               smallMediaData={ small }
               mediumMediaData={ medium }
               largeMediaData={ large }
      >{ props.children }</ApStyle>
    )
  }
})

export default ApDevtoolStyle
