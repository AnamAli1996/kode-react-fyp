/**
 * Style for ApCheckbox.
 * @class ApCheckboxStyle
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _apemanReactStyle = require('apeman-react-style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** @lends ApCheckboxStyle */
var ApCheckboxStyle = function (_Component) {
  _inherits(ApCheckboxStyle, _Component);

  function ApCheckboxStyle() {
    _classCallCheck(this, ApCheckboxStyle);

    return _possibleConstructorReturn(this, (ApCheckboxStyle.__proto__ || Object.getPrototypeOf(ApCheckboxStyle)).apply(this, arguments));
  }

  _createClass(ApCheckboxStyle, [{
    key: 'render',
    value: function render() {
      var s = this;
      var props = s.props;

      var _ApCheckboxStyle$styl = ApCheckboxStyle.styleData(props);

      var all = _ApCheckboxStyle$styl.all;
      var small = _ApCheckboxStyle$styl.small;
      var medium = _ApCheckboxStyle$styl.medium;
      var large = _ApCheckboxStyle$styl.large;


      return _react2.default.createElement(
        _apemanReactStyle.ApStyle,
        { data: Object.assign(all, props.style),
          smallMediaData: small,
          mediumMediaData: medium,
          largeMediaData: large
        },
        props.children
      );
    }
  }]);

  return ApCheckboxStyle;
}(_react.Component);

Object.assign(ApCheckboxStyle, {
  propTypes: {
    style: _react.PropTypes.object,
    highlightColor: _react.PropTypes.string
  },

  defaultProps: {
    style: {},
    highlightColor: '#38E'
  },
  styleData: function styleData(config) {
    var highlightColor = config.highlightColor;


    return {
      all: {
        '.ap-checkbox': {
          display: 'inline-block',
          padding: '0 4px',
          cursor: 'pointer',
          position: 'relative'
        },
        '.ap-checkbox:hover': {
          opacity: 0.9
        },
        '.ap-checkbox:active': {
          opacity: 0.75
        },
        '.ap-checkbox-input': {
          display: 'inline-block',
          padding: '0 2px',
          position: 'relative',
          top: '-2px',
          opacity: 0,
          zIndex: 8
        },
        '.ap-checkbox-title': {},
        '.ap-checkbox-icon': {
          position: 'absolute',
          left: 2,
          top: 0,
          bottom: 0,
          display: 'inline-flex',
          justifyContent: 'center',
          alignItems: 'center'
        },
        '.ap-checkbox:hover .ap-checkbox-icon': {
          color: '' + highlightColor
        },
        '.ap-checkbox:active .ap-checkbox-icon': {
          opacity: 0.5
        },
        '.ap-checkbox-icon-checked': {
          color: '' + highlightColor
        }
      },
      small: {},
      medium: {},
      large: {}
    };
  }
});

exports.default = ApCheckboxStyle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwX2NoZWNrYm94X3N0eWxlLmpzeCJdLCJuYW1lcyI6WyJBcENoZWNrYm94U3R5bGUiLCJzIiwicHJvcHMiLCJzdHlsZURhdGEiLCJhbGwiLCJzbWFsbCIsIm1lZGl1bSIsImxhcmdlIiwiT2JqZWN0IiwiYXNzaWduIiwic3R5bGUiLCJjaGlsZHJlbiIsInByb3BUeXBlcyIsIm9iamVjdCIsImhpZ2hsaWdodENvbG9yIiwic3RyaW5nIiwiZGVmYXVsdFByb3BzIiwiY29uZmlnIiwiZGlzcGxheSIsInBhZGRpbmciLCJjdXJzb3IiLCJwb3NpdGlvbiIsIm9wYWNpdHkiLCJ0b3AiLCJ6SW5kZXgiLCJsZWZ0IiwiYm90dG9tIiwianVzdGlmeUNvbnRlbnQiLCJhbGlnbkl0ZW1zIiwiY29sb3IiXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUtBOzs7Ozs7OztBQUVBOzs7O0FBQ0E7Ozs7Ozs7Ozs7QUFFQTtJQUNNQSxlOzs7Ozs7Ozs7Ozs2QkFDTTtBQUNSLFVBQU1DLElBQUksSUFBVjtBQURRLFVBRUZDLEtBRkUsR0FFUUQsQ0FGUixDQUVGQyxLQUZFOztBQUFBLGtDQUk0QkYsZ0JBQWdCRyxTQUFoQixDQUEwQkQsS0FBMUIsQ0FKNUI7O0FBQUEsVUFJRkUsR0FKRSx5QkFJRkEsR0FKRTtBQUFBLFVBSUdDLEtBSkgseUJBSUdBLEtBSkg7QUFBQSxVQUlVQyxNQUpWLHlCQUlVQSxNQUpWO0FBQUEsVUFJa0JDLEtBSmxCLHlCQUlrQkEsS0FKbEI7OztBQU1SLGFBQ0U7QUFBQTtBQUFBLFVBQVMsTUFBT0MsT0FBT0MsTUFBUCxDQUFjTCxHQUFkLEVBQW1CRixNQUFNUSxLQUF6QixDQUFoQjtBQUNTLDBCQUFpQkwsS0FEMUI7QUFFUywyQkFBa0JDLE1BRjNCO0FBR1MsMEJBQWlCQztBQUgxQjtBQUlHTCxjQUFNUztBQUpULE9BREY7QUFPRDs7Ozs7O0FBR0hILE9BQU9DLE1BQVAsQ0FBY1QsZUFBZCxFQUErQjtBQUM3QlksYUFBVztBQUNURixXQUFPLGlCQUFNRyxNQURKO0FBRVRDLG9CQUFnQixpQkFBTUM7QUFGYixHQURrQjs7QUFNN0JDLGdCQUFjO0FBQ1pOLFdBQU8sRUFESztBQUVaSSxvQkFBZ0I7QUFGSixHQU5lO0FBVTdCWCxXQVY2QixxQkFVbEJjLE1BVmtCLEVBVVY7QUFBQSxRQUVmSCxjQUZlLEdBR2JHLE1BSGEsQ0FFZkgsY0FGZTs7O0FBS2pCLFdBQU87QUFDTFYsV0FBSztBQUNILHdCQUFnQjtBQUNkYyxtQkFBUyxjQURLO0FBRWRDLG1CQUFTLE9BRks7QUFHZEMsa0JBQVEsU0FITTtBQUlkQyxvQkFBVTtBQUpJLFNBRGI7QUFPSCw4QkFBc0I7QUFDcEJDLG1CQUFTO0FBRFcsU0FQbkI7QUFVSCwrQkFBdUI7QUFDckJBLG1CQUFTO0FBRFksU0FWcEI7QUFhSCw4QkFBc0I7QUFDcEJKLG1CQUFTLGNBRFc7QUFFcEJDLG1CQUFTLE9BRlc7QUFHcEJFLG9CQUFVLFVBSFU7QUFJcEJFLGVBQUssTUFKZTtBQUtwQkQsbUJBQVMsQ0FMVztBQU1wQkUsa0JBQVE7QUFOWSxTQWJuQjtBQXFCSCw4QkFBc0IsRUFyQm5CO0FBc0JILDZCQUFxQjtBQUNuQkgsb0JBQVUsVUFEUztBQUVuQkksZ0JBQU0sQ0FGYTtBQUduQkYsZUFBSyxDQUhjO0FBSW5CRyxrQkFBUSxDQUpXO0FBS25CUixtQkFBUyxhQUxVO0FBTW5CUywwQkFBZ0IsUUFORztBQU9uQkMsc0JBQVk7QUFQTyxTQXRCbEI7QUErQkgsZ0RBQXdDO0FBQ3RDQyxzQkFBVWY7QUFENEIsU0EvQnJDO0FBa0NILGlEQUF5QztBQUN2Q1EsbUJBQVM7QUFEOEIsU0FsQ3RDO0FBcUNILHFDQUE2QjtBQUMzQk8sc0JBQVVmO0FBRGlCO0FBckMxQixPQURBO0FBMENMVCxhQUFPLEVBMUNGO0FBMkNMQyxjQUFRLEVBM0NIO0FBNENMQyxhQUFPO0FBNUNGLEtBQVA7QUE4Q0Q7QUE3RDRCLENBQS9COztrQkFnRWVQLGUiLCJmaWxlIjoiYXBfY2hlY2tib3hfc3R5bGUuanN4Iiwic291cmNlUm9vdCI6ImxpYiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3R5bGUgZm9yIEFwQ2hlY2tib3guXG4gKiBAY2xhc3MgQXBDaGVja2JveFN0eWxlXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBSZWFjdCwge0NvbXBvbmVudCwgUHJvcFR5cGVzIGFzIHR5cGVzfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7QXBTdHlsZX0gZnJvbSAnYXBlbWFuLXJlYWN0LXN0eWxlJ1xuXG4vKiogQGxlbmRzIEFwQ2hlY2tib3hTdHlsZSAqL1xuY2xhc3MgQXBDaGVja2JveFN0eWxlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIGxldCB7IHByb3BzIH0gPSBzXG5cbiAgICBsZXQgeyBhbGwsIHNtYWxsLCBtZWRpdW0sIGxhcmdlIH0gPSBBcENoZWNrYm94U3R5bGUuc3R5bGVEYXRhKHByb3BzKVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBcFN0eWxlIGRhdGE9eyBPYmplY3QuYXNzaWduKGFsbCwgcHJvcHMuc3R5bGUpIH1cbiAgICAgICAgICAgICAgIHNtYWxsTWVkaWFEYXRhPXsgc21hbGwgfVxuICAgICAgICAgICAgICAgbWVkaXVtTWVkaWFEYXRhPXsgbWVkaXVtIH1cbiAgICAgICAgICAgICAgIGxhcmdlTWVkaWFEYXRhPXsgbGFyZ2UgfVxuICAgICAgPnsgcHJvcHMuY2hpbGRyZW4gfTwvQXBTdHlsZT5cbiAgICApXG4gIH1cbn1cblxuT2JqZWN0LmFzc2lnbihBcENoZWNrYm94U3R5bGUsIHtcbiAgcHJvcFR5cGVzOiB7XG4gICAgc3R5bGU6IHR5cGVzLm9iamVjdCxcbiAgICBoaWdobGlnaHRDb2xvcjogdHlwZXMuc3RyaW5nXG4gIH0sXG5cbiAgZGVmYXVsdFByb3BzOiB7XG4gICAgc3R5bGU6IHt9LFxuICAgIGhpZ2hsaWdodENvbG9yOiAnIzM4RSdcbiAgfSxcbiAgc3R5bGVEYXRhIChjb25maWcpIHtcbiAgICBsZXQge1xuICAgICAgaGlnaGxpZ2h0Q29sb3JcbiAgICB9ID0gY29uZmlnXG5cbiAgICByZXR1cm4ge1xuICAgICAgYWxsOiB7XG4gICAgICAgICcuYXAtY2hlY2tib3gnOiB7XG4gICAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICAgICAgcGFkZGluZzogJzAgNHB4JyxcbiAgICAgICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJ1xuICAgICAgICB9LFxuICAgICAgICAnLmFwLWNoZWNrYm94OmhvdmVyJzoge1xuICAgICAgICAgIG9wYWNpdHk6IDAuOVxuICAgICAgICB9LFxuICAgICAgICAnLmFwLWNoZWNrYm94OmFjdGl2ZSc6IHtcbiAgICAgICAgICBvcGFjaXR5OiAwLjc1XG4gICAgICAgIH0sXG4gICAgICAgICcuYXAtY2hlY2tib3gtaW5wdXQnOiB7XG4gICAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICAgICAgcGFkZGluZzogJzAgMnB4JyxcbiAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICB0b3A6ICctMnB4JyxcbiAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgIHpJbmRleDogOFxuICAgICAgICB9LFxuICAgICAgICAnLmFwLWNoZWNrYm94LXRpdGxlJzoge30sXG4gICAgICAgICcuYXAtY2hlY2tib3gtaWNvbic6IHtcbiAgICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgICBsZWZ0OiAyLFxuICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICBib3R0b206IDAsXG4gICAgICAgICAgZGlzcGxheTogJ2lubGluZS1mbGV4JyxcbiAgICAgICAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgICAgICAgfSxcbiAgICAgICAgJy5hcC1jaGVja2JveDpob3ZlciAuYXAtY2hlY2tib3gtaWNvbic6IHtcbiAgICAgICAgICBjb2xvcjogYCR7aGlnaGxpZ2h0Q29sb3J9YFxuICAgICAgICB9LFxuICAgICAgICAnLmFwLWNoZWNrYm94OmFjdGl2ZSAuYXAtY2hlY2tib3gtaWNvbic6IHtcbiAgICAgICAgICBvcGFjaXR5OiAwLjVcbiAgICAgICAgfSxcbiAgICAgICAgJy5hcC1jaGVja2JveC1pY29uLWNoZWNrZWQnOiB7XG4gICAgICAgICAgY29sb3I6IGAke2hpZ2hsaWdodENvbG9yfWBcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNtYWxsOiB7fSxcbiAgICAgIG1lZGl1bToge30sXG4gICAgICBsYXJnZToge31cbiAgICB9XG4gIH1cbn0pXG5cbmV4cG9ydCBkZWZhdWx0IEFwQ2hlY2tib3hTdHlsZVxuIl19