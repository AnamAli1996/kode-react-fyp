/**
 * View component.
 * @class ApView
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _stringcase = require('stringcase');

var _asobj = require('asobj');

var _apemanReactSpinner = require('apeman-react-spinner');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var noop = function noop() {
  return undefined;
};

/** @lends ApView */

var ApView = function (_Component) {
  (0, _inherits3.default)(ApView, _Component);

  function ApView() {
    (0, _classCallCheck3.default)(this, ApView);
    return (0, _possibleConstructorReturn3.default)(this, (ApView.__proto__ || (0, _getPrototypeOf2.default)(ApView)).apply(this, arguments));
  }

  (0, _createClass3.default)(ApView, [{
    key: 'render',
    value: function render() {
      var s = this;
      var props = s.props;
      var way = props.way;

      var className = (0, _classnames2.default)('ap-view', 'ap-view-way-' + (0, _stringcase.spinalcase)(way), {
        'ap-view-wide': !!props.wide,
        'ap-view-headerless': !!props.headerless
      }, props.className);
      var divProps = (0, _asobj.clone)(props, {
        without: ['wide', 'headerless', 'way', 'spinner', 'onMount', 'onUnmount']
      });
      return _react2.default.createElement(
        'div',
        (0, _extends3.default)({}, divProps, {
          className: className,
          style: (0, _assign2.default)({}, props.style)
        }),
        _react2.default.createElement(
          'div',
          { className: 'ap-view-inner' },
          props.children,
          props.spinner
        )
      );
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var s = this;
      var props = s.props;
      var _props$onMount = props.onMount;
      var onMount = _props$onMount === undefined ? noop : _props$onMount;


      onMount();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var s = this;
      var props = s.props;
      var _props$onUnmount = props.onUnmount;
      var onUnmount = _props$onUnmount === undefined ? noop : _props$onUnmount;


      onUnmount();
    }
  }]);
  return ApView;
}(_react.Component);

(0, _assign2.default)(ApView, {
  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Wide style */
    wide: _react.PropTypes.bool,
    /** Hide header */
    headerless: _react.PropTypes.bool,
    way: _react.PropTypes.oneOf(['NONE', 'PUSH_LEFT', 'PULL_UP', 'FADE_IN']),
    /** Handle for on mount */
    onMount: _react.PropTypes.func,

    /** Handle for on unmount */
    onUnmount: _react.PropTypes.func
  },

  defaultProps: {
    wide: false,
    way: 'PUSH_LEFT'
  }

});

exports.default = (0, _apemanReactSpinner.withSpin)(ApView);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwX3ZpZXcuanN4Il0sIm5hbWVzIjpbIm5vb3AiLCJ1bmRlZmluZWQiLCJBcFZpZXciLCJzIiwicHJvcHMiLCJ3YXkiLCJjbGFzc05hbWUiLCJ3aWRlIiwiaGVhZGVybGVzcyIsImRpdlByb3BzIiwid2l0aG91dCIsInN0eWxlIiwiY2hpbGRyZW4iLCJzcGlubmVyIiwib25Nb3VudCIsIm9uVW5tb3VudCIsInByb3BUeXBlcyIsImJvb2wiLCJvbmVPZiIsImZ1bmMiLCJkZWZhdWx0UHJvcHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUtBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUEsSUFBTUEsT0FBTyxTQUFQQSxJQUFPO0FBQUEsU0FBTUMsU0FBTjtBQUFBLENBQWI7O0FBRUE7O0lBQ01DLE07Ozs7Ozs7Ozs7NkJBQ007QUFDUixVQUFNQyxJQUFJLElBQVY7QUFEUSxVQUVGQyxLQUZFLEdBRVFELENBRlIsQ0FFRkMsS0FGRTtBQUFBLFVBR0ZDLEdBSEUsR0FHTUQsS0FITixDQUdGQyxHQUhFOztBQUlSLFVBQUlDLFlBQVksMEJBQVcsU0FBWCxtQkFBcUMsNEJBQVdELEdBQVgsQ0FBckMsRUFBd0Q7QUFDdEUsd0JBQWdCLENBQUMsQ0FBQ0QsTUFBTUcsSUFEOEM7QUFFdEUsOEJBQXNCLENBQUMsQ0FBQ0gsTUFBTUk7QUFGd0MsT0FBeEQsRUFHYkosTUFBTUUsU0FITyxDQUFoQjtBQUlBLFVBQUlHLFdBQVcsa0JBQU1MLEtBQU4sRUFBYTtBQUMxQk0saUJBQVMsQ0FBRSxNQUFGLEVBQVUsWUFBVixFQUF3QixLQUF4QixFQUErQixTQUEvQixFQUEwQyxTQUExQyxFQUFxRCxXQUFyRDtBQURpQixPQUFiLENBQWY7QUFHQSxhQUNFO0FBQUE7QUFBQSxtQ0FBVUQsUUFBVjtBQUNLLHFCQUFZSCxTQURqQjtBQUVLLGlCQUFRLHNCQUFjLEVBQWQsRUFBa0JGLE1BQU1PLEtBQXhCO0FBRmI7QUFJRTtBQUFBO0FBQUEsWUFBSyxXQUFVLGVBQWY7QUFDSVAsZ0JBQU1RLFFBRFY7QUFFSVIsZ0JBQU1TO0FBRlY7QUFKRixPQURGO0FBV0Q7Ozt3Q0FFb0I7QUFDbkIsVUFBTVYsSUFBSSxJQUFWO0FBRG1CLFVBRWJDLEtBRmEsR0FFSEQsQ0FGRyxDQUViQyxLQUZhO0FBQUEsMkJBR01BLEtBSE4sQ0FHYlUsT0FIYTtBQUFBLFVBR2JBLE9BSGEsa0NBR0hkLElBSEc7OztBQUtuQmM7QUFDRDs7OzJDQUV1QjtBQUN0QixVQUFNWCxJQUFJLElBQVY7QUFEc0IsVUFFaEJDLEtBRmdCLEdBRU5ELENBRk0sQ0FFaEJDLEtBRmdCO0FBQUEsNkJBR0tBLEtBSEwsQ0FHaEJXLFNBSGdCO0FBQUEsVUFHaEJBLFNBSGdCLG9DQUdKZixJQUhJOzs7QUFLdEJlO0FBQ0Q7Ozs7O0FBR0gsc0JBQWNiLE1BQWQsRUFBc0I7QUFDcEI7QUFDQTtBQUNBOztBQUVBYyxhQUFXO0FBQ1Q7QUFDQVQsVUFBTSxpQkFBTVUsSUFGSDtBQUdUO0FBQ0FULGdCQUFZLGlCQUFNUyxJQUpUO0FBS1RaLFNBQUssaUJBQU1hLEtBQU4sQ0FBWSxDQUNmLE1BRGUsRUFFZixXQUZlLEVBR2YsU0FIZSxFQUlmLFNBSmUsQ0FBWixDQUxJO0FBV1Q7QUFDQUosYUFBUyxpQkFBTUssSUFaTjs7QUFjVDtBQUNBSixlQUFXLGlCQUFNSTtBQWZSLEdBTFM7O0FBdUJwQkMsZ0JBQWM7QUFDWmIsVUFBTSxLQURNO0FBRVpGLFNBQUs7QUFGTzs7QUF2Qk0sQ0FBdEI7O2tCQThCZSxrQ0FBU0gsTUFBVCxDIiwiZmlsZSI6ImFwX3ZpZXcuanN4Iiwic291cmNlUm9vdCI6ImxpYiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVmlldyBjb21wb25lbnQuXG4gKiBAY2xhc3MgQXBWaWV3XG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQsIFByb3BUeXBlcyBhcyB0eXBlcyB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcydcbmltcG9ydCB7IHNwaW5hbGNhc2UgfSBmcm9tICdzdHJpbmdjYXNlJ1xuaW1wb3J0IHsgY2xvbmUgfSBmcm9tICdhc29iaidcbmltcG9ydCB7IHdpdGhTcGluIH0gZnJvbSAnYXBlbWFuLXJlYWN0LXNwaW5uZXInXG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB1bmRlZmluZWRcblxuLyoqIEBsZW5kcyBBcFZpZXcgKi9cbmNsYXNzIEFwVmlldyBleHRlbmRzIENvbXBvbmVudCB7XG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBsZXQgeyBwcm9wcyB9ID0gc1xuICAgIGxldCB7IHdheSB9ID0gcHJvcHNcbiAgICBsZXQgY2xhc3NOYW1lID0gY2xhc3NuYW1lcygnYXAtdmlldycsIGBhcC12aWV3LXdheS0ke3NwaW5hbGNhc2Uod2F5KX1gLCB7XG4gICAgICAnYXAtdmlldy13aWRlJzogISFwcm9wcy53aWRlLFxuICAgICAgJ2FwLXZpZXctaGVhZGVybGVzcyc6ICEhcHJvcHMuaGVhZGVybGVzc1xuICAgIH0sIHByb3BzLmNsYXNzTmFtZSlcbiAgICBsZXQgZGl2UHJvcHMgPSBjbG9uZShwcm9wcywge1xuICAgICAgd2l0aG91dDogWyAnd2lkZScsICdoZWFkZXJsZXNzJywgJ3dheScsICdzcGlubmVyJywgJ29uTW91bnQnLCAnb25Vbm1vdW50JyBdXG4gICAgfSlcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiB7IC4uLmRpdlByb3BzIH1cbiAgICAgICAgICAgY2xhc3NOYW1lPXsgY2xhc3NOYW1lIH1cbiAgICAgICAgICAgc3R5bGU9eyBPYmplY3QuYXNzaWduKHt9LCBwcm9wcy5zdHlsZSkgfVxuICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nYXAtdmlldy1pbm5lcic+XG4gICAgICAgICAgeyBwcm9wcy5jaGlsZHJlbiB9XG4gICAgICAgICAgeyBwcm9wcy5zcGlubmVyIH1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCAoKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBsZXQgeyBwcm9wcyB9ID0gc1xuICAgIGxldCB7IG9uTW91bnQgPSBub29wIH0gPSBwcm9wc1xuXG4gICAgb25Nb3VudCgpXG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCAoKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBsZXQgeyBwcm9wcyB9ID0gc1xuICAgIGxldCB7IG9uVW5tb3VudCA9IG5vb3AgfSA9IHByb3BzXG5cbiAgICBvblVubW91bnQoKVxuICB9XG59XG5cbk9iamVjdC5hc3NpZ24oQXBWaWV3LCB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIFNwZWNzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgLyoqIFdpZGUgc3R5bGUgKi9cbiAgICB3aWRlOiB0eXBlcy5ib29sLFxuICAgIC8qKiBIaWRlIGhlYWRlciAqL1xuICAgIGhlYWRlcmxlc3M6IHR5cGVzLmJvb2wsXG4gICAgd2F5OiB0eXBlcy5vbmVPZihbXG4gICAgICAnTk9ORScsXG4gICAgICAnUFVTSF9MRUZUJyxcbiAgICAgICdQVUxMX1VQJyxcbiAgICAgICdGQURFX0lOJ1xuICAgIF0pLFxuICAgIC8qKiBIYW5kbGUgZm9yIG9uIG1vdW50ICovXG4gICAgb25Nb3VudDogdHlwZXMuZnVuYyxcblxuICAgIC8qKiBIYW5kbGUgZm9yIG9uIHVubW91bnQgKi9cbiAgICBvblVubW91bnQ6IHR5cGVzLmZ1bmNcbiAgfSxcblxuICBkZWZhdWx0UHJvcHM6IHtcbiAgICB3aWRlOiBmYWxzZSxcbiAgICB3YXk6ICdQVVNIX0xFRlQnXG4gIH1cblxufSlcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFNwaW4oQXBWaWV3KVxuXG4iXX0=