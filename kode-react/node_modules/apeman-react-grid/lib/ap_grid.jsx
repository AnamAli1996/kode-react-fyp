/**
 * Grid component.
 * @class ApGrid
 */

'use strict'

import React, {PropTypes as types} from 'react'
import ReactDOM from 'react-dom'
import classnames from 'classnames'
import {ApScroll} from 'apeman-react-scroll'
import {ApLayoutMixin} from 'apeman-react-mixin-layout'

/** @lends ApGrid */
const ApGrid = React.createClass({

  // --------------------
  // Specs
  // --------------------

  propTypes: {
    selectedIndex: types.number,
    detail: types.node,
    animationDuration: types.number
  },

  mixins: [
    ApLayoutMixin
  ],

  statics: {},

  getInitialState () {
    return {
      selectedIndex: -1,
      indexOfDetail: -1,
      indexOfClosingDetail: -1
    }
  },

  getDefaultProps () {
    return {
      selectedIndex: -1,
      detail: null,
      animationDuration: 300
    }
  },

  render () {
    const s = this
    let { state, props } = s

    let children = React.Children.toArray(props.children)
    return (
      <div className={ classnames('ap-grid', props.className) }
           style={ Object.assign({}, props.style) }
           ref={ (grid) => s.handleGridMount(grid) }
      >
        {
          children.map((item, i) => ([
            s._renderItemWrap(item, i),
            s._renderDetailWrap(item, i)
          ]), []).reduce((a, b) => [].concat(a, b), [])
        }
      </div>
    )
  },

  // --------------------
  // Lifecycle
  // --------------------

  componentWillMount () {
    const s = this

    s.itemWraps = []
  },

  componentDidMount () {
    const s = this
    let { props } = s

    let { selectedIndex } = props
    s.setState({
      selectedIndex: selectedIndex,
      indexOfDetail: s.findIndexOfDetail(selectedIndex),
      indexOfClosingDetail: -1
    })
  },

  componentWillReceiveProps (nextProps) {
    const s = this
    let { props, state } = s
    let { selectedIndex } = nextProps

    clearTimeout(s._closeTimer)

    let selectChanged = props.selectedIndex !== selectedIndex
    if (selectChanged) {
      clearTimeout(s._closeTimer)
      s.setState({
        selectedIndex: selectedIndex,
        indexOfClosingDetail: state.indexOfDetail,
        indexOfDetail: s.findIndexOfDetail(selectedIndex)
      })
      s._closeTimer = setTimeout(() => {
        s.setState({ indexOfClosingDetail: -1 })
      }, props.animationDuration)
    }
  },

  componentWillUnmount () {
    const s = this
  },

  // ------------------
  // Custom
  // ------------------

  handleGridMount (grid, i) {
    const s = this
    s.gird = grid
  },

  handleItemWrapMount (itemWrap, i) {
    const s = this
    s.itemWraps[ i ] = itemWrap
  },

  handleDetailWrapInnerMount (detailWrapInner) {
    const s = this
    s.detailWrapInner = detailWrapInner
  },

  findIndexOfDetail (start) {
    if (start === -1) {
      return -1
    }
    const s = this
    let { itemWraps } = s
    for (let i = start; i < itemWraps.length - 1; i++) {
      let current = itemWraps[ i ]
      let next = itemWraps[ i + 1 ]
      if (current && next) {
        let rowChanged = current.getBoundingClientRect().top + 10 < next.getBoundingClientRect().top
        if (rowChanged) {
          return i
        }
      }
    }
    return itemWraps.filter((itemWrap) => !!itemWrap).length - 1
  },

  // ------------------
  // For ApLayoutMixin
  // ------------------

  getInitialLayouts () {
    return {
      detailWrap: {
        maxHeight: 800,
        height: 'auto'
      }
    }
  },

  calcLayouts () {
    const s = this
    let { detailWrapInner } = s
    return {
      detailWrap: {
        maxHeight: window.innerHeight,
        height: detailWrapInner && detailWrapInner.getBoundingClientRect().height || null
      }
    }
  },

  // ------------------
  // Private
  // ------------------

  _renderItemWrap (item, i) {
    if (!item) {
      return null
    }
    const s = this
    let { state, props } = s
    let selected = props.selectedIndex === i
    return (
      <div className={ classnames('ap-grid-item-wrap', {
                            'ap-grid-item-wrap-selected': selected
                        }) }
           ref={ (wrap) => s.handleItemWrapMount(wrap, i) }
           key={ `item-wrap-${i}` }
      >
        { item }
        { selected ? <span className="ap-grid-item-arrow"/> : null }
      </div>
    )
  },
  _renderDetailWrap (item, i) {
    const s = this
    let { state, props, layouts } = s
    let open = state.indexOfDetail === i
    let closing = state.indexOfClosingDetail === i
    return (
      <ApScroll className={ classnames(
                'ap-grid-detail-wrap', {
                    'ap-grid-detail-wrap-active': open || closing,
                    'ap-grid-detail-wrap-closed': !open
                }
            ) }
                disableMouseWheel={ true }
                style={ layouts.detailWrap }
                key={ `detail-wrap-${i}` }
      >
        <div className="ap-grid-detail-wrap-inner"
             ref={ (wrapInner) => s.handleDetailWrapInnerMount(wrapInner) }>

          { props.detail }
        </div>
      </ApScroll>
    )
  },

  _closeTimer: -1

})

export default ApGrid
