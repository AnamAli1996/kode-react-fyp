/**
 * apeman react package for select component.
 * @class ApSelect
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApSelect = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ap_select_item = require('./ap_select_item');

var _ap_select_item2 = _interopRequireDefault(_ap_select_item);

var _ap_select_label = require('./ap_select_label');

var _ap_select_label2 = _interopRequireDefault(_ap_select_label);

var _numcal = require('numcal');

var _numcal2 = _interopRequireDefault(_numcal);

var _bwindow = require('bwindow');

var _apemanReactMixinLayout = require('apeman-react-mixin-layout');

var _apemanReactTouchable = require('apeman-react-touchable');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApSelect */
var ApSelect = _react2.default.createClass({
  displayName: 'ApSelect',


  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Options of select */
    options: _react.PropTypes.object.isRequired,
    /** Option elements to render */
    optionElements: _react.PropTypes.object,
    /** Name of select element */
    name: _react.PropTypes.string,
    /** Value of select element */
    value: _react.PropTypes.string,
    /** Allow multiple select */
    multiple: _react.PropTypes.bool,
    /** Handler for change event */
    onChange: _react.PropTypes.func,
    /** Icon to toggle select */
    openIcon: _react.PropTypes.string,
    /** Placeholder of select element */
    placeholder: _react.PropTypes.string
  },

  mixins: [_apemanReactMixinLayout.ApLayoutMixin],

  statics: {},

  getInitialState: function getInitialState() {
    var s = this;
    return {
      focused: false,
      focusIndex: s.getIndexForValue(s.props.value)
    };
  },
  getDefaultProps: function getDefaultProps() {
    return {
      optionElements: null,
      value: '',
      name: null,
      multiple: false,
      onChange: null,
      openIcon: 'ion ion-arrow-down-b',
      placeholder: null
    };
  },
  render: function render() {
    var s = this;
    var state = s.state,
        props = s.props,
        layouts = s.layouts;
    var options = props.options,
        optionElements = props.optionElements;

    var values = s.getOptionValues();

    var hasOption = options && (0, _keys2.default)(options).length > 0;
    if (!hasOption) {
      return null;
    }

    var _option = function _option(value) {
      return optionElements && optionElements[value] || options[value] || null;
    };

    return _react2.default.createElement(
      'span',
      { className: (0, _classnames2.default)('ap-select-wrap') },
      _react2.default.createElement(
        'span',
        { className: (0, _classnames2.default)('ap-select-options-list', {
            'ap-select-options-list-visible': state.focused
          }), ref: function ref(list) {
            return s.registerNode(list, 'list');
          }
        },
        _react2.default.createElement(
          'ul',
          { className: 'ap-select-options-list-inner',
            style: layouts.listInner },
          values.map(function (value, i) {
            return _react2.default.createElement(
              'li',
              { key: value,
                value: value,
                className: (0, _classnames2.default)('ap-select-options-list-item') },
              _react2.default.createElement(
                _ap_select_item2.default,
                { onTap: s.handleItemTap,
                  data: value,
                  focused: state.focusIndex === i,
                  label: options[value]
                },
                _option(value) || null
              )
            );
          })
        )
      ),
      _react2.default.createElement(
        'select',
        { id: props.id,
          name: props.name,
          placeholder: props.placeholder,
          onChange: props.onChange,
          className: (0, _classnames2.default)('ap-select', props.className),
          onFocus: function onFocus() {
            return s.setFocus(true);
          },
          style: (0, _assign2.default)({}, props.style),
          tabIndex: '-1'
        },
        values.map(function (value) {
          return _react2.default.createElement(
            'option',
            { key: value, value: value },
            options[value]
          );
        }),
        props.children
      ),
      _react2.default.createElement('input', { type: 'text',
        ref: function ref(text) {
          return s.registerNode(text, 'text');
        },
        className: 'ap-select-dummy-text',
        onKeyUp: s.handleKeyUp,
        onKeyDown: s.handleKeyDown,
        onFocus: function onFocus() {
          return s.setFocus(true);
        },
        onBlur: function onBlur() {
          return s.setFocus(false);
        }
      }),
      _react2.default.createElement(_ap_select_label2.default, { value: _option(props.value),
        placeholder: props.placeholder,
        icon: props.openIcon,
        onTap: s.handleLabelTap
      })
    );
  },


  // --------------------
  // Lifecycle
  // --------------------

  componentWillMount: function componentWillMount() {
    var s = this;
    s.nodes = {};
  },
  componentDidMount: function componentDidMount() {
    var s = this;
    var body = (0, _bwindow.get)('document.body');
    body.addEventListener('click', s.handleClickForOutside);
  },
  componentWillUnmount: function componentWillUnmount() {
    var s = this;
    var body = (0, _bwindow.get)('document.body');
    body.removeEventListener('click', s.handleClickForOutside);
  },

  // ------------------
  // Custom
  // ------------------

  moveFocusIndex: function moveFocusIndex(i) {
    var s = this;
    var state = s.state;

    var values = s.getOptionValues();
    var index = state.focusIndex + i;
    var over = index === -1 || index === values.length;
    if (over) {
      return;
    }
    s.setState({
      focusIndex: index
    });
  },
  enterFocused: function enterFocused(e) {
    var s = this;
    var state = s.state,
        props = s.props;

    if (!state.focused) {
      return;
    }
    var values = s.getOptionValues();
    var value = values[state.focusIndex];
    s.setState({
      focused: false,
      focusIndex: s.getIndexForValue(value)
    });
    e.target.value = value;
    if (props.onChange) {
      props.onChange(e);
    }
  },
  getOptionValues: function getOptionValues() {
    var s = this;
    var props = s.props;

    return (0, _keys2.default)(props.options || {});
  },
  getIndexForValue: function getIndexForValue(value) {
    var s = this;
    return s.getOptionValues().indexOf(value);
  },
  registerNode: function registerNode(elm, name) {
    var s = this;
    s.nodes[name] = _reactDom2.default.findDOMNode(elm);
  },


  // --------------------
  // Handle
  // --------------------

  handleLabelTap: function handleLabelTap(e) {
    var s = this;
    var state = s.state;
    var text = s.nodes.text;


    var focused = !state.focused;
    if (focused) {
      s.layout();
      text.focus();
    } else {
      text.blur();
    }
    s.setState({
      focused: focused,
      focusIndex: s.getIndexForValue(s.props.value)
    });
  },
  setFocus: function setFocus(focused) {
    var s = this;
    if (focused === s.state.focused) {
      return;
    }
    if (s._focusAt) {
      var fromLastFocusAt = new Date() - s._focusAt;
      if (fromLastFocusAt < 500) {
        return;
      }
    }
    s._focusAt = new Date();
    s.setState({
      focused: focused
    });
  },
  handleKeyDown: function handleKeyDown(e) {
    var s = this;
    var props = s.props;

    if (!s.state.focused) {
      s.setState({ focused: true });
      return;
    }
    switch (e.keyCode) {
      case 38:
        // UP
        s.moveFocusIndex(-1);
        break;
      case 40:
        // DOWN
        s.moveFocusIndex(+1);
        break;
      case 13:
        // Enter
        s.enterFocused(e);
        break;
      case 9:
        // Tab
        break;
      default:
        e.preventDefault();
        e.stopPropagation();
        break;
    }
    if (props.onKeyDown) {
      props.onKeyDown(e);
    }
  },
  handleKeyUp: function handleKeyUp(e) {
    var s = this;
    var props = s.props;

    if (props.onKeyUp) {
      props.onKeyUp(e);
    }
    e.stopPropagation();
  },
  handleItemTap: function handleItemTap(e) {
    var s = this;
    var props = s.props;

    (0, _assign2.default)(e.target, {
      value: e.target.value || e.data || null,
      name: e.target.name || props.name
    });
    if (props.onChange) {
      props.onChange(e);
    }
    s.setState({
      focused: false,
      focusIndex: s.getIndexForValue(s.props.value)
    });
  },
  handleClickForOutside: function handleClickForOutside(e) {
    var s = this;
    var node = _reactDom2.default.findDOMNode(s);
    if (!node) {
      return;
    }
    var contained = node.contains(e.target);
    if (!contained) {
      s.outsideDidTap(e);
    }
  },
  outsideDidTap: function outsideDidTap(e) {
    var s = this;
    s.setFocus(false);
  },


  // ------------------
  // ApLayoutMixin
  // ------------------

  getInitialLayouts: function getInitialLayouts() {
    return {
      listInner: {
        transform: 'initial'
      }
    };
  },
  calcLayouts: function calcLayouts() {
    var s = this;
    var _window = window,
        innerHeight = _window.innerHeight,
        innerWidth = _window.innerWidth;
    var list = s.nodes.list;

    if (!list) {
      return {};
    }
    return {
      listInner: s._listInnerLayout(list.getBoundingClientRect(), innerWidth, innerHeight)
    };
  },


  // ------------------
  // Private
  // ------------------

  _listInnerLayout: function _listInnerLayout(rect, boundsWidth, boundsHeight) {
    var x = _numcal2.default.min(boundsWidth - rect.right, 0);
    var y = _numcal2.default.min(boundsHeight - rect.bottom, 0);

    var maxHeight = _numcal2.default.min(boundsHeight, 280) + 'px';
    return {
      transform: 'translate(' + x + 'px, ' + y + 'px)',
      maxHeight: maxHeight
    };
  }
});

exports.ApSelect = ApSelect;
exports.default = (0, _apemanReactTouchable.withOutside)(ApSelect);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,