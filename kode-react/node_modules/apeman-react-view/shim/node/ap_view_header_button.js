/**
 * Button for header.
 * @class ApViewHeaderButton
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _apemanReactIcon = require('apeman-react-icon');

var _apemanReactTouchable = require('apeman-react-touchable');

var _asobj = require('asobj');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApViewHeaderButton */
var ApViewHeaderButton = _react2.default.createClass({
  displayName: 'ApViewHeaderButton',


  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Text of button */
    text: _react.PropTypes.string,
    /** Text of icon */
    icon: _react.PropTypes.string
  },

  getDefaultProps: function getDefaultProps() {
    return {
      text: null,
      icon: null
    };
  },
  render: function render() {
    var s = this;
    var props = s.props;
    var text = props.text;
    var icon = props.icon;


    var isEmpty = !(text || icon);
    if (isEmpty) {
      return _react2.default.createElement('span', { className: 'ap-view-header-button-alt' });
    }

    return _react2.default.createElement(
      'a',
      { className: (0, _classnames2.default)('ap-view-header-button', props.className),
        style: (0, _assign2.default)({}, props.style) },
      _react2.default.createElement(
        'span',
        { className: 'ap-view-header-button-inner' },
        _react2.default.createElement(
          'span',
          { className: 'ap-view-header-button-aligner' },
          '&ngbsp;'
        ),
        _react2.default.createElement(_apemanReactIcon.ApIcon, { className: (0, _classnames2.default)('ap-view-header-ion', icon) }),
        _react2.default.createElement(
          'span',
          { className: 'ap-view-header-button-text' },
          text
        ),
        props.children
      )
    );
  },
  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    var s = this;
    var props = s.props;
    var state = s.state;

    return !(0, _asobj.shallowEqual)(props, nextProps) || (0, _asobj.shallowEqual)(state, nextState);
  }

  // ------------------
  // Custom
  // ------------------

});

exports.default = (0, _apemanReactTouchable.withTouch)(ApViewHeaderButton);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwX3ZpZXdfaGVhZGVyX2J1dHRvbi5qc3giXSwibmFtZXMiOlsiQXBWaWV3SGVhZGVyQnV0dG9uIiwiY3JlYXRlQ2xhc3MiLCJwcm9wVHlwZXMiLCJ0ZXh0Iiwic3RyaW5nIiwiaWNvbiIsImdldERlZmF1bHRQcm9wcyIsInJlbmRlciIsInMiLCJwcm9wcyIsImlzRW1wdHkiLCJjbGFzc05hbWUiLCJzdHlsZSIsImNoaWxkcmVuIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwibmV4dFByb3BzIiwibmV4dFN0YXRlIiwic3RhdGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUtBOzs7Ozs7Ozs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUE7QUFDQSxJQUFNQSxxQkFBcUIsZ0JBQU1DLFdBQU4sQ0FBa0I7QUFBQTs7O0FBRTNDO0FBQ0E7QUFDQTs7QUFFQUMsYUFBVztBQUNUO0FBQ0FDLFVBQU0saUJBQU1DLE1BRkg7QUFHVDtBQUNBQyxVQUFNLGlCQUFNRDtBQUpILEdBTmdDOztBQWEzQ0UsaUJBYjJDLDZCQWF4QjtBQUNqQixXQUFPO0FBQ0xILFlBQU0sSUFERDtBQUVMRSxZQUFNO0FBRkQsS0FBUDtBQUlELEdBbEIwQztBQW9CM0NFLFFBcEIyQyxvQkFvQmpDO0FBQ1IsUUFBTUMsSUFBSSxJQUFWO0FBRFEsUUFFRkMsS0FGRSxHQUVRRCxDQUZSLENBRUZDLEtBRkU7QUFBQSxRQUlGTixJQUpFLEdBSWFNLEtBSmIsQ0FJRk4sSUFKRTtBQUFBLFFBSUlFLElBSkosR0FJYUksS0FKYixDQUlJSixJQUpKOzs7QUFNUixRQUFJSyxVQUFVLEVBQUVQLFFBQVFFLElBQVYsQ0FBZDtBQUNBLFFBQUlLLE9BQUosRUFBYTtBQUNYLGFBQU8sd0NBQU0sV0FBVSwyQkFBaEIsR0FBUDtBQUNEOztBQUVELFdBQ0U7QUFBQTtBQUFBLFFBQUcsV0FBWSwwQkFBVyx1QkFBWCxFQUFvQ0QsTUFBTUUsU0FBMUMsQ0FBZjtBQUNHLGVBQVEsc0JBQWMsRUFBZCxFQUFrQkYsTUFBTUcsS0FBeEIsQ0FEWDtBQUVjO0FBQUE7QUFBQSxVQUFNLFdBQVUsNkJBQWhCO0FBQ0k7QUFBQTtBQUFBLFlBQU0sV0FBVSwrQkFBaEI7QUFBQTtBQUFBLFNBREo7QUFFSSxpRUFBUSxXQUFZLDBCQUFXLG9CQUFYLEVBQWlDUCxJQUFqQyxDQUFwQixHQUZKO0FBR0k7QUFBQTtBQUFBLFlBQU0sV0FBVSw0QkFBaEI7QUFBK0NGO0FBQS9DLFNBSEo7QUFJSU0sY0FBTUk7QUFKVjtBQUZkLEtBREY7QUFXRCxHQTFDMEM7QUE0QzNDQyx1QkE1QzJDLGlDQTRDcEJDLFNBNUNvQixFQTRDVEMsU0E1Q1MsRUE0Q0U7QUFDM0MsUUFBTVIsSUFBSSxJQUFWO0FBRDJDLFFBRXJDQyxLQUZxQyxHQUVwQkQsQ0FGb0IsQ0FFckNDLEtBRnFDO0FBQUEsUUFFOUJRLEtBRjhCLEdBRXBCVCxDQUZvQixDQUU5QlMsS0FGOEI7O0FBRzNDLFdBQU8sQ0FBQyx5QkFBYVIsS0FBYixFQUFvQk0sU0FBcEIsQ0FBRCxJQUFtQyx5QkFBYUUsS0FBYixFQUFvQkQsU0FBcEIsQ0FBMUM7QUFDRDs7QUFFRDtBQUNBO0FBQ0E7O0FBcEQyQyxDQUFsQixDQUEzQjs7a0JBd0RlLHFDQUFVaEIsa0JBQVYsQyIsImZpbGUiOiJhcF92aWV3X2hlYWRlcl9idXR0b24uanN4Iiwic291cmNlUm9vdCI6ImxpYiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQnV0dG9uIGZvciBoZWFkZXIuXG4gKiBAY2xhc3MgQXBWaWV3SGVhZGVyQnV0dG9uXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgYXMgdHlwZXMgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnXG5pbXBvcnQgeyBBcEljb24gfSBmcm9tICdhcGVtYW4tcmVhY3QtaWNvbidcbmltcG9ydCB7IHdpdGhUb3VjaCB9IGZyb20gJ2FwZW1hbi1yZWFjdC10b3VjaGFibGUnXG5pbXBvcnQgeyBzaGFsbG93RXF1YWwgfSBmcm9tICdhc29iaidcblxuLyoqIEBsZW5kcyBBcFZpZXdIZWFkZXJCdXR0b24gKi9cbmNvbnN0IEFwVmlld0hlYWRlckJ1dHRvbiA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBTcGVjc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIHByb3BUeXBlczoge1xuICAgIC8qKiBUZXh0IG9mIGJ1dHRvbiAqL1xuICAgIHRleHQ6IHR5cGVzLnN0cmluZyxcbiAgICAvKiogVGV4dCBvZiBpY29uICovXG4gICAgaWNvbjogdHlwZXMuc3RyaW5nXG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdGV4dDogbnVsbCxcbiAgICAgIGljb246IG51bGxcbiAgICB9XG4gIH0sXG5cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIGxldCB7IHByb3BzIH0gPSBzXG5cbiAgICBsZXQgeyB0ZXh0LCBpY29uIH0gPSBwcm9wc1xuXG4gICAgbGV0IGlzRW1wdHkgPSAhKHRleHQgfHwgaWNvbilcbiAgICBpZiAoaXNFbXB0eSkge1xuICAgICAgcmV0dXJuIDxzcGFuIGNsYXNzTmFtZT0nYXAtdmlldy1oZWFkZXItYnV0dG9uLWFsdCc+PC9zcGFuPlxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8YSBjbGFzc05hbWU9eyBjbGFzc25hbWVzKCdhcC12aWV3LWhlYWRlci1idXR0b24nLCBwcm9wcy5jbGFzc05hbWUpIH1cbiAgICAgICAgIHN0eWxlPXsgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMuc3R5bGUpIH0+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nYXAtdmlldy1oZWFkZXItYnV0dG9uLWlubmVyJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT0nYXAtdmlldy1oZWFkZXItYnV0dG9uLWFsaWduZXInPiZuZ2JzcDs8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QXBJY29uIGNsYXNzTmFtZT17IGNsYXNzbmFtZXMoJ2FwLXZpZXctaGVhZGVyLWlvbicsIGljb24pIH0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPSdhcC12aWV3LWhlYWRlci1idXR0b24tdGV4dCc+eyB0ZXh0IH08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgeyBwcm9wcy5jaGlsZHJlbiB9XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgIDwvYT5cbiAgICApXG4gIH0sXG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlIChuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIGNvbnN0IHMgPSB0aGlzXG4gICAgbGV0IHsgcHJvcHMsIHN0YXRlIH0gPSBzXG4gICAgcmV0dXJuICFzaGFsbG93RXF1YWwocHJvcHMsIG5leHRQcm9wcykgfHwgc2hhbGxvd0VxdWFsKHN0YXRlLCBuZXh0U3RhdGUpXG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gQ3VzdG9tXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuXG59KVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoVG91Y2goQXBWaWV3SGVhZGVyQnV0dG9uKVxuIl19