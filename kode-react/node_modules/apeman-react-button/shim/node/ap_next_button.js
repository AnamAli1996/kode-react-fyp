/**
 * Next button component.
 * @class ApNextButton
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ap_button = require('./ap_button');

var _ap_button2 = _interopRequireDefault(_ap_button);

var _apemanReactIcon = require('apeman-react-icon');

var _asobj = require('asobj');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApNextButton */
var ApNextButton = _react2.default.createClass({
  displayName: 'ApNextButton',


  // --------------------
  // Specs
  // --------------------

  propTypes: {
    disabled: _react.PropTypes.bool,
    onTap: _react.PropTypes.func,
    text: _react.PropTypes.string,
    size: _react.PropTypes.number,
    icon: _react.PropTypes.string
  },

  mixins: [],

  getInitialState: function getInitialState() {
    return {};
  },
  getDefaultProps: function getDefaultProps() {
    return {
      disabled: false,
      onTap: null,
      text: null,
      icon: 'fa fa-caret-right'
    };
  },
  render: function render() {
    var s = this;
    var props = s.props;

    return _react2.default.createElement(
      _ap_button2.default,
      (0, _extends3.default)({}, props, {
        className: (0, _classnames2.default)('ap-next-button', props.className),
        wide: false,
        style: (0, _assign2.default)({}, props.style)
      }),
      _react2.default.createElement(
        'span',
        { className: 'ap-next-button-text' },
        props.text
      ),
      props.children,
      _react2.default.createElement(_apemanReactIcon.ApIcon, { className: (0, _classnames2.default)('ap-next-button-icon', props.icon) })
    );
  },


  // --------------------
  // Lifecycle
  // --------------------

  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    var s = this;
    var props = s.props,
        state = s.state;

    return !(0, _asobj.shallowEqual)(props, nextProps) || !(0, _asobj.shallowEqual)(state, nextState);
  }
});

exports.default = ApNextButton;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwX25leHRfYnV0dG9uLmpzeCJdLCJuYW1lcyI6WyJBcE5leHRCdXR0b24iLCJjcmVhdGVDbGFzcyIsInByb3BUeXBlcyIsImRpc2FibGVkIiwiYm9vbCIsIm9uVGFwIiwiZnVuYyIsInRleHQiLCJzdHJpbmciLCJzaXplIiwibnVtYmVyIiwiaWNvbiIsIm1peGlucyIsImdldEluaXRpYWxTdGF0ZSIsImdldERlZmF1bHRQcm9wcyIsInJlbmRlciIsInMiLCJwcm9wcyIsImNsYXNzTmFtZSIsInN0eWxlIiwiY2hpbGRyZW4iLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJuZXh0UHJvcHMiLCJuZXh0U3RhdGUiLCJzdGF0ZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBS0E7Ozs7Ozs7Ozs7Ozs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFFQTtBQUNBLElBQU1BLGVBQWUsZ0JBQU1DLFdBQU4sQ0FBa0I7QUFBQTs7O0FBRXJDO0FBQ0E7QUFDQTs7QUFFQUMsYUFBVztBQUNUQyxjQUFVLGlCQUFNQyxJQURQO0FBRVRDLFdBQU8saUJBQU1DLElBRko7QUFHVEMsVUFBTSxpQkFBTUMsTUFISDtBQUlUQyxVQUFNLGlCQUFNQyxNQUpIO0FBS1RDLFVBQU0saUJBQU1IO0FBTEgsR0FOMEI7O0FBY3JDSSxVQUFRLEVBZDZCOztBQWlCckNDLGlCQWpCcUMsNkJBaUJsQjtBQUNqQixXQUFPLEVBQVA7QUFDRCxHQW5Cb0M7QUFxQnJDQyxpQkFyQnFDLDZCQXFCbEI7QUFDakIsV0FBTztBQUNMWCxnQkFBVSxLQURMO0FBRUxFLGFBQU8sSUFGRjtBQUdMRSxZQUFNLElBSEQ7QUFJTEksWUFBTTtBQUpELEtBQVA7QUFNRCxHQTVCb0M7QUE4QnJDSSxRQTlCcUMsb0JBOEIzQjtBQUNSLFFBQU1DLElBQUksSUFBVjtBQURRLFFBRUZDLEtBRkUsR0FFUUQsQ0FGUixDQUVGQyxLQUZFOztBQUdSLFdBQ0U7QUFBQTtBQUFBLGlDQUFlQSxLQUFmO0FBQ1UsbUJBQVksMEJBQVcsZ0JBQVgsRUFBNkJBLE1BQU1DLFNBQW5DLENBRHRCO0FBRVUsY0FBTyxLQUZqQjtBQUdVLGVBQU8sc0JBQWMsRUFBZCxFQUFrQkQsTUFBTUUsS0FBeEI7QUFIakI7QUFLVTtBQUFBO0FBQUEsVUFBTSxXQUFVLHFCQUFoQjtBQUNNRixjQUFNVjtBQURaLE9BTFY7QUFRSVUsWUFBTUcsUUFSVjtBQVNFLCtEQUFRLFdBQVksMEJBQVcscUJBQVgsRUFBa0NILE1BQU1OLElBQXhDLENBQXBCO0FBVEYsS0FERjtBQWFELEdBOUNvQzs7O0FBZ0RyQztBQUNBO0FBQ0E7O0FBRUFVLHVCQXBEcUMsaUNBb0RkQyxTQXBEYyxFQW9ESEMsU0FwREcsRUFvRFE7QUFDM0MsUUFBTVAsSUFBSSxJQUFWO0FBRDJDLFFBRXJDQyxLQUZxQyxHQUVwQkQsQ0FGb0IsQ0FFckNDLEtBRnFDO0FBQUEsUUFFOUJPLEtBRjhCLEdBRXBCUixDQUZvQixDQUU5QlEsS0FGOEI7O0FBRzNDLFdBQU8sQ0FBQyx5QkFBYVAsS0FBYixFQUFvQkssU0FBcEIsQ0FBRCxJQUFtQyxDQUFDLHlCQUFhRSxLQUFiLEVBQW9CRCxTQUFwQixDQUEzQztBQUNEO0FBeERvQyxDQUFsQixDQUFyQjs7a0JBNERldkIsWSIsImZpbGUiOiJhcF9uZXh0X2J1dHRvbi5qc3giLCJzb3VyY2VSb290IjoibGliIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBOZXh0IGJ1dHRvbiBjb21wb25lbnQuXG4gKiBAY2xhc3MgQXBOZXh0QnV0dG9uXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBSZWFjdCwge1Byb3BUeXBlcyBhcyB0eXBlc30gZnJvbSAncmVhY3QnXG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJ1xuaW1wb3J0IEFwQnV0dG9uIGZyb20gJy4vYXBfYnV0dG9uJ1xuaW1wb3J0IHtBcEljb259IGZyb20gJ2FwZW1hbi1yZWFjdC1pY29uJ1xuaW1wb3J0IHtzaGFsbG93RXF1YWx9IGZyb20gJ2Fzb2JqJ1xuXG4vKiogQGxlbmRzIEFwTmV4dEJ1dHRvbiAqL1xuY29uc3QgQXBOZXh0QnV0dG9uID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIFNwZWNzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgZGlzYWJsZWQ6IHR5cGVzLmJvb2wsXG4gICAgb25UYXA6IHR5cGVzLmZ1bmMsXG4gICAgdGV4dDogdHlwZXMuc3RyaW5nLFxuICAgIHNpemU6IHR5cGVzLm51bWJlcixcbiAgICBpY29uOiB0eXBlcy5zdHJpbmdcbiAgfSxcblxuICBtaXhpbnM6IFtcbiAgXSxcblxuICBnZXRJbml0aWFsU3RhdGUgKCkge1xuICAgIHJldHVybiB7fVxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wcyAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgIG9uVGFwOiBudWxsLFxuICAgICAgdGV4dDogbnVsbCxcbiAgICAgIGljb246ICdmYSBmYS1jYXJldC1yaWdodCdcbiAgICB9XG4gIH0sXG5cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIGxldCB7IHByb3BzIH0gPSBzXG4gICAgcmV0dXJuIChcbiAgICAgIDxBcEJ1dHRvbiB7IC4uLnByb3BzIH1cbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9eyBjbGFzc25hbWVzKCdhcC1uZXh0LWJ1dHRvbicsIHByb3BzLmNsYXNzTmFtZSkgfVxuICAgICAgICAgICAgICAgIHdpZGU9eyBmYWxzZSB9XG4gICAgICAgICAgICAgICAgc3R5bGU9e09iamVjdC5hc3NpZ24oe30sIHByb3BzLnN0eWxlKX1cbiAgICAgID5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J2FwLW5leHQtYnV0dG9uLXRleHQnPlxuICAgICAgICAgICAgICAgICAgICB7IHByb3BzLnRleHQgfVxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgeyBwcm9wcy5jaGlsZHJlbiB9XG4gICAgICAgIDxBcEljb24gY2xhc3NOYW1lPXsgY2xhc3NuYW1lcygnYXAtbmV4dC1idXR0b24taWNvbicsIHByb3BzLmljb24pIH0vPlxuICAgICAgPC9BcEJ1dHRvbj5cbiAgICApXG4gIH0sXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gTGlmZWN5Y2xlXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlIChuZXh0UHJvcHMsIG5leHRTdGF0ZSkge1xuICAgIGNvbnN0IHMgPSB0aGlzXG4gICAgbGV0IHsgcHJvcHMsIHN0YXRlIH0gPSBzXG4gICAgcmV0dXJuICFzaGFsbG93RXF1YWwocHJvcHMsIG5leHRQcm9wcykgfHwgIXNoYWxsb3dFcXVhbChzdGF0ZSwgbmV4dFN0YXRlKVxuICB9XG5cbn0pXG5cbmV4cG9ydCBkZWZhdWx0IEFwTmV4dEJ1dHRvblxuIl19