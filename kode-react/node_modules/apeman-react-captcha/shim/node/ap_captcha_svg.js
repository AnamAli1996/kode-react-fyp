/**
 * SVG captcha.
 * DO NOT use svg base captcha in production, since it may be parsable by bots.
 * You need to convert to bitmap like png beforehand.
 * @class ApCaptchaSvg
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _randomval = require('randomval');

var _randomval2 = _interopRequireDefault(_randomval);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var dummyLetter = function dummyLetter() {
  var letters = arguments.length <= 0 || arguments[0] === undefined ? '1234567890abcdefg' : arguments[0];
  return letters[(0, _randomval.randomInt)(0, letters.length - 1)];
};

/** @lends ApCaptchaSvg */

var ApCaptchaSvg = function (_Component) {
  _inherits(ApCaptchaSvg, _Component);

  function ApCaptchaSvg() {
    _classCallCheck(this, ApCaptchaSvg);

    return _possibleConstructorReturn(this, (ApCaptchaSvg.__proto__ || Object.getPrototypeOf(ApCaptchaSvg)).apply(this, arguments));
  }

  _createClass(ApCaptchaSvg, [{
    key: 'render',
    value: function render() {
      var s = this;
      var props = s.props;


      var color = '#555';

      var width = props.width;
      var height = props.height;


      var backgrounds = [0, 1, 2, 3].map(function (val, i, _ref) {
        var length = _ref.length;

        var margin = width * 0.2;
        var rate = (i + 0.5) / length;
        return _react2.default.createElement(ApCaptchaSvg.StripeBlock, { rate: rate,
          key: i + '-' + val,
          color: color,
          blockProps: {
            key: 'bg-' + i,
            width: parseInt(width / length + margin * 2),
            height: parseInt(height + margin * 2),
            x: parseInt(width * rate - margin),
            y: parseInt(0 - margin)
          }
        });
      });

      var texts = props.text.split('').map(function (letter, i, letters) {
        var indices = [0, 1, 2, 3, 4, 5];
        var real = (0, _randomval.randomInt)(0, indices.length - 1);
        var texts = indices.map(function (j) {
          var rate = i / letters.length;
          var key = 'letter-' + i + '-' + j;
          var isReal = j === real;
          return _react2.default.createElement(ApCaptchaSvg.Letter, { letter: isReal ? letter : dummyLetter(),
            rate: rate,
            width: width,
            height: height,
            textProps: {
              key: key,
              fill: isReal ? color : 'rgba(255,255,255,' + 0.01 * (0, _randomval.randomInt)(0, 30) + ')'
            },
            key: i + '-' + j + '-' + letter
          });
        });
        return _react2.default.createElement(
          'g',
          { key: 'letter-group-' + i },
          texts
        );
      });
      return _react2.default.createElement(
        'svg',
        { version: props.version,
          width: width,
          height: height,
          xmlns: props.xmlns,
          viewBox: '0 0 ' + width + ' ' + height
        },
        _react2.default.createElement(
          'g',
          null,
          backgrounds
        ),
        _react2.default.createElement(
          'g',
          null,
          texts
        )
      );
    }
  }], [{
    key: 'Letter',
    value: function Letter(_ref2) {
      var letter = _ref2.letter;
      var rate = _ref2.rate;
      var width = _ref2.width;
      var height = _ref2.height;
      var textProps = _ref2.textProps;

      var padding = 16;

      var w = width - padding * 2;
      var h = height;

      var moveRange = h / 20;
      var move = _randomval.randomInt.bind(_randomval2.default, moveRange * -1, moveRange);

      var fontSize = h * 0.8;
      var x = padding + w * rate + fontSize / 4;
      var y = fontSize;
      var rotateRange = 40;
      var rotate = (0, _randomval.randomInt)(-rotateRange, rotateRange);
      return _react2.default.createElement(
        'text',
        _extends({ x: parseInt(x),
          y: parseInt(y),
          fontSize: parseInt(fontSize),
          transform: 'translate(' + move() + ', ' + move() + ') rotate(' + parseInt(rotate) + ', ' + parseInt(x) + ', ' + parseInt(y) + ')'
        }, textProps),
        letter
      );
    }
  }, {
    key: 'StripeBlock',
    value: function StripeBlock(_ref3) {
      var rate = _ref3.rate;
      var color = _ref3.color;
      var blockProps = _ref3.blockProps;

      var rotate = (0, _randomval.randomInt)(-90, 90);

      var lines = [];
      var lineWidth = 1;
      var w = blockProps.width;
      var h = blockProps.height;

      var left = w * -0.5;
      var right = w * 1.5;

      for (var x = left; x < right; x += lineWidth * 6) {
        lines.push(_react2.default.createElement('line', { x1: parseInt(x),
          y1: parseInt(0),
          x2: parseInt(x),
          y2: parseInt(h),
          key: 'line-' + x,
          stroke: color
        }));
      }

      return _react2.default.createElement(
        'svg',
        blockProps,
        _react2.default.createElement(
          'g',
          {
            transform: 'scale(1.3) rotate(' + parseInt(rotate) + ', ' + parseInt(blockProps.width / 2) + ', ' + parseInt(blockProps.height / 2) + ')' },
          lines
        )
      );
    }
  }]);

  return ApCaptchaSvg;
}(_react.Component);

Object.assign(ApCaptchaSvg, {
  // --------------------
  // Specs
  // --------------------

  propsTypes: {
    version: _react.PropTypes.string,
    text: _react.PropTypes.string.isRequired,
    width: _react.PropTypes.number,
    height: _react.PropTypes.number
  },

  defaultProps: {
    version: '1.1',
    xmlns: 'http://www.w3.org/2000/svg',
    text: '',
    width: 256,
    height: 92
  }
});

exports.default = ApCaptchaSvg;
//# sourceMappingURL=data:application/json;base64,