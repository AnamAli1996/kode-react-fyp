/**
 * Style for ApText.
 * @class ApTextStyle
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _apemanReactStyle = require('apeman-react-style');

var _acolor = require('acolor');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApTextStyle */
var ApTextStyle = function (_Component) {
  (0, _inherits3.default)(ApTextStyle, _Component);

  function ApTextStyle() {
    (0, _classCallCheck3.default)(this, ApTextStyle);
    return (0, _possibleConstructorReturn3.default)(this, (ApTextStyle.__proto__ || (0, _getPrototypeOf2.default)(ApTextStyle)).apply(this, arguments));
  }

  (0, _createClass3.default)(ApTextStyle, [{
    key: 'render',
    value: function render() {
      var s = this;
      var props = s.props;

      var _ApTextStyle$styleDat = ApTextStyle.styleData(props),
          all = _ApTextStyle$styleDat.all,
          small = _ApTextStyle$styleDat.small,
          medium = _ApTextStyle$styleDat.medium,
          large = _ApTextStyle$styleDat.large;

      return _react2.default.createElement(
        _apemanReactStyle.ApStyle,
        { data: (0, _assign2.default)(all, props.style),
          smallMediaData: small,
          mediumMediaData: medium,
          largeMediaData: large
        },
        props.children
      );
    }
  }]);
  return ApTextStyle;
}(_react.Component);

(0, _assign2.default)(ApTextStyle, {
  propTypes: {
    style: _react.PropTypes.object,
    highlightColor: _react.PropTypes.string,
    maxWidth: _react.PropTypes.number
  },

  defaultProps: {
    style: {},
    maxWidth: _apemanReactStyle.ApStyle.CONTENT_WIDTH,
    highlightColor: _apemanReactStyle.ApStyle.DEFAULT_HIGHLIGHT_COLOR
  },

  styleData: function styleData(config) {
    var highlightColor = config.highlightColor,
        maxWidth = config.maxWidth;

    return {
      all: {
        '.ap-text': {
          display: 'block',
          padding: '4px 8px',
          border: '1px solid #AAA',
          width: '100%',
          maxWidth: maxWidth + 'px',
          borderRadius: '2px',
          boxSizing: 'border-box',
          outlineColor: '' + highlightColor,
          boxShadow: '1px 1px 1px rgba(0,0,0,.05) inset'
        },
        '.ap-text-wrap': {
          position: 'relative',
          width: '100%',
          padding: '4px',
          margin: 0,
          verticalAlign: 'middle',
          boxSizing: 'border-box',
          maxWidth: maxWidth + 'px',
          display: 'block'
        },
        '.ap-text-multiple': {
          overflow: 'auto'
        },
        '.ap-text-candidate-list': {
          position: 'absolute',
          left: 0,
          right: '1px',
          top: '100%',
          zIndex: 4,
          padding: '4px 0',
          margin: '0 1px',
          boxShadow: '1px 1px 2px rgba(0,0,0,0.33)',
          background: 'white',
          boxSizing: 'border-box'
        },
        '.ap-text-candidate-list-item': {
          display: 'block',
          padding: 0,
          margin: 0
        },
        '.ap-text-candidate-list-item a': {
          display: 'block',
          padding: '4px 8px'
        },
        '.ap-text-candidate-list-item a:hover': {
          cursor: 'pointer',
          background: '#FAFAFA'
        },
        '.ap-text-candidate-list-item a:active': {
          background: '#F5F5F5'
        },
        '.ap-text-candidate-list-item-selected a': {
          background: (0, _acolor.alpha)(highlightColor, 0.33)
        },
        '.ap-text-candidate-list-item-selected a:hover': {
          background: (0, _acolor.alpha)(highlightColor, 0.5)
        },
        '.ap-text-candidate-list-item-selected a:active': {
          background: (0, _acolor.alpha)(highlightColor, 0.2)
        }
      }
    };
  }
});
exports.default = ApTextStyle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwX3RleHRfc3R5bGUuanN4Il0sIm5hbWVzIjpbIkFwVGV4dFN0eWxlIiwicyIsInByb3BzIiwic3R5bGVEYXRhIiwiYWxsIiwic21hbGwiLCJtZWRpdW0iLCJsYXJnZSIsInN0eWxlIiwiY2hpbGRyZW4iLCJwcm9wVHlwZXMiLCJvYmplY3QiLCJoaWdobGlnaHRDb2xvciIsInN0cmluZyIsIm1heFdpZHRoIiwibnVtYmVyIiwiZGVmYXVsdFByb3BzIiwiQ09OVEVOVF9XSURUSCIsIkRFRkFVTFRfSElHSExJR0hUX0NPTE9SIiwiY29uZmlnIiwiZGlzcGxheSIsInBhZGRpbmciLCJib3JkZXIiLCJ3aWR0aCIsImJvcmRlclJhZGl1cyIsImJveFNpemluZyIsIm91dGxpbmVDb2xvciIsImJveFNoYWRvdyIsInBvc2l0aW9uIiwibWFyZ2luIiwidmVydGljYWxBbGlnbiIsIm92ZXJmbG93IiwibGVmdCIsInJpZ2h0IiwidG9wIiwiekluZGV4IiwiYmFja2dyb3VuZCIsImN1cnNvciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBS0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFFQTtJQUNNQSxXOzs7Ozs7Ozs7OzZCQUNNO0FBQ1IsVUFBTUMsSUFBSSxJQUFWO0FBRFEsVUFFRkMsS0FGRSxHQUVRRCxDQUZSLENBRUZDLEtBRkU7O0FBQUEsa0NBSTRCRixZQUFZRyxTQUFaLENBQXNCRCxLQUF0QixDQUo1QjtBQUFBLFVBSUZFLEdBSkUseUJBSUZBLEdBSkU7QUFBQSxVQUlHQyxLQUpILHlCQUlHQSxLQUpIO0FBQUEsVUFJVUMsTUFKVix5QkFJVUEsTUFKVjtBQUFBLFVBSWtCQyxLQUpsQix5QkFJa0JBLEtBSmxCOztBQU1SLGFBQ0U7QUFBQTtBQUFBLFVBQVMsTUFBTyxzQkFBY0gsR0FBZCxFQUFtQkYsTUFBTU0sS0FBekIsQ0FBaEI7QUFDUywwQkFBaUJILEtBRDFCO0FBRVMsMkJBQWtCQyxNQUYzQjtBQUdTLDBCQUFpQkM7QUFIMUI7QUFJR0wsY0FBTU87QUFKVCxPQURGO0FBT0Q7Ozs7O0FBR0gsc0JBQWNULFdBQWQsRUFBMkI7QUFDekJVLGFBQVc7QUFDVEYsV0FBTyxpQkFBTUcsTUFESjtBQUVUQyxvQkFBZ0IsaUJBQU1DLE1BRmI7QUFHVEMsY0FBVSxpQkFBTUM7QUFIUCxHQURjOztBQU96QkMsZ0JBQWM7QUFDWlIsV0FBTyxFQURLO0FBRVpNLGNBQVUsMEJBQVFHLGFBRk47QUFHWkwsb0JBQWdCLDBCQUFRTTtBQUhaLEdBUFc7O0FBYXpCZixXQWJ5QixxQkFhZGdCLE1BYmMsRUFhTjtBQUFBLFFBQ1hQLGNBRFcsR0FDa0JPLE1BRGxCLENBQ1hQLGNBRFc7QUFBQSxRQUNLRSxRQURMLEdBQ2tCSyxNQURsQixDQUNLTCxRQURMOztBQUVqQixXQUFPO0FBQ0xWLFdBQUs7QUFDSCxvQkFBWTtBQUNWZ0IsbUJBQVMsT0FEQztBQUVWQyxtQkFBUyxTQUZDO0FBR1ZDLGtCQUFRLGdCQUhFO0FBSVZDLGlCQUFPLE1BSkc7QUFLVlQsb0JBQWFBLFFBQWIsT0FMVTtBQU1WVSx3QkFBYyxLQU5KO0FBT1ZDLHFCQUFXLFlBUEQ7QUFRVkMsNkJBQWlCZCxjQVJQO0FBU1ZlLHFCQUFXO0FBVEQsU0FEVDtBQVlILHlCQUFpQjtBQUNmQyxvQkFBVSxVQURLO0FBRWZMLGlCQUFPLE1BRlE7QUFHZkYsbUJBQVMsS0FITTtBQUlmUSxrQkFBUSxDQUpPO0FBS2ZDLHlCQUFlLFFBTEE7QUFNZkwscUJBQVcsWUFOSTtBQU9mWCxvQkFBYUEsUUFBYixPQVBlO0FBUWZNLG1CQUFTO0FBUk0sU0FaZDtBQXNCSCw2QkFBcUI7QUFDbkJXLG9CQUFVO0FBRFMsU0F0QmxCO0FBeUJILG1DQUEyQjtBQUN6Qkgsb0JBQVUsVUFEZTtBQUV6QkksZ0JBQU0sQ0FGbUI7QUFHekJDLGlCQUFPLEtBSGtCO0FBSXpCQyxlQUFLLE1BSm9CO0FBS3pCQyxrQkFBUSxDQUxpQjtBQU16QmQsbUJBQVMsT0FOZ0I7QUFPekJRLGtCQUFRLE9BUGlCO0FBUXpCRixxQkFBVyw4QkFSYztBQVN6QlMsc0JBQVksT0FUYTtBQVV6QlgscUJBQVc7QUFWYyxTQXpCeEI7QUFxQ0gsd0NBQWdDO0FBQzlCTCxtQkFBUyxPQURxQjtBQUU5QkMsbUJBQVMsQ0FGcUI7QUFHOUJRLGtCQUFRO0FBSHNCLFNBckM3QjtBQTBDSCwwQ0FBa0M7QUFDaENULG1CQUFTLE9BRHVCO0FBRWhDQyxtQkFBUztBQUZ1QixTQTFDL0I7QUE4Q0gsZ0RBQXdDO0FBQ3RDZ0Isa0JBQVEsU0FEOEI7QUFFdENELHNCQUFZO0FBRjBCLFNBOUNyQztBQWtESCxpREFBeUM7QUFDdkNBLHNCQUFZO0FBRDJCLFNBbER0QztBQXFESCxtREFBMkM7QUFDekNBLHNCQUFZLG1CQUFNeEIsY0FBTixFQUFzQixJQUF0QjtBQUQ2QixTQXJEeEM7QUF3REgseURBQWlEO0FBQy9Dd0Isc0JBQVksbUJBQU14QixjQUFOLEVBQXNCLEdBQXRCO0FBRG1DLFNBeEQ5QztBQTJESCwwREFBa0Q7QUFDaER3QixzQkFBWSxtQkFBTXhCLGNBQU4sRUFBc0IsR0FBdEI7QUFEb0M7QUEzRC9DO0FBREEsS0FBUDtBQWlFRDtBQWhGd0IsQ0FBM0I7a0JBbUZlWixXIiwiZmlsZSI6ImFwX3RleHRfc3R5bGUuanN4Iiwic291cmNlUm9vdCI6ImxpYiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3R5bGUgZm9yIEFwVGV4dC5cbiAqIEBjbGFzcyBBcFRleHRTdHlsZVxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgYXMgdHlwZXMgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IEFwU3R5bGUgfSBmcm9tICdhcGVtYW4tcmVhY3Qtc3R5bGUnXG5pbXBvcnQgIHsgYWxwaGEgfSBmcm9tICdhY29sb3InXG5cbi8qKiBAbGVuZHMgQXBUZXh0U3R5bGUgKi9cbmNsYXNzIEFwVGV4dFN0eWxlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIGxldCB7IHByb3BzIH0gPSBzXG5cbiAgICBsZXQgeyBhbGwsIHNtYWxsLCBtZWRpdW0sIGxhcmdlIH0gPSBBcFRleHRTdHlsZS5zdHlsZURhdGEocHJvcHMpXG5cbiAgICByZXR1cm4gKFxuICAgICAgPEFwU3R5bGUgZGF0YT17IE9iamVjdC5hc3NpZ24oYWxsLCBwcm9wcy5zdHlsZSkgfVxuICAgICAgICAgICAgICAgc21hbGxNZWRpYURhdGE9eyBzbWFsbCB9XG4gICAgICAgICAgICAgICBtZWRpdW1NZWRpYURhdGE9eyBtZWRpdW0gfVxuICAgICAgICAgICAgICAgbGFyZ2VNZWRpYURhdGE9eyBsYXJnZSB9XG4gICAgICA+eyBwcm9wcy5jaGlsZHJlbiB9PC9BcFN0eWxlPlxuICAgIClcbiAgfVxufVxuXG5PYmplY3QuYXNzaWduKEFwVGV4dFN0eWxlLCB7XG4gIHByb3BUeXBlczoge1xuICAgIHN0eWxlOiB0eXBlcy5vYmplY3QsXG4gICAgaGlnaGxpZ2h0Q29sb3I6IHR5cGVzLnN0cmluZyxcbiAgICBtYXhXaWR0aDogdHlwZXMubnVtYmVyXG4gIH0sXG5cbiAgZGVmYXVsdFByb3BzOiB7XG4gICAgc3R5bGU6IHt9LFxuICAgIG1heFdpZHRoOiBBcFN0eWxlLkNPTlRFTlRfV0lEVEgsXG4gICAgaGlnaGxpZ2h0Q29sb3I6IEFwU3R5bGUuREVGQVVMVF9ISUdITElHSFRfQ09MT1JcbiAgfSxcblxuICBzdHlsZURhdGEgKGNvbmZpZykge1xuICAgIGxldCB7IGhpZ2hsaWdodENvbG9yLCBtYXhXaWR0aCB9ID0gY29uZmlnXG4gICAgcmV0dXJuIHtcbiAgICAgIGFsbDoge1xuICAgICAgICAnLmFwLXRleHQnOiB7XG4gICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgICBwYWRkaW5nOiAnNHB4IDhweCcsXG4gICAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICNBQUEnLFxuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgbWF4V2lkdGg6IGAke21heFdpZHRofXB4YCxcbiAgICAgICAgICBib3JkZXJSYWRpdXM6ICcycHgnLFxuICAgICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICAgIG91dGxpbmVDb2xvcjogYCR7aGlnaGxpZ2h0Q29sb3J9YCxcbiAgICAgICAgICBib3hTaGFkb3c6ICcxcHggMXB4IDFweCByZ2JhKDAsMCwwLC4wNSkgaW5zZXQnXG4gICAgICAgIH0sXG4gICAgICAgICcuYXAtdGV4dC13cmFwJzoge1xuICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgcGFkZGluZzogJzRweCcsXG4gICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnLFxuICAgICAgICAgIG1heFdpZHRoOiBgJHttYXhXaWR0aH1weGAsXG4gICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgICAgICB9LFxuICAgICAgICAnLmFwLXRleHQtbXVsdGlwbGUnOiB7XG4gICAgICAgICAgb3ZlcmZsb3c6ICdhdXRvJ1xuICAgICAgICB9LFxuICAgICAgICAnLmFwLXRleHQtY2FuZGlkYXRlLWxpc3QnOiB7XG4gICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgbGVmdDogMCxcbiAgICAgICAgICByaWdodDogJzFweCcsXG4gICAgICAgICAgdG9wOiAnMTAwJScsXG4gICAgICAgICAgekluZGV4OiA0LFxuICAgICAgICAgIHBhZGRpbmc6ICc0cHggMCcsXG4gICAgICAgICAgbWFyZ2luOiAnMCAxcHgnLFxuICAgICAgICAgIGJveFNoYWRvdzogJzFweCAxcHggMnB4IHJnYmEoMCwwLDAsMC4zMyknLFxuICAgICAgICAgIGJhY2tncm91bmQ6ICd3aGl0ZScsXG4gICAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCdcbiAgICAgICAgfSxcbiAgICAgICAgJy5hcC10ZXh0LWNhbmRpZGF0ZS1saXN0LWl0ZW0nOiB7XG4gICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJyxcbiAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgIG1hcmdpbjogMFxuICAgICAgICB9LFxuICAgICAgICAnLmFwLXRleHQtY2FuZGlkYXRlLWxpc3QtaXRlbSBhJzoge1xuICAgICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgICAgcGFkZGluZzogJzRweCA4cHgnXG4gICAgICAgIH0sXG4gICAgICAgICcuYXAtdGV4dC1jYW5kaWRhdGUtbGlzdC1pdGVtIGE6aG92ZXInOiB7XG4gICAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgICAgYmFja2dyb3VuZDogJyNGQUZBRkEnXG4gICAgICAgIH0sXG4gICAgICAgICcuYXAtdGV4dC1jYW5kaWRhdGUtbGlzdC1pdGVtIGE6YWN0aXZlJzoge1xuICAgICAgICAgIGJhY2tncm91bmQ6ICcjRjVGNUY1J1xuICAgICAgICB9LFxuICAgICAgICAnLmFwLXRleHQtY2FuZGlkYXRlLWxpc3QtaXRlbS1zZWxlY3RlZCBhJzoge1xuICAgICAgICAgIGJhY2tncm91bmQ6IGFscGhhKGhpZ2hsaWdodENvbG9yLCAwLjMzKVxuICAgICAgICB9LFxuICAgICAgICAnLmFwLXRleHQtY2FuZGlkYXRlLWxpc3QtaXRlbS1zZWxlY3RlZCBhOmhvdmVyJzoge1xuICAgICAgICAgIGJhY2tncm91bmQ6IGFscGhhKGhpZ2hsaWdodENvbG9yLCAwLjUpXG4gICAgICAgIH0sXG4gICAgICAgICcuYXAtdGV4dC1jYW5kaWRhdGUtbGlzdC1pdGVtLXNlbGVjdGVkIGE6YWN0aXZlJzoge1xuICAgICAgICAgIGJhY2tncm91bmQ6IGFscGhhKGhpZ2hsaWdodENvbG9yLCAwLjIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxufSlcbmV4cG9ydCBkZWZhdWx0IEFwVGV4dFN0eWxlXG4iXX0=