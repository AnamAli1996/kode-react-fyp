/**
 * Style for ApNotice.
 * @class ApNoticeStyle
 */

'use strict'

import React, {PropTypes as types} from 'react'
import {ApStyle} from 'apeman-react-style'
import {TRANSITION_DURATION} from './constants/style_constants'

/** @lends ApNoticeStyle */
const ApNoticeStyle = React.createClass({
  propTypes: {
    style: types.object,
    highlightColor: types.string
  },
  getDefaultProps () {
    return {
      style: {},
      highlightColor: ApStyle.DEFAULT_HIGHLIGHT_COLOR,
      backgroundColor: ApStyle.DEFAULT_BACKGROUND_COLOR,
      normalColor: ApStyle.NORMAL_COLOR,
      infoColor: ApStyle.INFO_COLOR,
      warnColor: ApStyle.WARN_COLOR,
      errorColor: ApStyle.ERROR_COLOR
    }
  },
  statics: {
    styleData (config) {
      let {
        highlightColor, backgroundColor,
        infoColor,
        warnColor,
        errorColor
      } = config
      let itemHeight = 32
      let vPadding = 4
      return {
        all: {
          '.ap-notice': {
            display: 'block',
            transition: `height ${TRANSITION_DURATION}ms`,
            overflow: 'hidden',
            fontSize: '12px',
            background: 'rgba(0,0,0,0.75)',
            color: 'white',
            position: 'relative'
          },
          '.ap-notice-spinner': {
            position: 'absolute',
            left: 0,
            right: 0,
            top: 0,
            bottom: 0,
            backgroundColor: 'rgba(255,255,255,0.5)',
            color: '#DDD',
            textAlign: 'center'
          },
          '.ap-notice-inner': {},
          '.ap-notice-item-inner': {
            display: 'flex',
            width: '100%',
            justifyContent: 'space-between',
            alignItems: 'center',
            boxSizing: 'border-box',
            padding: `${vPadding}px 8px`,
            margin: '0 auto',
            minHeight: `${itemHeight + vPadding * 2}px`
          },
          '.ap-notice-item': {
            display: 'block'
          },
          '.ap-notice-item-hidden': {
            display: 'none !important'
          },
          '.ap-notice-item-action': {
            whiteSpace: 'nowrap'
          },
          '.ap-notice-item-text': {
            fontStyle: 'italic'
          },
          '.ap-notice-item-button': {
            backgroundColor: 'transparent',
            height: `${itemHeight}px`,
            padding: '0 8px',
            margin: 0,
            lineHeight: `${itemHeight}px`,
            border: 'none'
          },
          '.ap-notice-item-info .ap-notice-item-button': {
            color: `${infoColor}`
          },
          '.ap-notice-item-warn .ap-notice-item-button': {
            color: `${warnColor}`
          },
          '.ap-notice-item-error .ap-notice-item-button': {
            color: `${errorColor}`
          },
          '.ap-notice-item-aligner': {
            display: 'inline-block',
            verticalAlign: 'middle',
            width: '1px',
            marginRight: '-1px',
            opacity: 0
          }
        }
      }
    }
  },
  render () {
    const s = this
    let { props } = s

    let { all, small, medium, large } = ApNoticeStyle.styleData(props)

    return (
      <ApStyle data={ Object.assign(all, props.style) }
               smallMediaData={ small }
               mediumMediaData={ medium }
               largeMediaData={ large }
      >{ props.children }</ApStyle>
    )
  }
})

export default ApNoticeStyle
