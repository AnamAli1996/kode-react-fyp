/**
 * apeman react package text component.
 * @class ApText
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _bwindow = require('bwindow');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApText */
var ApText = function (_Component) {
  (0, _inherits3.default)(ApText, _Component);

  // --------------------
  // Specs
  // --------------------
  function ApText(props) {
    (0, _classCallCheck3.default)(this, ApText);

    var _this = (0, _possibleConstructorReturn3.default)(this, (ApText.__proto__ || (0, _getPrototypeOf2.default)(ApText)).call(this, props));

    var s = _this;
    s.state = {
      suggesting: false,
      candidates: null,
      selectedCandidate: null
    };
    var methodsToBind = ['handleFocus', 'handleKeyUp', 'handleChange', 'handleBlur', 'handleKeyDown', 'handleCandidate'];
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = (0, _getIterator3.default)(methodsToBind), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var name = _step.value;

        s[name] = s[name].bind(s);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    s.handleClickForOutside = s.handleClickForOutside.bind(s);
    return _this;
  }

  (0, _createClass3.default)(ApText, [{
    key: 'render',
    value: function render() {
      var s = this;
      var state = s.state,
          props = s.props;
      var id = props.id,
          name = props.name,
          placeholder = props.placeholder,
          autoComplete = props.autoComplete,
          autoFocus = props.autoFocus,
          className = props.className,
          value = props.value,
          rows = props.rows;

      var hasVal = !!value;

      var multiline = rows && rows > 1;

      var candidates = state.candidates,
          selectedCandidate = state.selectedCandidate,
          suggesting = state.suggesting;


      var textHandlers = {
        onFocus: s.handleFocus,
        onKeyUp: s.handleKeyUp,
        onChange: s.handleChange,
        onBlur: s.handleBlur,
        onKeyDown: s.handleKeyDown
      };
      var candidateHandlers = {
        onClick: s.handleCandidate
      };

      return _react2.default.createElement(
        'span',
        { className: (0, _classnames2.default)('ap-text-wrap', { 'ap-text-wrap-empty': !hasVal }) },
        _react2.default.createElement(ApText.Text, (0, _extends3.default)({ id: id, name: name, value: value, placeholder: placeholder, className: className, autoFocus: autoFocus, autoComplete: autoComplete, multiline: multiline, rows: rows }, {
          handlers: textHandlers
        })),
        _react2.default.createElement(ApText.CandidateList, (0, _extends3.default)({ suggesting: suggesting, candidates: candidates, selectedCandidate: selectedCandidate, multiline: multiline }, {
          handlers: candidateHandlers
        }))
      );
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var s = this;
      var body = (0, _bwindow.get)('document.body');
      body.addEventListener('click', s.handleClickForOutside);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var s = this;
      var body = (0, _bwindow.get)('document.body');
      body.removeEventListener('click', s.handleClickForOutside);
    }

    // --------------------
    // Custom
    // --------------------

  }, {
    key: 'handleCandidate',
    value: function handleCandidate(e) {
      var s = this;
      var props = s.props;

      e.target.value = e.target.value || e.target.dataset.value;
      s.setState({ suggesting: false });
      if (props.onChange) {
        props.onChange(e);
      }
    }
  }, {
    key: 'handleFocus',
    value: function handleFocus(e) {
      var s = this;
      var props = s.props;

      s.setState({ suggesting: true });
      s.updateCandidates();
      if (props.onFocus) {
        props.onFocus(e);
      }
    }
  }, {
    key: 'handleChange',
    value: function handleChange(e) {
      var s = this;
      var props = s.props;

      s.setState({ suggesting: true });
      if (props.onChange) {
        props.onChange(e);
      }
    }
  }, {
    key: 'handleBlur',
    value: function handleBlur(e) {
      var s = this;
      var props = s.props;


      if (props.onBlur) {
        props.onBlur(e);
      }
    }
  }, {
    key: 'handleKeyUp',
    value: function handleKeyUp(e) {
      var s = this;
      var props = s.props;

      s.updateCandidates();
      if (props.onKeyUp) {
        props.onKeyUp(e);
      }
    }
  }, {
    key: 'handleClickForOutside',
    value: function handleClickForOutside(e) {
      var s = this;
      var node = _reactDom2.default.findDOMNode(s);
      if (!node) {
        return;
      }
      var contained = node.contains(e.target);
      if (!contained) {
        s.outsideDidTap(e);
      }
    }
  }, {
    key: 'outsideDidTap',
    value: function outsideDidTap(e) {
      var s = this;
      s.setState({ suggesting: false });
    }
  }, {
    key: 'handleKeyDown',
    value: function handleKeyDown(e) {
      var s = this;
      var props = s.props;

      switch (e.keyCode) {
        case 38:
          // UP
          s.moveCandidateIndex(-1);
          break;
        case 40:
          // DOWN
          s.moveCandidateIndex(+1);
          break;
        case 13:
          // Enter
          s.enterCandidate();
          if (props.onEnter) {
            props.onEnter();
          }
          break;
        default:
          s.setState({ suggesting: true });
          break;
      }
      if (props.onKeyDown) {
        props.onKeyDown(e);
      }
    }
  }, {
    key: 'moveCandidateIndex',
    value: function moveCandidateIndex(amount) {
      var s = this;
      var _s$state = s.state,
          candidates = _s$state.candidates,
          selectedCandidate = _s$state.selectedCandidate;

      if (!candidates) {
        return;
      }
      var index = candidates.indexOf(selectedCandidate) + amount;
      var over = index === -1 || index === candidates.length;
      if (over) {
        return;
      }
      s.setState({
        selectedCandidate: candidates[index] || null
      });
    }
  }, {
    key: 'updateCandidates',
    value: function updateCandidates() {
      var s = this;
      var props = s.props;
      var value = props.value;

      var candidates = (props.candidates || []).filter(function (candidate) {
        return !!candidate;
      }).map(function (candidate) {
        return String(candidate).trim();
      }).filter(function (candidate) {
        return !value || candidate.match(value);
      });

      var hit = candidates.length === 1 && candidates[0] === value;
      if (hit) {
        candidates = null;
      }
      s.setState({ candidates: candidates });
    }
  }, {
    key: 'enterCandidate',
    value: function enterCandidate() {
      var s = this;
      var props = s.props;
      var _s$state2 = s.state,
          candidates = _s$state2.candidates,
          selectedCandidate = _s$state2.selectedCandidate;

      var valid = candidates && !!~candidates.indexOf(selectedCandidate);
      if (valid) {
        var target = { value: selectedCandidate };
        if (props.onChange) {
          props.onChange({ target: target });
        }
        s.setState({ suggesting: false });
      }
    }

    // --------------------
    // Static methods
    // --------------------

  }], [{
    key: 'Text',
    value: function Text(_ref) {
      var id = _ref.id,
          name = _ref.name,
          value = _ref.value,
          placeholder = _ref.placeholder,
          autoComplete = _ref.autoComplete,
          className = _ref.className,
          autoFocus = _ref.autoFocus,
          multiline = _ref.multiline,
          handlers = _ref.handlers,
          rows = _ref.rows;

      if (multiline) {
        return _react2.default.createElement('textarea', (0, _extends3.default)({ autoFocus: autoFocus,
          id: id,
          name: name,
          rows: rows,
          placeholder: placeholder,
          className: (0, _classnames2.default)('ap-text ap-text-multiple', className),
          value: value
        }, handlers, {
          onFocus: null
        }));
      } else {
        return _react2.default.createElement('input', (0, _extends3.default)({ autoFocus: autoFocus,
          id: id,
          name: name,
          placeholder: placeholder,
          className: (0, _classnames2.default)('ap-text', className),
          value: value,
          autoComplete: autoComplete
        }, handlers, {
          type: 'text'
        }));
      }
    }
  }, {
    key: 'CandidateList',
    value: function CandidateList(_ref2) {
      var suggesting = _ref2.suggesting,
          candidates = _ref2.candidates,
          selectedCandidate = _ref2.selectedCandidate,
          multiline = _ref2.multiline,
          handlers = _ref2.handlers;

      if (!suggesting) {
        return null;
      }

      if (!candidates) {
        return null;
      }

      if (!candidates.length) {
        return null;
      }

      if (multiline) {
        console.warn('[ApText] Can not use candidates with multiline input.');
        return null;
      }

      return _react2.default.createElement(
        'ul',
        { className: 'ap-text-candidate-list' },
        candidates.map(function (candidate) {
          return _react2.default.createElement(
            'li',
            { key: candidate,
              className: (0, _classnames2.default)('ap-text-candidate-list-item', {
                'ap-text-candidate-list-item-selected': candidate === selectedCandidate
              }) },
            _react2.default.createElement(
              'a',
              (0, _extends3.default)({}, handlers, {
                'data-value': candidate }),
              candidate
            )
          );
        })
      );
    }
  }]);
  return ApText;
}(_react.Component);

(0, _assign2.default)(ApText, {
  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Name of text input */
    name: _react.PropTypes.string,
    /** Value of text input */
    value: _react.PropTypes.string,
    /** Placeholder text */
    placeholder: _react.PropTypes.string,
    /** Number of rows */
    rows: _react.PropTypes.number,
    /** Selectable candidate text */
    candidates: _react.PropTypes.arrayOf(_react.PropTypes.string),
    /** Callback for entry key press */
    onEnter: _react.PropTypes.func
  },

  defaultProps: {
    name: '',
    value: '',
    placeholder: '',
    rows: 1,
    candidates: null
  }

});

exports.default = ApText;
//# sourceMappingURL=data:application/json;base64,