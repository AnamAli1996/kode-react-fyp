/**
 * Style for ApSearch.
 * @class ApSearchStyle
 */

'use strict'

import React, {PropTypes as types} from 'react'
import {ApStyle} from 'apeman-react-style'

/** @lends ApSearchStyle */
const ApSearchStyle = React.createClass({
  propTypes: {
    style: types.object,
    highlightColor: types.string
  },
  getDefaultProps () {
    return {
      style: {},
      highlightColor: ApStyle.DEFAULT_HIGHLIGHT_COLOR,
      maxWidth: ApStyle.CONTENT_WIDTH,
      transition: 400
    }
  },
  statics: {
    styleData (config) {
      let { highlightColor, maxWidth, transition } = config

      let closedWidth = 24
      return {
        all: {
          '.ap-search': {
            display: 'block',
            padding: '4px 8px 4px 22px',
            border: '1px solid #AAA',
            width: '100%',
            maxWidth: `${maxWidth}px`,
            borderRadius: '2px',
            boxSizing: 'border-box',
            outlineColor: `${highlightColor}`,
            boxShadow: '1px 1px 1px rgba(0,0,0,.05) inset',
            transition: `opacity ${transition}ms`,
            transitionDelay: `${transition * 0.3}ms`
          },
          '.ap-search-wrap': {
            position: 'relative',
            width: '100%',
            margin: '4px',
            verticalAlign: 'middle',
            maxWidth: `${maxWidth}px`,
            display: 'block',
            transition: `width ${transition}ms, max-width ${transition}ms`
          },
          '.ap-search-wrap-empty .ap-search-clear-button': {
            opacity: 0,
            pointerEvents: 'none'
          },
          '.ap-search-search-button': {
            position: 'absolute',
            top: 0,
            left: -4,
            display: 'inline-flex',
            alignItems: 'center',
            padding: '0 8px',
            bottom: 0,
            cursor: 'pointer',
            color: '#CCC',
            zIndex: 4,
            transition: `color ${transition}ms, transform ${transition}ms`,
            transform: 'scale(1, 1)',
            transformOrigin: '50% 50%'
          },
          '.ap-search-search-button:active': {
            opacity: '0.9'
          },
          '.ap-search-search-icon': {
            display: 'inline-block',
            verticalAlign: 'middle'
          },
          '.ap-search-clear-button': {
            position: 'absolute',
            top: 0,
            right: -4,
            display: 'inline-flex',
            alignItems: 'center',
            padding: '0 8px',
            bottom: 0,
            cursor: 'pointer',
            opacity: 0.8,
            color: '#CCC'
          },
          '.ap-search-clear-button:hover': {
            opacity: 0.99
          },
          '.ap-search-clear-button:active': {
            opacity: 0.6
          },
          '.ap-search-aligner': {
            display: 'inline-block',
            verticalAlign: 'middle',
            width: '1px',
            marginRight: '-1px',
            height: '100%',
            boxSizing: 'border-box',
            opacity: 0
          },
          '.ap-search-clear-icon': {
            display: 'inline-block',
            verticalAlign: 'middle',
            fontSize: '11px',
            padding: '2px'
          },
          '.ap-search-wrap-closed': {
            width: `${closedWidth}px`,
            maxWidth: `${closedWidth}px`
          },
          '.ap-search-wrap-closed .ap-search-clear-icon': {
            display: 'none'
          },
          '.ap-search-wrap-closed .ap-search': {
            opacity: 0,
            transitionDelay: 0
          },
          '.ap-search-wrap-closed .ap-search-search-button': {
            color: `${highlightColor}`,
            transform: 'scale(1.2, 1.2)'
          },
          '.ap-search-wrap-closed .ap-search-search-button:hover': {
            color: `${highlightColor}`,
            transform: 'scale(1.4, 1.4)'
          },
          '.ap-search-wrap-righted': {
            margin: '0 0 0 auto'
          }
        }

      }
    }
  },
  render () {
    const s = this
    let { props } = s

    let { all, small, medium, large } = ApSearchStyle.styleData(props)

    return (
      <ApStyle data={ Object.assign(all, props.style) }
               smallMediaData={ small }
               mediumMediaData={ medium }
               largeMediaData={ large }
      >{ props.children }</ApStyle>
    )
  }
})

export default ApSearchStyle
