/**
 * Style for ApArticle.
 * @class ApArticleStyle
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _apemanReactStyle = require('apeman-react-style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** @lends ApArticleStyle */
var ApArticleStyle = function (_Component) {
  _inherits(ApArticleStyle, _Component);

  function ApArticleStyle() {
    _classCallCheck(this, ApArticleStyle);

    return _possibleConstructorReturn(this, (ApArticleStyle.__proto__ || Object.getPrototypeOf(ApArticleStyle)).apply(this, arguments));
  }

  _createClass(ApArticleStyle, [{
    key: 'render',
    value: function render() {
      var s = this;
      var props = s.props;

      var _ApArticleStyle$style = ApArticleStyle.styleData(props);

      var all = _ApArticleStyle$style.all;
      var small = _ApArticleStyle$style.small;
      var medium = _ApArticleStyle$style.medium;
      var large = _ApArticleStyle$style.large;


      return _react2.default.createElement(
        _apemanReactStyle.ApStyle,
        { data: Object.assign(all, props.style),
          smallMediaData: small,
          mediumMediaData: medium,
          largeMediaData: large
        },
        props.children
      );
    }
  }]);

  return ApArticleStyle;
}(_react.Component);

Object.assign(ApArticleStyle, {
  propTypes: {
    style: _react.PropTypes.object,
    highlightColor: _react.PropTypes.string
  },
  defaultProps: {
    style: {},
    highlightColor: _apemanReactStyle.ApStyle.DEFAULT_HIGHLIGHT_COLOR,
    backgroundColor: _apemanReactStyle.ApStyle.DEFAULT_BACKGROUND_COLOR
  },
  styleData: function styleData(config) {
    var highlightColor = config.highlightColor;
    var backgroundColor = config.backgroundColor;

    return {
      all: {
        '.ap-article': {
          padding: '16px 0'
        },
        '.ap-selectable-article-content': {
          display: 'none'
        },
        '.ap-selectable-article-header': {
          display: 'flex',
          alignItems: 'center'
        },
        '.ap-selectable-article-header .ap-label': {
          padding: '4px 8px 4px 0'
        },
        '.ap-selectable-article-body': {
          padding: '8px 0',
          boxSizing: 'border-box'
        },
        '.ap-selectable-article-alt': {
          display: 'block',
          textAlign: 'center',
          opacity: 0.3,
          padding: '16px 8px'
        }
      }
    };
  }
});

exports.default = ApArticleStyle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwX2FydGljbGVfc3R5bGUuanN4Il0sIm5hbWVzIjpbIkFwQXJ0aWNsZVN0eWxlIiwicyIsInByb3BzIiwic3R5bGVEYXRhIiwiYWxsIiwic21hbGwiLCJtZWRpdW0iLCJsYXJnZSIsIk9iamVjdCIsImFzc2lnbiIsInN0eWxlIiwiY2hpbGRyZW4iLCJwcm9wVHlwZXMiLCJvYmplY3QiLCJoaWdobGlnaHRDb2xvciIsInN0cmluZyIsImRlZmF1bHRQcm9wcyIsIkRFRkFVTFRfSElHSExJR0hUX0NPTE9SIiwiYmFja2dyb3VuZENvbG9yIiwiREVGQVVMVF9CQUNLR1JPVU5EX0NPTE9SIiwiY29uZmlnIiwicGFkZGluZyIsImRpc3BsYXkiLCJhbGlnbkl0ZW1zIiwiYm94U2l6aW5nIiwidGV4dEFsaWduIiwib3BhY2l0eSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBS0E7Ozs7Ozs7O0FBRUE7Ozs7QUFDQTs7Ozs7Ozs7OztBQUVBO0lBQ01BLGM7Ozs7Ozs7Ozs7OzZCQUNNO0FBQ1IsVUFBTUMsSUFBSSxJQUFWO0FBRFEsVUFFRkMsS0FGRSxHQUVRRCxDQUZSLENBRUZDLEtBRkU7O0FBQUEsa0NBSTRCRixlQUFlRyxTQUFmLENBQXlCRCxLQUF6QixDQUo1Qjs7QUFBQSxVQUlGRSxHQUpFLHlCQUlGQSxHQUpFO0FBQUEsVUFJR0MsS0FKSCx5QkFJR0EsS0FKSDtBQUFBLFVBSVVDLE1BSlYseUJBSVVBLE1BSlY7QUFBQSxVQUlrQkMsS0FKbEIseUJBSWtCQSxLQUpsQjs7O0FBTVIsYUFDRTtBQUFBO0FBQUEsVUFBUyxNQUFPQyxPQUFPQyxNQUFQLENBQWNMLEdBQWQsRUFBbUJGLE1BQU1RLEtBQXpCLENBQWhCO0FBQ1MsMEJBQWlCTCxLQUQxQjtBQUVTLDJCQUFrQkMsTUFGM0I7QUFHUywwQkFBaUJDO0FBSDFCO0FBSUdMLGNBQU1TO0FBSlQsT0FERjtBQU9EOzs7Ozs7QUFHSEgsT0FBT0MsTUFBUCxDQUFjVCxjQUFkLEVBQThCO0FBQzVCWSxhQUFXO0FBQ1RGLFdBQU8saUJBQU1HLE1BREo7QUFFVEMsb0JBQWdCLGlCQUFNQztBQUZiLEdBRGlCO0FBSzVCQyxnQkFBYztBQUNaTixXQUFPLEVBREs7QUFFWkksb0JBQWdCLDBCQUFRRyx1QkFGWjtBQUdaQyxxQkFBaUIsMEJBQVFDO0FBSGIsR0FMYztBQVU1QmhCLFdBVjRCLHFCQVVqQmlCLE1BVmlCLEVBVVQ7QUFBQSxRQUNYTixjQURXLEdBQ3lCTSxNQUR6QixDQUNYTixjQURXO0FBQUEsUUFDS0ksZUFETCxHQUN5QkUsTUFEekIsQ0FDS0YsZUFETDs7QUFFakIsV0FBTztBQUNMZCxXQUFLO0FBQ0gsdUJBQWU7QUFDYmlCLG1CQUFTO0FBREksU0FEWjtBQUlILDBDQUFrQztBQUNoQ0MsbUJBQVM7QUFEdUIsU0FKL0I7QUFPSCx5Q0FBaUM7QUFDL0JBLG1CQUFTLE1BRHNCO0FBRS9CQyxzQkFBWTtBQUZtQixTQVA5QjtBQVdILG1EQUEyQztBQUN6Q0YsbUJBQVM7QUFEZ0MsU0FYeEM7QUFjSCx1Q0FBK0I7QUFDN0JBLG1CQUFTLE9BRG9CO0FBRTdCRyxxQkFBVztBQUZrQixTQWQ1QjtBQWtCSCxzQ0FBOEI7QUFDNUJGLG1CQUFTLE9BRG1CO0FBRTVCRyxxQkFBVyxRQUZpQjtBQUc1QkMsbUJBQVMsR0FIbUI7QUFJNUJMLG1CQUFTO0FBSm1CO0FBbEIzQjtBQURBLEtBQVA7QUEyQkQ7QUF2QzJCLENBQTlCOztrQkEwQ2VyQixjIiwiZmlsZSI6ImFwX2FydGljbGVfc3R5bGUuanN4Iiwic291cmNlUm9vdCI6ImxpYiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3R5bGUgZm9yIEFwQXJ0aWNsZS5cbiAqIEBjbGFzcyBBcEFydGljbGVTdHlsZVxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBQcm9wVHlwZXMgYXMgdHlwZXMgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IEFwU3R5bGUgfSBmcm9tICdhcGVtYW4tcmVhY3Qtc3R5bGUnXG5cbi8qKiBAbGVuZHMgQXBBcnRpY2xlU3R5bGUgKi9cbmNsYXNzIEFwQXJ0aWNsZVN0eWxlIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIGxldCB7IHByb3BzIH0gPSBzXG5cbiAgICBsZXQgeyBhbGwsIHNtYWxsLCBtZWRpdW0sIGxhcmdlIH0gPSBBcEFydGljbGVTdHlsZS5zdHlsZURhdGEocHJvcHMpXG5cbiAgICByZXR1cm4gKFxuICAgICAgPEFwU3R5bGUgZGF0YT17IE9iamVjdC5hc3NpZ24oYWxsLCBwcm9wcy5zdHlsZSkgfVxuICAgICAgICAgICAgICAgc21hbGxNZWRpYURhdGE9eyBzbWFsbCB9XG4gICAgICAgICAgICAgICBtZWRpdW1NZWRpYURhdGE9eyBtZWRpdW0gfVxuICAgICAgICAgICAgICAgbGFyZ2VNZWRpYURhdGE9eyBsYXJnZSB9XG4gICAgICA+eyBwcm9wcy5jaGlsZHJlbiB9PC9BcFN0eWxlPlxuICAgIClcbiAgfVxufVxuXG5PYmplY3QuYXNzaWduKEFwQXJ0aWNsZVN0eWxlLCB7XG4gIHByb3BUeXBlczoge1xuICAgIHN0eWxlOiB0eXBlcy5vYmplY3QsXG4gICAgaGlnaGxpZ2h0Q29sb3I6IHR5cGVzLnN0cmluZ1xuICB9LFxuICBkZWZhdWx0UHJvcHM6IHtcbiAgICBzdHlsZToge30sXG4gICAgaGlnaGxpZ2h0Q29sb3I6IEFwU3R5bGUuREVGQVVMVF9ISUdITElHSFRfQ09MT1IsXG4gICAgYmFja2dyb3VuZENvbG9yOiBBcFN0eWxlLkRFRkFVTFRfQkFDS0dST1VORF9DT0xPUlxuICB9LFxuICBzdHlsZURhdGEgKGNvbmZpZykge1xuICAgIGxldCB7IGhpZ2hsaWdodENvbG9yLCBiYWNrZ3JvdW5kQ29sb3IgfSA9IGNvbmZpZ1xuICAgIHJldHVybiB7XG4gICAgICBhbGw6IHtcbiAgICAgICAgJy5hcC1hcnRpY2xlJzoge1xuICAgICAgICAgIHBhZGRpbmc6ICcxNnB4IDAnXG4gICAgICAgIH0sXG4gICAgICAgICcuYXAtc2VsZWN0YWJsZS1hcnRpY2xlLWNvbnRlbnQnOiB7XG4gICAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICAgIH0sXG4gICAgICAgICcuYXAtc2VsZWN0YWJsZS1hcnRpY2xlLWhlYWRlcic6IHtcbiAgICAgICAgICBkaXNwbGF5OiAnZmxleCcsXG4gICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcidcbiAgICAgICAgfSxcbiAgICAgICAgJy5hcC1zZWxlY3RhYmxlLWFydGljbGUtaGVhZGVyIC5hcC1sYWJlbCc6IHtcbiAgICAgICAgICBwYWRkaW5nOiAnNHB4IDhweCA0cHggMCdcbiAgICAgICAgfSxcbiAgICAgICAgJy5hcC1zZWxlY3RhYmxlLWFydGljbGUtYm9keSc6IHtcbiAgICAgICAgICBwYWRkaW5nOiAnOHB4IDAnLFxuICAgICAgICAgIGJveFNpemluZzogJ2JvcmRlci1ib3gnXG4gICAgICAgIH0sXG4gICAgICAgICcuYXAtc2VsZWN0YWJsZS1hcnRpY2xlLWFsdCc6IHtcbiAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgICAgb3BhY2l0eTogMC4zLFxuICAgICAgICAgIHBhZGRpbmc6ICcxNnB4IDhweCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSlcblxuZXhwb3J0IGRlZmF1bHQgQXBBcnRpY2xlU3R5bGVcbiJdfQ==