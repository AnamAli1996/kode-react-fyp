/**
 * iframe components with marker.
 * @class ApMarkableFrame
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _asobj = require('asobj');

var _apemanReactMixinLayout = require('apeman-react-mixin-layout');

var _ap_frame = require('./ap_frame');

var _ap_frame2 = _interopRequireDefault(_ap_frame);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var markerKey = function markerKey(selector, i) {
  return [selector, i].join('-');
};

/** @lends ApMarkableFrame */
var ApMarkableFrame = _react2.default.createClass({
  displayName: 'ApMarkableFrame',


  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Selector for detectable elements */
    detectableSelector: _react.PropTypes.string,
    /** Handler for detection */
    onDetect: _react.PropTypes.func,
    /** Selector for highlight */
    highlightSelector: _react.PropTypes.string,
    /** Handler for tap on markable */
    onMarkableTap: _react.PropTypes.func,
    /** Handler for hover-in on markable */
    onMarkableHoverIn: _react.PropTypes.func,
    /** Handler for hover-out on markable */
    onMarkableHoverOut: _react.PropTypes.func
  },

  mixins: [_apemanReactMixinLayout.ApLayoutMixin],

  statics: {},

  getInitialState: function getInitialState() {
    var s = this;
    var props = s.props;

    return {
      detected: null,
      highlighted: null
    };
  },
  getDefaultProps: function getDefaultProps() {
    return {};
  },
  render: function render() {
    var s = this;
    var state = s.state;
    var props = s.props;
    var detected = state.detected;

    var className = (0, _classnames2.default)('ap-frame', 'ap-markable-frame', props.className);
    return _react2.default.createElement(
      _ap_frame2.default,
      _extends({}, props, {
        className: className,
        onLoad: s.handleLoad }),
      Object.keys(detected || {}).map(function (selector) {
        return s._renderMarkable(selector, detected[selector] || []);
      })
    );
  },


  // --------------------
  // Lifecycle
  // --------------------

  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    var s = this;
    var props = s.props;
    var state = s.state;

    return !(0, _asobj.shallowEqual)(props, nextProps) || !(0, _asobj.shallowEqual)(state, nextState);
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var s = this;
    var props = s.props;


    var highlightChanged = props.highlightSelector !== nextProps.highlightSelector;
    if (highlightChanged) {
      var highlighted = s.queryMarkables(props.highlightSelector);
      s.setState({ highlighted: highlighted });
      s.layout();
    }
  },


  // ------------------
  // Custom
  // ------------------

  handleLoad: function handleLoad(e) {
    var s = this;
    var props = s.props;

    s.iframe = e.target;

    if (props.onLoad) {
      props.onLoad(e);
    }

    var markables = s.queryMarkables(props.detectableSelector);
    s.setState({ detected: markables });
    if (props.onDetect) {
      props.onDetect({ markables: markables });
    }
  },
  getContentBody: function getContentBody() {
    var s = this;
    var iframe = s.iframe;

    if (!iframe) {
      return null;
    }
    var contentDocument = iframe.contentDocument || iframe.contentWindow && iframe.contentWindow.document;
    if (!contentDocument) {
      return null;
    }
    return contentDocument.body;
  },
  queryMarkables: function queryMarkables(selector) {
    var s = this;
    var body = s.getContentBody();
    if (!body) {
      return null;
    }
    if (!selector) {
      return null;
    }
    return (selector || '').split(',').map(function (selector) {
      return selector.trim();
    }).reduce(function (items, selector) {
      return Object.assign(items, _defineProperty({}, selector, [].concat(_toConsumableArray(body.querySelectorAll(selector)))));
    }, {});
  },


  // ------------------
  // For ApLayoutMixin
  // ------------------
  getInitialLayouts: function getInitialLayouts() {
    return {
      markables: {}
    };
  },
  calcLayouts: function calcLayouts() {
    var s = this;
    var props = s.props;
    var state = s.state;

    var markables = {};
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = Object.keys(state.detected || {})[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var selector = _step.value;

        var elms = state.detected[selector];
        for (var i = 0; i < elms.length; i++) {
          var elm = elms[i];
          var key = markerKey(selector, i);

          var _elm$getBoundingClien = elm.getBoundingClientRect();

          var top = _elm$getBoundingClien.top;
          var left = _elm$getBoundingClien.left;
          var width = _elm$getBoundingClien.width;
          var height = _elm$getBoundingClien.height;

          markables[key] = { top: top, left: left, width: width, height: height };
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return {
      markables: markables
    };
  },


  // ------------------
  // Private
  // ------------------

  _renderMarkable: function _renderMarkable(selector, elms) {
    var s = this;
    var layouts = s.layouts;

    return _react2.default.createElement(
      'div',
      { className: 'ap-markable-frame-markable',
        'data-ap-markable-slector': selector,
        key: selector },
      elms.map(function (elm, i) {
        var key = markerKey(selector, i);
        var style = layouts.markables[key];
        return _react2.default.createElement('div', { className: 'ap-markable-frame-markable-item',
          'data-ap-markable-key': key,
          key: key,
          style: style
        });
      })
    );
  }
});

exports.default = ApMarkableFrame;
//# sourceMappingURL=data:application/json;base64,