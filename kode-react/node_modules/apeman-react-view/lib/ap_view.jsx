/**
 * View component.
 * @class ApView
 */

'use strict'

import React, { Component, PropTypes as types } from 'react'
import classnames from 'classnames'
import { spinalcase } from 'stringcase'
import { clone } from 'asobj'
import { withSpin } from 'apeman-react-spinner'

const noop = () => undefined

/** @lends ApView */
class ApView extends Component {
  render () {
    const s = this
    let { props } = s
    let { way } = props
    let className = classnames('ap-view', `ap-view-way-${spinalcase(way)}`, {
      'ap-view-wide': !!props.wide,
      'ap-view-headerless': !!props.headerless
    }, props.className)
    let divProps = clone(props, {
      without: [ 'wide', 'headerless', 'way', 'spinner', 'onMount', 'onUnmount' ]
    })
    return (
      <div { ...divProps }
           className={ className }
           style={ Object.assign({}, props.style) }
      >
        <div className='ap-view-inner'>
          { props.children }
          { props.spinner }
        </div>
      </div>
    )
  }

  componentDidMount () {
    const s = this
    let { props } = s
    let { onMount = noop } = props

    onMount()
  }

  componentWillUnmount () {
    const s = this
    let { props } = s
    let { onUnmount = noop } = props

    onUnmount()
  }
}

Object.assign(ApView, {
  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Wide style */
    wide: types.bool,
    /** Hide header */
    headerless: types.bool,
    way: types.oneOf([
      'NONE',
      'PUSH_LEFT',
      'PULL_UP',
      'FADE_IN'
    ]),
    /** Handle for on mount */
    onMount: types.func,

    /** Handle for on unmount */
    onUnmount: types.func
  },

  defaultProps: {
    wide: false,
    way: 'PUSH_LEFT'
  }

})

export default withSpin(ApView)

