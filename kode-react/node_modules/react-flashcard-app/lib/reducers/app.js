'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _modelsDeck = require('../models/deck');

var _modelsDeck2 = _interopRequireDefault(_modelsDeck);

var app = function app(state, action) {
  if (state === undefined) state = {};

  var cardIndex = undefined;
  var removed = undefined;
  var deck = undefined;
  switch (action.type) {
    case 'TOGGLE_DECK_SELECT':
      return _extends({}, state, { deckSelectActive: !state.deckSelectActive });
    case 'INIT_APP':
      deck = new _modelsDeck2['default'](action.data.data);
      return _extends({}, state, {
        deck: deck,
        removed: action.data.removed,
        deckIndex: action.data.data.id,
        cardIndex: deck.first(action.data.removed)
      });
    case 'SELECT_DECK':
      return _extends({}, state, {
        deck: action.deck,
        removed: action.removed,
        deckIndex: action.id,
        cardIndex: action.deck.first(action.removed),
        deckSelectActive: false
      });
    case 'RESET':
      return _extends({}, state, { cardIndex: 0, removed: [] });
    case 'REMOVE_CARD':
      if (state.deck.length - state.removed.length > 0) {
        removed = state.removed.concat([]);
        removed.push(state.deck.idByIndex(state.cardIndex));
        cardIndex = state.deck.getNext(state.cardIndex, removed);
        return _extends({}, state, { cardIndex: cardIndex, removed: removed });
      }
      return state;
    case 'UNDO_REMOVE':
      if (state.removed.length > 0) {
        removed = state.removed.concat([]);
        cardIndex = state.deck.indexById(removed.pop());
        return _extends({}, state, { cardIndex: cardIndex, removed: removed });
      }
      return state;
    case 'INCREMENT':
      if (state.deck.length - state.removed.length > 1) {
        cardIndex = state.deck.getNext(state.cardIndex, state.removed);
        return _extends({}, state, { cardIndex: cardIndex });
      }
      return state;
    case 'DECREMENT':
      if (state.deck.length - state.removed.length > 1) {
        cardIndex = state.deck.getNext(state.cardIndex, state.removed, -1);
        return _extends({}, state, { cardIndex: cardIndex });
      }
      return state;
    case 'SHUFFLE':
      if (state.deck.length - state.removed.length > 1) {
        state.deck.shuffle();
        cardIndex = state.deck.first(state.removed);
        return _extends({}, state, { cardIndex: cardIndex });
      }
      return state;
    default:
      return state;
  }
};

exports['default'] = app;
module.exports = exports['default'];