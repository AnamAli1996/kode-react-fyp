/**
 * apeman react package for scroll components.
 * @class ApScroll
 */

'use strict'

import React, {PropTypes as types} from 'react'
import ReactDOM from 'react-dom'
import classnames from 'classnames'
import uuid from 'uuid'
import {ApResizeMixin} from 'apeman-react-mixin-resize'

let noop = (e) => undefined

/** @lends ApScroll */
const ApScroll = React.createClass({

  // --------------------
  // Specs
  // --------------------

  propTypes: {
    direction: types.oneOf([
      'x',
      'y',
      'xy'
    ]),
    showScrollbars: types.bool,
    disableMouseWheel: types.bool,
    iScrollRef: types.func,
    onScrollCancel: types.func,
    onScrollStart: types.func,
    onScroll: types.func,
    onScrollEnd: types.func,
    onFlick: types.func
  },

  mixins: [
    ApResizeMixin
  ],

  statics: {
    refreshIScroll (iScroll, delay) {
      let timer = setTimeout(() => {
        if (iScroll) {
          iScroll.refresh()
        }
      }, delay || 0)
      return () => clearTimeout(timer)
    }
  },

  getInitialState () {
    return {}
  },

  getDefaultProps () {
    return {
      id: `ap-scroll-${uuid.v4()}`,
      direction: 'y',
      showScrollbars: false,
      disableMouseWheel: false,
      iScrollRef: noop,
      onScrollCancel: noop,
      onScrollStart: noop,
      onScroll: noop,
      onScrollEnd: noop,
      onFlick: noop
    }
  },

  render () {
    const s = this
    let { state, props } = s
    return (
      <div id={ props.id }
           className={ classnames('ap-scroll', props.className) }
           style={ Object.assign({}, props.style) }
      >
        { props.children }
      </div>
    )
  },

  // --------------------
  // Lifecycle
  // --------------------

  componentDidMount () {
    const IScroll = require('iscroll/build/iscroll-probe.js')
    const s = this
    let { props } = s
    let { direction, iScrollRef } = props

    setTimeout(() => {
      let isMounted = s.isMounted()
      if (!isMounted) {
        return
      }
      let iScroll = new IScroll(ReactDOM.findDOMNode(s), {
        mouseWheel: !props.disableMouseWheel,
        probeType: 2,
        showScrollbars: props.showScrollbars,
        scrollX: /x/.test(direction),
        scrollY: /y/.test(direction)
      })
      let listeners = s._getEventListeners()
      for (let event of Object.keys(listeners)) {
        iScroll.on(event, listeners[ event ])
      }
      s._iScroll = iScroll

      if (props.onIScrollInit) {
        console.warn('[ApScroll] onIScrollInit is now deprecated. Use onIScrollInit instead.')
        const { Event } = window
        let e = new Event('ap:scroll:init')
        props.onIScrollInit(Object.assign(e, { iScroll }))
      }

      if (iScrollRef) {

      }
      iScrollRef(iScroll)

      s.refreshIScroll(10) // Make sure scroll works.
    }, 0)
  },

  componentWillUnmount () {
    const s = this
    let iScroll = s._iScroll

    if (s._cancelRefresh) {
      s._cancelRefresh()
    }
    if (iScroll) {
      let listeners = s._getEventListeners()
      for (let event of Object.keys(listeners)) {
        iScroll.on(event, listeners[ event ])
      }
      iScroll.destroy()
    }
  },

  // ------------------
  // For ApResizeMixin
  // ------------------

  windowDidResize (e) {
    const s = this

    s.refreshIScroll(0)
  },

  // ------------------
  // Custom
  // ------------------

  refreshIScroll (delay) {
    const s = this
    s._cancelRefresh = ApScroll.refreshIScroll(s._iScroll, delay)
  },

  // ------------------
  // Private
  // ------------------

  _iScroll: null,

  _getEventListeners () {
    const s = this
    let { props } = s
    let listeners = {
      'scrollCancel': props.onScrollCancel,
      'scrollStart': props.onScrollStart,
      'scroll': props.onScroll,
      'scrollEnd': props.onScrollEnd,
      'flick': props.onFlick
    }
    for (let event of Object.keys(listeners)) {
      if (!listeners[ event ]) {
        delete listeners[ event ]
      }
    }
    return listeners
  },
  _cancelRefresh: null

})

export default ApScroll
