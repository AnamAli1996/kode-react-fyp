/**
 * Item of info.
 * @class ApInfoItem
 */

'use strict'

import React, { PropTypes as types } from 'react'
import classnames from 'classnames'
import { ApPureMixin } from 'apeman-react-mixin-pure'
import { withTouch } from 'apeman-react-touchable'
import { ApIcon } from 'apeman-react-icon'

/** @lends ApInfoItem */
const ApInfoItem = React.createClass({

  // --------------------
  // Specs
  // --------------------

  propTypes: {
    label: types.string,
    value: types.oneOfType([
      types.string,
      types.number,
      types.node
    ]),
    unit: types.string,
    icon: types.string,
    link: types.oneOfType([
      types.string,
      types.func
    ]),
    linkText: types.string
  },

  mixins: [
    ApPureMixin
  ],

  statics: {
    OPEN_ICON: 'fa fa-angle-down',
    CLOSE_ICON: 'fa fa-angle-right',
    NEXT_ICON: 'fa fa-angle-right',
    PREV_ICON: 'fa fa-angle-left'
  },

  getInitialState () {
    return {}
  },

  getDefaultProps () {
    return {
      icon: null,
      label: null,
      value: null,
      link: null,
      linkText: null,
      unit: null
    }
  },

  render () {
    const s = this
    let { state, props } = s
    let className = classnames('ap-info-item', {
      'ap-info-item-tappable': !!props.React
    }, props.className)
    let { label, value, unit, link, linkText, icon } = props
    return (
      <div className={ className }
           style={ Object.assign({}, props.style) }>
        { label ? s.renderLabel(label) : null }
        { props.children }
        <div className='ap-info-item-value'>
          { (link && linkText) ? s.renderValueText(value) : null }
          { link ? s.renderValueLink(linkText || value, link) : s.renderValueText(value) }
          { unit ? <small className='ap-info-item-unit'>{ unit }</small> : null }
          { icon ? s.renderIcon(icon) : null }
        </div>
      </div>
    )
  },

  // --------------------
  // Lifecycle
  // --------------------

  // ------------------
  // Custom
  // ------------------

  // ------------------
  // Private
  // ------------------
  renderLabel (label) {
    const s = this
    return (
      <div className='ap-info-item-label'>
        { label }
      </div>
    )
  },

  renderValueText (text) {
    return (
      <span className='ap-info-item-value-text'>{ text }</span>
    )
  },

  renderValueLink (text, link) {
    const s = this
    if (typeof link === 'function') {
      return (
        <a className='ap-info-item-link' href='javascript:void(0)'
           onClick={ link }>{ text }</a>
      )
    } else {
      return (
        <a className='ap-info-item-link' href={ link }>{ text }</a>
      )
    }
  },

  renderIcon (icon) {
    const s = this
    return (
      <ApIcon className={ classnames(icon, 'ap-info-item-icon') }/>
    )
  }
})

export default withTouch(ApInfoItem)
