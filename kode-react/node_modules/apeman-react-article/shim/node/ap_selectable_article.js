/**
 * Article with selections
 * @class ApSelectableArticle
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _apemanReactStyle = require('apeman-react-style');

var _apemanReactSelect = require('apeman-react-select');

var _apemanReactLabel = require('apeman-react-label');

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** @lends ApSelectableArticle */
var ApSelectableArticle = _react2.default.createClass({
  displayName: 'ApSelectableArticle',


  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Label */
    label: _react.PropTypes.string,
    /** Article id */
    id: _react.PropTypes.string,
    /** Name of select */
    name: _react.PropTypes.string,
    /** Value of select */
    value: _react.PropTypes.string,
    /** Placeholder of select */
    placeholder: _react.PropTypes.string,
    /** Select options */
    options: _react.PropTypes.object,
    /** Alt messages */
    alt: _react.PropTypes.string
  },

  mixins: [],

  statics: {
    Content: _react2.default.createClass({
      displayName: 'Content',

      propTypes: {
        /** Select option value */
        contentFor: _react.PropTypes.string.isRequired
      },
      render: function render() {
        var s = this;
        var props = s.props;

        var className = (0, _classnames2.default)('ap-selectable-article-content', 'ap-selectable-article-content-' + props.contentFor);

        return _react2.default.createElement(
          'div',
          { className: className },
          props.children
        );
      }
    })
  },

  getInitialState: function getInitialState() {
    return {};
  },
  getDefaultProps: function getDefaultProps() {
    return {};
  },
  render: function render() {
    var s = this;
    var state = s.state;
    var props = s.props;
    var label = props.label;
    var value = props.value;
    var alt = props.alt;
    var _props$id = props.id;
    var id = _props$id === undefined ? 'ap-selectable-article-' + s.uuid : _props$id;

    var select = ['id', 'name', 'placeholder', 'options', 'value', 'onChange', 'multiple'].reduce(function (select, name) {
      return Object.assign(select, _defineProperty({}, name, props[name]));
    }, {});
    select.id = id + '-select';
    return _react2.default.createElement(
      'article',
      { className: (0, _classnames2.default)('ap-selectable-article', props.className),
        id: id,
        style: Object.assign({}, props.style) },
      _react2.default.createElement(
        _apemanReactStyle.ApStyle,
        { className: 'ap-selectable-article-dynamic-style'
        },
        '#' + id + ' .ap-selectable-article-content-' + value + ' { display: block; }'
      ),
      _react2.default.createElement(
        'div',
        { className: 'ap-selectable-article-header' },
        _react2.default.createElement(
          _apemanReactLabel.ApLabel,
          { htmlFor: select.id },
          label ? label : null
        ),
        _react2.default.createElement(_apemanReactSelect.ApSelect, select)
      ),
      _react2.default.createElement(
        'div',
        { className: 'ap-selectable-article-body' },
        value ? null : _react2.default.createElement(
          'div',
          { className: 'ap-selectable-article-alt' },
          alt
        ),
        props.children
      )
    );
  },


  // --------------------
  // Lifecycle
  // --------------------

  componentDidMount: function componentDidMount() {
    var s = this;
    s.uuid = _uuid2.default.v4();
  }

  // ------------------
  // Custom
  // ------------------

  // ------------------
  // Private
  // ------------------

});

exports.default = ApSelectableArticle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwX3NlbGVjdGFibGVfYXJ0aWNsZS5qc3giXSwibmFtZXMiOlsiQXBTZWxlY3RhYmxlQXJ0aWNsZSIsImNyZWF0ZUNsYXNzIiwicHJvcFR5cGVzIiwibGFiZWwiLCJzdHJpbmciLCJpZCIsIm5hbWUiLCJ2YWx1ZSIsInBsYWNlaG9sZGVyIiwib3B0aW9ucyIsIm9iamVjdCIsImFsdCIsIm1peGlucyIsInN0YXRpY3MiLCJDb250ZW50IiwiY29udGVudEZvciIsImlzUmVxdWlyZWQiLCJyZW5kZXIiLCJzIiwicHJvcHMiLCJjbGFzc05hbWUiLCJjaGlsZHJlbiIsImdldEluaXRpYWxTdGF0ZSIsImdldERlZmF1bHRQcm9wcyIsInN0YXRlIiwidXVpZCIsInNlbGVjdCIsInJlZHVjZSIsIk9iamVjdCIsImFzc2lnbiIsInN0eWxlIiwiY29tcG9uZW50RGlkTW91bnQiLCJ2NCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBS0E7Ozs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7QUFFQTtBQUNBLElBQU1BLHNCQUFzQixnQkFBTUMsV0FBTixDQUFrQjtBQUFBOzs7QUFFNUM7QUFDQTtBQUNBOztBQUVBQyxhQUFXO0FBQ1Q7QUFDQUMsV0FBTyxpQkFBTUMsTUFGSjtBQUdUO0FBQ0FDLFFBQUksaUJBQU1ELE1BSkQ7QUFLVDtBQUNBRSxVQUFNLGlCQUFNRixNQU5IO0FBT1Q7QUFDQUcsV0FBTyxpQkFBTUgsTUFSSjtBQVNUO0FBQ0FJLGlCQUFhLGlCQUFNSixNQVZWO0FBV1Q7QUFDQUssYUFBUyxpQkFBTUMsTUFaTjtBQWFUO0FBQ0FDLFNBQUssaUJBQU1QO0FBZEYsR0FOaUM7O0FBdUI1Q1EsVUFBUSxFQXZCb0M7O0FBeUI1Q0MsV0FBUztBQUNQQyxhQUFTLGdCQUFNYixXQUFOLENBQWtCO0FBQUE7O0FBQ3pCQyxpQkFBVztBQUNUO0FBQ0FhLG9CQUFZLGlCQUFNWCxNQUFOLENBQWFZO0FBRmhCLE9BRGM7QUFLekJDLFlBTHlCLG9CQUtmO0FBQ1IsWUFBTUMsSUFBSSxJQUFWO0FBRFEsWUFFRkMsS0FGRSxHQUVRRCxDQUZSLENBRUZDLEtBRkU7O0FBR1IsWUFBSUMsWUFBWSwwQkFDZCwrQkFEYyxxQ0FFbUJELE1BQU1KLFVBRnpCLENBQWhCOztBQUtBLGVBQ0U7QUFBQTtBQUFBLFlBQUssV0FBWUssU0FBakI7QUFDSUQsZ0JBQU1FO0FBRFYsU0FERjtBQUtEO0FBbEJ3QixLQUFsQjtBQURGLEdBekJtQzs7QUFnRDVDQyxpQkFoRDRDLDZCQWdEekI7QUFDakIsV0FBTyxFQUFQO0FBQ0QsR0FsRDJDO0FBb0Q1Q0MsaUJBcEQ0Qyw2QkFvRHpCO0FBQ2pCLFdBQU8sRUFBUDtBQUNELEdBdEQyQztBQXdENUNOLFFBeEQ0QyxvQkF3RGxDO0FBQ1IsUUFBTUMsSUFBSSxJQUFWO0FBRFEsUUFFRk0sS0FGRSxHQUVlTixDQUZmLENBRUZNLEtBRkU7QUFBQSxRQUVLTCxLQUZMLEdBRWVELENBRmYsQ0FFS0MsS0FGTDtBQUFBLFFBSU5oQixLQUpNLEdBUUpnQixLQVJJLENBSU5oQixLQUpNO0FBQUEsUUFLTkksS0FMTSxHQVFKWSxLQVJJLENBS05aLEtBTE07QUFBQSxRQU1OSSxHQU5NLEdBUUpRLEtBUkksQ0FNTlIsR0FOTTtBQUFBLG9CQVFKUSxLQVJJLENBT05kLEVBUE07QUFBQSxRQU9OQSxFQVBNLHdEQU93QmEsRUFBRU8sSUFQMUI7O0FBU1IsUUFBSUMsU0FBUyxDQUFFLElBQUYsRUFBUSxNQUFSLEVBQWdCLGFBQWhCLEVBQStCLFNBQS9CLEVBQTBDLE9BQTFDLEVBQW1ELFVBQW5ELEVBQStELFVBQS9ELEVBQTRFQyxNQUE1RSxDQUFtRixVQUFDRCxNQUFELEVBQVNwQixJQUFUO0FBQUEsYUFDOUZzQixPQUFPQyxNQUFQLENBQWNILE1BQWQsc0JBQXlCcEIsSUFBekIsRUFBZ0NhLE1BQU9iLElBQVAsQ0FBaEMsRUFEOEY7QUFBQSxLQUFuRixFQUN1QyxFQUR2QyxDQUFiO0FBR0FvQixXQUFPckIsRUFBUCxHQUFlQSxFQUFmO0FBQ0EsV0FDRTtBQUFBO0FBQUEsUUFBUyxXQUFZLDBCQUFXLHVCQUFYLEVBQW9DYyxNQUFNQyxTQUExQyxDQUFyQjtBQUNTLFlBQUtmLEVBRGQ7QUFFUyxlQUFPdUIsT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JWLE1BQU1XLEtBQXhCLENBRmhCO0FBR0U7QUFBQTtBQUFBLFVBQVMsV0FBVTtBQUFuQjtBQUFBLGNBQ016QixFQUROLHdDQUMyQ0UsS0FEM0M7QUFBQSxPQUhGO0FBS0U7QUFBQTtBQUFBLFVBQUssV0FBVSw4QkFBZjtBQUNFO0FBQUE7QUFBQSxZQUFTLFNBQVVtQixPQUFPckIsRUFBMUI7QUFBaUNGLGtCQUFRQSxLQUFSLEdBQWdCO0FBQWpELFNBREY7QUFFRSxtRUFBZXVCLE1BQWY7QUFGRixPQUxGO0FBU0U7QUFBQTtBQUFBLFVBQUssV0FBVSw0QkFBZjtBQUNJbkIsZ0JBQVEsSUFBUixHQUFlO0FBQUE7QUFBQSxZQUFLLFdBQVUsMkJBQWY7QUFBNkNJO0FBQTdDLFNBRG5CO0FBRUlRLGNBQU1FO0FBRlY7QUFURixLQURGO0FBZ0JELEdBckYyQzs7O0FBdUY1QztBQUNBO0FBQ0E7O0FBRUFVLG1CQTNGNEMsK0JBMkZ2QjtBQUNuQixRQUFNYixJQUFJLElBQVY7QUFDQUEsTUFBRU8sSUFBRixHQUFTLGVBQUtPLEVBQUwsRUFBVDtBQUNEOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBdEc0QyxDQUFsQixDQUE1Qjs7a0JBeUdlaEMsbUIiLCJmaWxlIjoiYXBfc2VsZWN0YWJsZV9hcnRpY2xlLmpzeCIsInNvdXJjZVJvb3QiOiJsaWIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFydGljbGUgd2l0aCBzZWxlY3Rpb25zXG4gKiBAY2xhc3MgQXBTZWxlY3RhYmxlQXJ0aWNsZVxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgUmVhY3QsIHsgUHJvcFR5cGVzIGFzIHR5cGVzIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJ1xuaW1wb3J0IHsgQXBTdHlsZSB9IGZyb20gJ2FwZW1hbi1yZWFjdC1zdHlsZSdcbmltcG9ydCB7IEFwU2VsZWN0IH0gZnJvbSAnYXBlbWFuLXJlYWN0LXNlbGVjdCdcbmltcG9ydCB7IEFwTGFiZWwgfSBmcm9tICdhcGVtYW4tcmVhY3QtbGFiZWwnXG5pbXBvcnQgdXVpZCBmcm9tICd1dWlkJ1xuXG4vKiogQGxlbmRzIEFwU2VsZWN0YWJsZUFydGljbGUgKi9cbmNvbnN0IEFwU2VsZWN0YWJsZUFydGljbGUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gU3BlY3NcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBwcm9wVHlwZXM6IHtcbiAgICAvKiogTGFiZWwgKi9cbiAgICBsYWJlbDogdHlwZXMuc3RyaW5nLFxuICAgIC8qKiBBcnRpY2xlIGlkICovXG4gICAgaWQ6IHR5cGVzLnN0cmluZyxcbiAgICAvKiogTmFtZSBvZiBzZWxlY3QgKi9cbiAgICBuYW1lOiB0eXBlcy5zdHJpbmcsXG4gICAgLyoqIFZhbHVlIG9mIHNlbGVjdCAqL1xuICAgIHZhbHVlOiB0eXBlcy5zdHJpbmcsXG4gICAgLyoqIFBsYWNlaG9sZGVyIG9mIHNlbGVjdCAqL1xuICAgIHBsYWNlaG9sZGVyOiB0eXBlcy5zdHJpbmcsXG4gICAgLyoqIFNlbGVjdCBvcHRpb25zICovXG4gICAgb3B0aW9uczogdHlwZXMub2JqZWN0LFxuICAgIC8qKiBBbHQgbWVzc2FnZXMgKi9cbiAgICBhbHQ6IHR5cGVzLnN0cmluZ1xuICB9LFxuXG4gIG1peGluczogW10sXG5cbiAgc3RhdGljczoge1xuICAgIENvbnRlbnQ6IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgICAgIHByb3BUeXBlczoge1xuICAgICAgICAvKiogU2VsZWN0IG9wdGlvbiB2YWx1ZSAqL1xuICAgICAgICBjb250ZW50Rm9yOiB0eXBlcy5zdHJpbmcuaXNSZXF1aXJlZFxuICAgICAgfSxcbiAgICAgIHJlbmRlciAoKSB7XG4gICAgICAgIGNvbnN0IHMgPSB0aGlzXG4gICAgICAgIGxldCB7IHByb3BzIH0gPSBzXG4gICAgICAgIGxldCBjbGFzc05hbWUgPSBjbGFzc25hbWVzKFxuICAgICAgICAgICdhcC1zZWxlY3RhYmxlLWFydGljbGUtY29udGVudCcsXG4gICAgICAgICAgYGFwLXNlbGVjdGFibGUtYXJ0aWNsZS1jb250ZW50LSR7cHJvcHMuY29udGVudEZvcn1gXG4gICAgICAgIClcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXsgY2xhc3NOYW1lIH0+XG4gICAgICAgICAgICB7IHByb3BzLmNoaWxkcmVuIH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0pXG4gIH0sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlICgpIHtcbiAgICByZXR1cm4ge31cbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHMgKCkge1xuICAgIHJldHVybiB7fVxuICB9LFxuXG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBsZXQgeyBzdGF0ZSwgcHJvcHMgfSA9IHNcbiAgICBsZXQge1xuICAgICAgbGFiZWwsXG4gICAgICB2YWx1ZSxcbiAgICAgIGFsdCxcbiAgICAgIGlkID0gYGFwLXNlbGVjdGFibGUtYXJ0aWNsZS0ke3MudXVpZH1gXG4gICAgfSA9IHByb3BzXG4gICAgbGV0IHNlbGVjdCA9IFsgJ2lkJywgJ25hbWUnLCAncGxhY2Vob2xkZXInLCAnb3B0aW9ucycsICd2YWx1ZScsICdvbkNoYW5nZScsICdtdWx0aXBsZScgXS5yZWR1Y2UoKHNlbGVjdCwgbmFtZSkgPT5cbiAgICAgIE9iamVjdC5hc3NpZ24oc2VsZWN0LCB7IFtuYW1lXTogcHJvcHNbIG5hbWUgXSB9KSwge31cbiAgICApXG4gICAgc2VsZWN0LmlkID0gYCR7aWR9LXNlbGVjdGBcbiAgICByZXR1cm4gKFxuICAgICAgPGFydGljbGUgY2xhc3NOYW1lPXsgY2xhc3NuYW1lcygnYXAtc2VsZWN0YWJsZS1hcnRpY2xlJywgcHJvcHMuY2xhc3NOYW1lKX1cbiAgICAgICAgICAgICAgIGlkPXsgaWQgfVxuICAgICAgICAgICAgICAgc3R5bGU9e09iamVjdC5hc3NpZ24oe30sIHByb3BzLnN0eWxlKSB9PlxuICAgICAgICA8QXBTdHlsZSBjbGFzc05hbWU9J2FwLXNlbGVjdGFibGUtYXJ0aWNsZS1keW5hbWljLXN0eWxlJ1xuICAgICAgICA+e2AjJHtpZH0gLmFwLXNlbGVjdGFibGUtYXJ0aWNsZS1jb250ZW50LSR7dmFsdWV9IHsgZGlzcGxheTogYmxvY2s7IH1gfTwvQXBTdHlsZT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2FwLXNlbGVjdGFibGUtYXJ0aWNsZS1oZWFkZXInPlxuICAgICAgICAgIDxBcExhYmVsIGh0bWxGb3I9eyBzZWxlY3QuaWQgfT57IGxhYmVsID8gbGFiZWwgOiBudWxsIH08L0FwTGFiZWw+XG4gICAgICAgICAgPEFwU2VsZWN0IHsgLi4uc2VsZWN0IH0gLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdhcC1zZWxlY3RhYmxlLWFydGljbGUtYm9keSc+XG4gICAgICAgICAgeyB2YWx1ZSA/IG51bGwgOiA8ZGl2IGNsYXNzTmFtZT0nYXAtc2VsZWN0YWJsZS1hcnRpY2xlLWFsdCc+eyBhbHQgfTwvZGl2Pn1cbiAgICAgICAgICB7IHByb3BzLmNoaWxkcmVuIH1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2FydGljbGU+XG4gICAgKVxuICB9LFxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIExpZmVjeWNsZVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIGNvbXBvbmVudERpZE1vdW50ICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIHMudXVpZCA9IHV1aWQudjQoKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIEN1c3RvbVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gUHJpdmF0ZVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cbn0pXG5cbmV4cG9ydCBkZWZhdWx0IEFwU2VsZWN0YWJsZUFydGljbGVcbiJdfQ==