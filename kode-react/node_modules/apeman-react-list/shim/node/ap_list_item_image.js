/**
 * Image for list item.
 * @class ApListItemImage
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _apemanReactImage = require('apeman-react-image');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApListItemImage */
var ApListItemImage = _react2.default.createClass({
  displayName: 'ApListItemImage',


  // --------------------
  // Specs
  // --------------------

  propTypes: {
    src: _react.PropTypes.string,
    alt: _react.PropTypes.string,
    scale: _react.PropTypes.oneOf(['fit', 'fill', 'none']),
    width: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string]),
    height: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string])
  },

  mixins: [],

  statics: {},

  getInitialState: function getInitialState() {
    return {};
  },
  getDefaultProps: function getDefaultProps() {
    return {
      src: null,
      alt: null,
      width: null,
      height: null,
      scale: 'fill'
    };
  },
  render: function render() {
    var s = this;
    var props = s.props;


    return _react2.default.createElement(
      'span',
      { className: (0, _classnames2.default)('ap-list-item-image', props.className) },
      _react2.default.createElement(_apemanReactImage.ApImage, { src: props.src,
        alt: props.alt,
        scale: props.scale,
        width: props.width,
        height: props.height
      })
    );
  }
});

exports.default = ApListItemImage;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwX2xpc3RfaXRlbV9pbWFnZS5qc3giXSwibmFtZXMiOlsiQXBMaXN0SXRlbUltYWdlIiwiY3JlYXRlQ2xhc3MiLCJwcm9wVHlwZXMiLCJzcmMiLCJzdHJpbmciLCJhbHQiLCJzY2FsZSIsIm9uZU9mIiwid2lkdGgiLCJvbmVPZlR5cGUiLCJudW1iZXIiLCJoZWlnaHQiLCJtaXhpbnMiLCJzdGF0aWNzIiwiZ2V0SW5pdGlhbFN0YXRlIiwiZ2V0RGVmYXVsdFByb3BzIiwicmVuZGVyIiwicyIsInByb3BzIiwiY2xhc3NOYW1lIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFLQTs7Ozs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7QUFDQSxJQUFNQSxrQkFBa0IsZ0JBQU1DLFdBQU4sQ0FBa0I7QUFBQTs7O0FBRXhDO0FBQ0E7QUFDQTs7QUFFQUMsYUFBVztBQUNUQyxTQUFLLGlCQUFNQyxNQURGO0FBRVRDLFNBQUssaUJBQU1ELE1BRkY7QUFHVEUsV0FBTyxpQkFBTUMsS0FBTixDQUFZLENBQUUsS0FBRixFQUFTLE1BQVQsRUFBaUIsTUFBakIsQ0FBWixDQUhFO0FBSVRDLFdBQU8saUJBQU1DLFNBQU4sQ0FBZ0IsQ0FBRSxpQkFBTUMsTUFBUixFQUFnQixpQkFBTU4sTUFBdEIsQ0FBaEIsQ0FKRTtBQUtUTyxZQUFRLGlCQUFNRixTQUFOLENBQWdCLENBQUUsaUJBQU1DLE1BQVIsRUFBZ0IsaUJBQU1OLE1BQXRCLENBQWhCO0FBTEMsR0FONkI7O0FBY3hDUSxVQUFRLEVBZGdDOztBQWdCeENDLFdBQVMsRUFoQitCOztBQWtCeENDLGlCQWxCd0MsNkJBa0JyQjtBQUNqQixXQUFPLEVBQVA7QUFDRCxHQXBCdUM7QUFzQnhDQyxpQkF0QndDLDZCQXNCckI7QUFDakIsV0FBTztBQUNMWixXQUFLLElBREE7QUFFTEUsV0FBSyxJQUZBO0FBR0xHLGFBQU8sSUFIRjtBQUlMRyxjQUFRLElBSkg7QUFLTEwsYUFBTztBQUxGLEtBQVA7QUFPRCxHQTlCdUM7QUFnQ3hDVSxRQWhDd0Msb0JBZ0M5QjtBQUNSLFFBQU1DLElBQUksSUFBVjtBQURRLFFBRUZDLEtBRkUsR0FFUUQsQ0FGUixDQUVGQyxLQUZFOzs7QUFJUixXQUNFO0FBQUE7QUFBQSxRQUFNLFdBQVksMEJBQVcsb0JBQVgsRUFBaUNBLE1BQU1DLFNBQXZDLENBQWxCO0FBQ0ksaUVBQVMsS0FBTUQsTUFBTWYsR0FBckI7QUFDUyxhQUFNZSxNQUFNYixHQURyQjtBQUVTLGVBQVFhLE1BQU1aLEtBRnZCO0FBR1MsZUFBUVksTUFBTVYsS0FIdkI7QUFJUyxnQkFBU1UsTUFBTVA7QUFKeEI7QUFESixLQURGO0FBVUQ7QUE5Q3VDLENBQWxCLENBQXhCOztrQkFrRGVYLGUiLCJmaWxlIjoiYXBfbGlzdF9pdGVtX2ltYWdlLmpzeCIsInNvdXJjZVJvb3QiOiJsaWIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEltYWdlIGZvciBsaXN0IGl0ZW0uXG4gKiBAY2xhc3MgQXBMaXN0SXRlbUltYWdlXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgYXMgdHlwZXMgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnXG5pbXBvcnQgeyBBcEltYWdlIH0gZnJvbSAnYXBlbWFuLXJlYWN0LWltYWdlJ1xuXG4vKiogQGxlbmRzIEFwTGlzdEl0ZW1JbWFnZSAqL1xuY29uc3QgQXBMaXN0SXRlbUltYWdlID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIFNwZWNzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgc3JjOiB0eXBlcy5zdHJpbmcsXG4gICAgYWx0OiB0eXBlcy5zdHJpbmcsXG4gICAgc2NhbGU6IHR5cGVzLm9uZU9mKFsgJ2ZpdCcsICdmaWxsJywgJ25vbmUnIF0pLFxuICAgIHdpZHRoOiB0eXBlcy5vbmVPZlR5cGUoWyB0eXBlcy5udW1iZXIsIHR5cGVzLnN0cmluZyBdKSxcbiAgICBoZWlnaHQ6IHR5cGVzLm9uZU9mVHlwZShbIHR5cGVzLm51bWJlciwgdHlwZXMuc3RyaW5nIF0pLFxuICB9LFxuXG4gIG1peGluczogW10sXG5cbiAgc3RhdGljczoge30sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlICgpIHtcbiAgICByZXR1cm4ge31cbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHMgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzcmM6IG51bGwsXG4gICAgICBhbHQ6IG51bGwsXG4gICAgICB3aWR0aDogbnVsbCxcbiAgICAgIGhlaWdodDogbnVsbCxcbiAgICAgIHNjYWxlOiAnZmlsbCdcbiAgICB9XG4gIH0sXG5cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIGxldCB7IHByb3BzIH0gPSBzXG5cbiAgICByZXR1cm4gKFxuICAgICAgPHNwYW4gY2xhc3NOYW1lPXsgY2xhc3NuYW1lcygnYXAtbGlzdC1pdGVtLWltYWdlJywgcHJvcHMuY2xhc3NOYW1lKSB9PlxuICAgICAgICAgIDxBcEltYWdlIHNyYz17IHByb3BzLnNyYyB9XG4gICAgICAgICAgICAgICAgICAgYWx0PXsgcHJvcHMuYWx0IH1cbiAgICAgICAgICAgICAgICAgICBzY2FsZT17IHByb3BzLnNjYWxlIH1cbiAgICAgICAgICAgICAgICAgICB3aWR0aD17IHByb3BzLndpZHRoIH1cbiAgICAgICAgICAgICAgICAgICBoZWlnaHQ9eyBwcm9wcy5oZWlnaHQgfVxuICAgICAgICAgIC8+XG4gICAgICA8L3NwYW4+XG4gICAgKVxuICB9XG5cbn0pXG5cbmV4cG9ydCBkZWZhdWx0IEFwTGlzdEl0ZW1JbWFnZVxuIl19