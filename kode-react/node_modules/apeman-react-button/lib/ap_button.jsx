/**
 * Button component.
 * @class ApButton
 */

'use strict'

import React, {PropTypes as types} from 'react'
import classnames from 'classnames'
import {withTouch} from 'apeman-react-touchable'
import {ApSpinner} from 'apeman-react-spinner'
import {shallowEqual, clone} from 'asobj'

/** @lends ApButton */
const ApButton = React.createClass({

  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Disable button tap */
    disabled: types.bool,
    /** Render with primary style */
    primary: types.bool,
    /** Render with danger style */
    danger: types.bool,
    /** Render with wide style */
    wide: types.bool,
    /** Anchor href */
    href: types.string,
    /** Document id */
    id: types.string,
    /** Hide button */
    hidden: types.bool,
    /** Render with simple style */
    simple: types.bool,
    /** Data for touch events */
    data: types.any,
    /** Show spinner */
    spinning: types.bool,
    /** Theme of spinner */
    spinner: types.string
  },

  mixins: [],

  getInitialState () {
    return {}
  },

  getDefaultProps () {
    return {
      disabled: false,
      primary: false,
      danger: false,
      wide: false,
      href: 'javascript:void(0)',
      id: null,
      hidden: false,
      simple: false,
      data: null,
      spinning: false,
      spinner: ApSpinner.DEFAULT_THEME
    }
  },

  render () {
    const s = this
    let { props } = s

    let className = classnames('ap-button', props.className, {
      'ap-button-primary': props.primary,
      'ap-button-danger': props.danger,
      'ap-button-wide': props.wide,
      'ap-button-disabled': props.disabled,
      'ap-button-simple': props.simple,
      'ap-button-spinning': props.spinning,
      'ap-button-hidden': props.hidden
    })
    let aProps = clone(props, {
      without: [ 'text', 'hasTouch', ...Object.keys(ApButton.propTypes) ]
    })
    return (
      <a { ...aProps }
         className={ className }
         href={ props.href }
         id={ props.id }
         style={ Object.assign({}, props.style) }
      >{ props.children }
        { props.spinning ? s._renderSpinner() : null}
      </a>
    )
  },

  // --------------------
  // Lifecycle
  // --------------------

  shouldComponentUpdate (nextProps, nextState) {
    const s = this
    let { props, state } = s
    return !shallowEqual(props, nextProps) || !shallowEqual(state, nextState)
  },

  // --------------------
  // Private
  // --------------------

  _renderSpinner () {
    const s = this
    let { props } = s
    return (
      <ApSpinner enabled
                 theme={ props.spinner }
                 className='ap-button-spinner'
      />
    )
  }
})

export default withTouch(ApButton, {
  getTouchData () {
    const s = this
    let { props } = s
    return props.data
  }
})
