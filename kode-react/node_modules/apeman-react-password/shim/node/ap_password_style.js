/**
 * Style for ApPassword.
 * @class ApPasswordStyle
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _apemanReactStyle = require('apeman-react-style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApPasswordStyle */
var ApPasswordStyle = _react2.default.createClass({
  displayName: 'ApPasswordStyle',

  propTypes: {
    style: _react.PropTypes.object,
    highlightColor: _react.PropTypes.string,
    maxWidth: _react.PropTypes.number
  },
  getDefaultProps: function getDefaultProps() {
    return {
      style: {},
      maxWidth: _apemanReactStyle.ApStyle.CONTENT_WIDTH,
      highlightColor: _apemanReactStyle.ApStyle.DEFAULT_HIGHLIGHT_COLOR
    };
  },

  statics: {
    styleData: function styleData(config) {
      var highlightColor = config.highlightColor;
      var maxWidth = config.maxWidth;


      return {
        all: {
          '.ap-password': {
            display: 'block',
            padding: '4px 8px',
            border: '1px solid #AAA',
            width: '100%',
            maxWidth: maxWidth + 'px',
            borderRadius: '2px',
            boxSizing: 'border-box',
            outlineColor: '' + highlightColor,
            boxShadow: '1px 1px 1px rgba(0,0,0,.05) inset'
          },
          '.ap-password-wrap': {
            position: 'relative',
            width: '100%',
            margin: '4px',
            verticalAlign: 'middle',
            maxWidth: maxWidth + 'px',
            display: 'block'
          },
          '.ap-password-wrap-empty .ap-password-toggle-button': {
            opacity: 0,
            pointerEvents: 'none'
          },
          '.ap-password-toggle-button': {
            position: 'absolute',
            top: 0,
            right: -4,
            display: 'inline-flex',
            alignItems: 'center',
            padding: '0 8px',
            bottom: 0,
            cursor: 'pointer',
            opacity: 0.8,
            transition: 'opacity 200ms'
          },
          '.ap-password-toggle-button:hover': {
            opacity: 1
          },
          '.ap-password-toggle-button:active': {
            opacity: 0.9
          },
          '.ap-password-toggle-aligner': {
            display: 'inline-block',
            verticalAlign: 'middle',
            width: '1px',
            marginRight: '-1px',
            height: '100%',
            boxSizing: 'border-box',
            opacity: 0
          },
          '.ap-password-toggle-icon': {
            display: 'inline-block',
            verticalAlign: 'middle'
          }
        }
      };
    }
  },
  render: function render() {
    var s = this;
    var props = s.props;

    var _ApPasswordStyle$styl = ApPasswordStyle.styleData(props);

    var all = _ApPasswordStyle$styl.all;
    var small = _ApPasswordStyle$styl.small;
    var medium = _ApPasswordStyle$styl.medium;
    var large = _ApPasswordStyle$styl.large;


    return _react2.default.createElement(
      _apemanReactStyle.ApStyle,
      { data: Object.assign(all, props.style),
        smallMediaData: small,
        mediumMediaData: medium,
        largeMediaData: large
      },
      props.children
    );
  }
});

exports.default = ApPasswordStyle;
//# sourceMappingURL=data:application/json;base64,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InNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3R5bGUgZm9yIEFwUGFzc3dvcmQuXG4gKiBAY2xhc3MgQXBQYXNzd29yZFN0eWxlXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBSZWFjdCwge1Byb3BUeXBlcyBhcyB0eXBlc30gZnJvbSAncmVhY3QnXG5pbXBvcnQge0FwU3R5bGV9IGZyb20gJ2FwZW1hbi1yZWFjdC1zdHlsZSdcblxuLyoqIEBsZW5kcyBBcFBhc3N3b3JkU3R5bGUgKi9cbmNvbnN0IEFwUGFzc3dvcmRTdHlsZSA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcbiAgcHJvcFR5cGVzOiB7XG4gICAgc3R5bGU6IHR5cGVzLm9iamVjdCxcbiAgICBoaWdobGlnaHRDb2xvcjogdHlwZXMuc3RyaW5nLFxuICAgIG1heFdpZHRoOiB0eXBlcy5udW1iZXJcbiAgfSxcbiAgZ2V0RGVmYXVsdFByb3BzICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3R5bGU6IHt9LFxuICAgICAgbWF4V2lkdGg6IEFwU3R5bGUuQ09OVEVOVF9XSURUSCxcbiAgICAgIGhpZ2hsaWdodENvbG9yOiBBcFN0eWxlLkRFRkFVTFRfSElHSExJR0hUX0NPTE9SXG4gICAgfVxuICB9LFxuICBzdGF0aWNzOiB7XG4gICAgc3R5bGVEYXRhIChjb25maWcpIHtcbiAgICAgIGxldCB7IGhpZ2hsaWdodENvbG9yLCBtYXhXaWR0aCB9ID0gY29uZmlnXG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFsbDoge1xuICAgICAgICAgICcuYXAtcGFzc3dvcmQnOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiAnYmxvY2snLFxuICAgICAgICAgICAgcGFkZGluZzogJzRweCA4cHgnLFxuICAgICAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkICNBQUEnLFxuICAgICAgICAgICAgd2lkdGg6ICcxMDAlJyxcbiAgICAgICAgICAgIG1heFdpZHRoOiBgJHttYXhXaWR0aH1weGAsXG4gICAgICAgICAgICBib3JkZXJSYWRpdXM6ICcycHgnLFxuICAgICAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgICAgICBvdXRsaW5lQ29sb3I6IGAke2hpZ2hsaWdodENvbG9yfWAsXG4gICAgICAgICAgICBib3hTaGFkb3c6ICcxcHggMXB4IDFweCByZ2JhKDAsMCwwLC4wNSkgaW5zZXQnXG4gICAgICAgICAgfSxcbiAgICAgICAgICAnLmFwLXBhc3N3b3JkLXdyYXAnOiB7XG4gICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgICAgICBtYXJnaW46ICc0cHgnLFxuICAgICAgICAgICAgdmVydGljYWxBbGlnbjogJ21pZGRsZScsXG4gICAgICAgICAgICBtYXhXaWR0aDogYCR7bWF4V2lkdGh9cHhgLFxuICAgICAgICAgICAgZGlzcGxheTogJ2Jsb2NrJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgJy5hcC1wYXNzd29yZC13cmFwLWVtcHR5IC5hcC1wYXNzd29yZC10b2dnbGUtYnV0dG9uJzoge1xuICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgIHBvaW50ZXJFdmVudHM6ICdub25lJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgJy5hcC1wYXNzd29yZC10b2dnbGUtYnV0dG9uJzoge1xuICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICByaWdodDogLTQsXG4gICAgICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWZsZXgnLFxuICAgICAgICAgICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgICAgICAgICBwYWRkaW5nOiAnMCA4cHgnLFxuICAgICAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAgICAgY3Vyc29yOiAncG9pbnRlcicsXG4gICAgICAgICAgICBvcGFjaXR5OiAwLjgsXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiAnb3BhY2l0eSAyMDBtcydcbiAgICAgICAgICB9LFxuICAgICAgICAgICcuYXAtcGFzc3dvcmQtdG9nZ2xlLWJ1dHRvbjpob3Zlcic6IHtcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICB9LFxuICAgICAgICAgICcuYXAtcGFzc3dvcmQtdG9nZ2xlLWJ1dHRvbjphY3RpdmUnOiB7XG4gICAgICAgICAgICBvcGFjaXR5OiAwLjlcbiAgICAgICAgICB9LFxuICAgICAgICAgICcuYXAtcGFzc3dvcmQtdG9nZ2xlLWFsaWduZXInOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgICAgICAgICAgIHZlcnRpY2FsQWxpZ246ICdtaWRkbGUnLFxuICAgICAgICAgICAgd2lkdGg6ICcxcHgnLFxuICAgICAgICAgICAgbWFyZ2luUmlnaHQ6ICctMXB4JyxcbiAgICAgICAgICAgIGhlaWdodDogJzEwMCUnLFxuICAgICAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgfSxcbiAgICAgICAgICAnLmFwLXBhc3N3b3JkLXRvZ2dsZS1pY29uJzoge1xuICAgICAgICAgICAgZGlzcGxheTogJ2lubGluZS1ibG9jaycsXG4gICAgICAgICAgICB2ZXJ0aWNhbEFsaWduOiAnbWlkZGxlJ1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIGxldCB7IHByb3BzIH0gPSBzXG5cbiAgICBsZXQgeyBhbGwsIHNtYWxsLCBtZWRpdW0sIGxhcmdlIH0gPSBBcFBhc3N3b3JkU3R5bGUuc3R5bGVEYXRhKHByb3BzKVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBcFN0eWxlIGRhdGE9eyBPYmplY3QuYXNzaWduKGFsbCwgcHJvcHMuc3R5bGUpIH1cbiAgICAgICAgICAgICAgIHNtYWxsTWVkaWFEYXRhPXsgc21hbGwgfVxuICAgICAgICAgICAgICAgbWVkaXVtTWVkaWFEYXRhPXsgbWVkaXVtIH1cbiAgICAgICAgICAgICAgIGxhcmdlTWVkaWFEYXRhPXsgbGFyZ2UgfVxuICAgICAgPnsgcHJvcHMuY2hpbGRyZW4gfTwvQXBTdHlsZT5cbiAgICApXG4gIH1cbn0pXG5cbmV4cG9ydCBkZWZhdWx0IEFwUGFzc3dvcmRTdHlsZVxuIl19