/**
 * Style for ApSwitch.
 * @class ApSwitchStyle
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _apemanReactStyle = require('apeman-react-style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApSwitchStyle */
var ApSwitchStyle = _react2.default.createClass({
  displayName: 'ApSwitchStyle',

  propTypes: {
    style: _react.PropTypes.object,
    highlightColor: _react.PropTypes.string
  },
  getDefaultProps: function getDefaultProps() {
    return {
      style: {},
      highlightColor: _apemanReactStyle.ApStyle.DEFAULT_HIGHLIGHT_COLOR,
      backgroundColor: _apemanReactStyle.ApStyle.DEFAULT_BACKGROUND_COLOR,
      borderColor: '#CCC'
    };
  },

  statics: {
    styleData: function styleData(config) {
      var highlightColor = config.highlightColor;
      var backgroundColor = config.backgroundColor;
      var borderColor = config.borderColor;

      var handleSize = 24;
      var transition = 400;
      var minWidth = handleSize * 1.5;
      return {
        all: {
          '.ap-switch': {
            display: 'inline-flex',
            justifyContent: 'center',
            alignItems: 'center',
            cursor: 'pointer'
          },
          '.ap-switch-radio': {
            display: 'none'
          },
          '.ap-switch-label': {
            width: '100%',
            height: '100%',
            boxSizing: 'border-box',
            textAlign: 'center',
            fontSize: '14px',
            whiteSpace: 'nowrap',
            textOverflow: 'ellipsis',
            overflow: 'hidden',
            padding: 0,
            flexGrow: 1,
            flexShrink: 1,
            cursor: 'pointer',
            transition: 'width ' + transition + 'ms',
            lineHeight: handleSize + 'px'
          },
          '.ap-switch-label-text': {
            display: 'inline-block',
            width: '100%',
            padding: '0 8px',
            boxSizing: 'border-box',
            whiteSpace: 'nowrap',
            overflow: 'hidden',
            textOverflow: 'ellipsis',
            minWidth: minWidth
          },
          '.ap-switch-on-label': {
            background: highlightColor,
            color: 'white',
            borderRadius: handleSize / 2 + 'px 0 0 ' + handleSize / 2 + 'px',
            marginRight: -1 * handleSize / 2
          },
          '.ap-switch-off-label': {
            background: '#FAFAFA',
            color: '#AAA',
            borderRadius: '0 ' + handleSize / 2 + 'px ' + handleSize / 2 + 'px 0',
            marginLeft: -1 * handleSize / 2
          },
          '.ap-switch-on .ap-switch-off-label': {
            width: handleSize / 2 + 2 + 'px !important'
          },
          '.ap-switch-off .ap-switch-on-label': {
            width: handleSize / 2 + 2 + 'px !important'
          },
          '.ap-switch-inner': {
            display: 'inline-flex',
            justifyContent: 'flex-start',
            alignItems: 'center',
            backgroundColor: backgroundColor,
            height: handleSize,
            borderRadius: handleSize / 2 + 1,
            minWidth: minWidth,
            border: '1px solid ' + borderColor,
            overflow: 'hidden',
            width: '100%'
          },
          '.ap-switch-handle': {
            display: 'inline-block',
            borderRadius: '50%',
            width: handleSize,
            height: handleSize,
            backgroundColor: 'white',
            border: '1px solid ' + borderColor,
            flexGrow: 0,
            flexShrink: 0,
            position: 'relative',
            zIndex: 4
          }
        }
      };
    }
  },
  render: function render() {
    var s = this;
    var props = s.props;

    var _ApSwitchStyle$styleD = ApSwitchStyle.styleData(props);

    var all = _ApSwitchStyle$styleD.all;
    var small = _ApSwitchStyle$styleD.small;
    var medium = _ApSwitchStyle$styleD.medium;
    var large = _ApSwitchStyle$styleD.large;


    return _react2.default.createElement(
      _apemanReactStyle.ApStyle,
      { data: Object.assign(all, props.style),
        smallMediaData: small,
        mediumMediaData: medium,
        largeMediaData: large
      },
      props.children
    );
  }
});

exports.default = ApSwitchStyle;
//# sourceMappingURL=data:application/json;base64,bnVsbA==