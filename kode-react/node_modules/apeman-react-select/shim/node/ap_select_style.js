/**
 * Style for ApSelect.
 * @class ApSelectStyle
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _apemanReactStyle = require('apeman-react-style');

var _acolor = require('acolor');

var _acolor2 = _interopRequireDefault(_acolor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApSelectStyle */
var ApSelectStyle = function (_Component) {
  (0, _inherits3.default)(ApSelectStyle, _Component);

  function ApSelectStyle() {
    (0, _classCallCheck3.default)(this, ApSelectStyle);
    return (0, _possibleConstructorReturn3.default)(this, (ApSelectStyle.__proto__ || (0, _getPrototypeOf2.default)(ApSelectStyle)).apply(this, arguments));
  }

  (0, _createClass3.default)(ApSelectStyle, [{
    key: 'render',
    value: function render() {
      var s = this;
      var props = s.props;

      var _ApSelectStyle$styleD = ApSelectStyle.styleData(props),
          all = _ApSelectStyle$styleD.all,
          small = _ApSelectStyle$styleD.small,
          medium = _ApSelectStyle$styleD.medium,
          large = _ApSelectStyle$styleD.large;

      return _react2.default.createElement(
        _apemanReactStyle.ApStyle,
        { data: (0, _assign2.default)(all, props.style),
          smallMediaData: small,
          mediumMediaData: medium,
          largeMediaData: large
        },
        props.children
      );
    }
  }]);
  return ApSelectStyle;
}(_react.Component);

(0, _assign2.default)(ApSelectStyle, {
  propTypes: {
    style: _react.PropTypes.object,
    highlightColor: _react.PropTypes.string,
    maxWidth: _react.PropTypes.number
  },
  defaultProps: {
    style: {},
    maxWidth: _apemanReactStyle.ApStyle.CONTENT_WIDTH,
    highlightColor: _apemanReactStyle.ApStyle.DEFAULT_HIGHLIGHT_COLOR,
    backgroundColor: _apemanReactStyle.ApStyle.DEFAULT_BACKGROUND_COLOR
  },

  styleData: function styleData(config) {
    var highlightColor = config.highlightColor,
        maxWidth = config.maxWidth,
        backgroundColor = config.backgroundColor;


    var minWidth = 240;
    return {
      all: {
        '.ap-select-wrap': {
          position: 'relative',
          boxSizing: 'border-box',
          display: 'inline-block'
        },
        '.ap-select,.ap-select-dummy-text': {
          opacity: 0,
          zIndex: -99,
          position: 'absolute',
          display: 'block',
          width: 1,
          height: 1,
          overflow: 'hidden'
        },
        '.ap-select-options-list': {
          padding: 0,
          margin: 0,
          zIndex: 24,
          position: 'absolute',
          left: 0,
          top: 0,
          width: '100%',
          display: 'none',
          boxSizing: 'border-box',
          background: 'transparent',
          boxShadow: 'none',
          border: 'none'
        },
        '.ap-select-options-list-inner': {
          padding: 0,
          margin: 0,
          background: 'white',
          border: '1px solid #F0F0F0',
          boxShadow: '2px 2px 4px rgba(0,0,0,0.22)',
          borderRadius: '2px',
          width: '100%',
          minWidth: minWidth + 'px',
          overflow: 'auto'
        },
        '.ap-select-options-list-visible': {
          display: 'block'
        },
        '.ap-select-options-list-item': {
          display: 'block',
          listStyle: 'none',
          padding: 0,
          margin: 0
        },
        '.ap-select-item': {
          display: 'block',
          padding: '4px 8px',
          fontSize: 'smaller',
          cursor: 'pointer',
          whiteSpace: 'nowrap',
          textOverflow: 'ellipsis',
          overflow: 'hidden'
        },
        '.ap-select-item-focused, .ap-select-item-focused:hover, .ap-select-item-focused:active': {
          textDecoration: 'none',
          backgroundColor: '' + highlightColor,
          color: 'white'
        },
        '.ap-select-item:hover': {
          textDecoration: 'none',
          backgroundColor: '' + _acolor2.default.alpha(highlightColor, 0.9),
          color: 'white'
        },
        '.ap-select-item:active': {
          opacity: '0.9'
        },
        '.ap-select-label': {
          verticalAlign: 'middle',
          display: 'inline-flex',
          alignItems: 'center',
          padding: '4px 2px 4px 8px',
          color: 'inherit',
          fontSize: 'smaller',
          minHeight: '28px',
          minWidth: minWidth + 'px',
          maxWidth: maxWidth + 'px',
          cursor: 'pointer',
          background: 'white',
          boxSizing: 'border-box',
          borderRadius: '2px',
          border: '1px solid #CCC',
          justifyContent: 'space-between'
        },
        '.ap-select-label:hover': {
          background: '#FAFAFA'
        },
        '.ap-select-label:active': {
          background: '#F0F0F0'
        },
        '.ap-select-label-text': {
          padding: '0 4px'
        },
        '.ap-select-label-placeholder': {
          color: '#CCC'
        }
      }
    };
  }
});

exports.default = ApSelectStyle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,