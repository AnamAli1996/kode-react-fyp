/**
 * Info item with collapsible feature
 * @class ApInfoCollapsibleItem
 */
'use strict'

import React, {PropTypes as types} from 'react'
import classnames from 'classnames'
import {ApPureMixin} from 'apeman-react-mixin-pure'
import {ApLayoutMixin} from 'apeman-react-mixin-layout'
import ApInfoItem from './ap_info_item'
import {ApIcon} from 'apeman-react-icon'

const { OPEN_ICON, CLOSE_ICON } = ApInfoItem

/** @lends ApInfoCollapsibleItem */
const ApInfoCollapsibleItem = React.createClass({
  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Label text */
    label: types.string,
    /** Value text */
    value: types.string,
    /** Unit suffix */
    unit: types.string,
    /** Callback for toggle */
    onToggle: types.func
  },

  mixins: [
    ApPureMixin,
    ApLayoutMixin
  ],

  getInitialState () {
    return {
      open: false
    }
  },

  render () {
    const s = this
    let { state, props, layouts } = s
    let className = classnames('ap-info-collapsible-item', props.className)
    let icon = state.open ? OPEN_ICON : CLOSE_ICON
    return (
      <div className={ className }>
        <div className='ap-info-collapsible-header'>
          <ApIcon className={ classnames('ap-info-item-icon', 'ap-info-collapsible-icon', icon) }/>
          <ApInfoItem label={ props.label }
                      unit={ props.unit }
                      value={ props.value }
                      onTap={ s.toggleCollapsing }
          />
        </div>
        <div className={ classnames('ap-info-collapsible-wrap', {
          'ap-info-collapsible-wrap-closed': !state.open
        }) } style={ layouts.wrap }>
          <div className='ap-info-collapsible-body'
               ref={ (body) => { s.body = body } }
          >
            { props.children }
          </div>
        </div>
      </div>
    )
  },

  // --------------------
  // For ApLayoutMixin
  // --------------------

  getInitialLayouts () {
    return {
      wrap: {
        height: 'auto'
      }
    }
  },

  calcLayouts () {
    const s = this
    let { body } = s
    let bodyRect = body && body.getBoundingClientRect()
    return {
      wrap: {
        height: bodyRect && bodyRect.height
      }
    }
  },

  // --------------------
  // Custom
  // --------------------
  toggleCollapsing (e) {
    const s = this
    let { props, state } = s
    s.setState({
      open: !state.open
    })
    if (props.onToggle) {
      props.onToggle(e)
    }
  }
})

export default ApInfoCollapsibleItem
