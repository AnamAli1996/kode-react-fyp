/**
 * apeman react package for head component.
 * @class ApHead
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify2 = require('babel-runtime/core-js/json/stringify');

var _stringify3 = _interopRequireDefault(_stringify2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _stringcase = require('stringcase');

var _stringcase2 = _interopRequireDefault(_stringcase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApHead */
var ApHead = _react2.default.createClass({
  displayName: 'ApHead',

  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** CharSet */
    charSet: _react.PropTypes.string,
    /** Document Title */
    title: _react.PropTypes.string,
    /** Favicon */
    icon: _react.PropTypes.string,
    /** Meta data */
    meta: _react.PropTypes.oneOfType([_react.PropTypes.arrayOf(_react.PropTypes.object), _react.PropTypes.object]),
    /** Micro data settings */
    itemProps: _react.PropTypes.oneOfType([_react.PropTypes.arrayOf(_react.PropTypes.object), _react.PropTypes.object]),
    /** CSS file urls */
    css: _react.PropTypes.array,
    /** JS file urls */
    js: _react.PropTypes.array,
    /** Version string */
    version: _react.PropTypes.string,
    /** Query string key for version */
    versionKey: _react.PropTypes.string,
    /** Global variables */
    globals: _react.PropTypes.object,
    /** View port settings */
    viewPort: _react.PropTypes.object,
    /** Base url */
    base: _react.PropTypes.string,
    /** Target of base url. '_blank', '_parent', '_self', '_top' or frame name */
    baseTarget: _react.PropTypes.string,
    /** Path of manifest.json */
    manifest: _react.PropTypes.string,
    /** Theme color */
    color: _react.PropTypes.string
  },

  mixins: [],

  statics: {
    renderBase: function renderBase(base, target) {
      if (!base) {
        return null;
      }
      return _react2.default.createElement('base', { href: base, target: target });
    },
    renderCharset: function renderCharset(charSet) {
      if (!charSet) {
        return null;
      }
      return _react2.default.createElement('meta', { className: 'ap-head-meta', charSet: charSet });
    },
    renderTitle: function renderTitle(title) {
      if (!title) {
        return null;
      }
      return _react2.default.createElement(
        'title',
        { className: 'ap-head-title' },
        title
      );
    },
    renderIcon: function renderIcon(url, query) {
      if (!url) {
        return null;
      }
      return _react2.default.createElement('link', { rel: 'icon', href: ApHead._addQuery(url, query) });
    },
    renderMetaValues: function renderMetaValues(values) {
      if (!values) {
        return null;
      }
      return [].concat(values).map(function (values, i) {
        return (0, _keys2.default)(values).map(function (name, j) {
          return _react2.default.createElement('meta', { name: name,
            content: values[name],
            key: 'meta-' + i + '-' + j });
        });
      }).reduce(function (a, b) {
        return [].concat(a, b);
      }, []);
    },
    renderItemProps: function renderItemProps(values) {
      if (!values) {
        return null;
      }
      return [].concat(values).map(function (values, i) {
        return (0, _keys2.default)(values).map(function (name, j) {
          return _react2.default.createElement('meta', { itemProp: name,
            content: values[name],
            key: 'item-prop' + i + '-' + j });
        });
      }).reduce(function (a, b) {
        return [].concat(a, b);
      }, []);
    },
    renderCss: function renderCss(urls, query) {
      if (!urls) {
        return null;
      }
      return [].concat(urls).map(function (url, i) {
        return _react2.default.createElement('link', { rel: 'stylesheet',
          type: 'text/css',
          key: 'css-' + i + '-' + url,
          href: ApHead._addQuery(url, query) });
      });
    },
    renderJs: function renderJs(urls, query) {
      if (!urls) {
        return null;
      }
      return [].concat(urls).map(function (url, i) {
        return _react2.default.createElement('script', { type: 'text/javascript',
          key: 'js-' + i + '-' + url,
          src: ApHead._addQuery(url, query) });
      });
    },
    renderGlobals: function renderGlobals(values) {
      var _stringify = function _stringify(data) {
        return data ? (0, _stringify3.default)(data || {}) : 'null';
      };

      return (0, _keys2.default)(values || {}).map(function (key, i) {
        return _react2.default.createElement('script', { type: 'text/javascript',
          key: 'global-' + i + '-' + key,
          dangerouslySetInnerHTML: { __html: 'window.' + key + '=' + _stringify(values[key]) } });
      });
    },
    renderViewPort: function renderViewPort(values) {
      var content = (0, _keys2.default)(values || {}).map(function (key) {
        return [_stringcase2.default.spinalcase(key), values[key]].join('=');
      }).join(',');
      return _react2.default.createElement('meta', { name: 'viewport', content: content });
    },
    renderManifest: function renderManifest(value) {
      if (!value) {
        return null;
      }
      return _react2.default.createElement('link', { rel: 'manifest', href: value });
    },
    renderThemeColor: function renderThemeColor(value) {
      if (!value) {
        return null;
      }
      return _react2.default.createElement('meta', { name: 'theme-color', content: value });
    },
    _addQuery: function _addQuery(url, query) {
      var joiner = /\?/.test(url) ? '&' : '?';
      return [url, query].join(joiner);
    }
  },

  getInitialState: function getInitialState() {
    return {};
  },
  getDefaultProps: function getDefaultProps() {
    return {
      charSet: 'utf-8',
      version: 'unknown',
      versionKey: 'v',
      viewPort: {
        width: 'device-width',
        initialScale: '1.0'
      },
      base: null,
      baseTarget: undefined
    };
  },
  render: function render() {
    var s = this;
    var props = s.props;


    var query = [props.versionKey, props.version].join('=');
    return _react2.default.createElement(
      'head',
      { className: 'ap-head' },
      ApHead.renderBase(props.base, props.baseTarget),
      ApHead.renderCharset(props.charSet),
      ApHead.renderTitle(props.title),
      ApHead.renderMetaValues(props.meta),
      ApHead.renderItemProps(props.itemProps),
      ApHead.renderIcon(props.icon, query),
      ApHead.renderGlobals(props.globals),
      ApHead.renderCss(props.css, query),
      ApHead.renderViewPort(props.viewPort),
      ApHead.renderManifest(props.manifest),
      ApHead.renderThemeColor(props.color),
      ApHead.renderJs(props.js, query),
      props.children
    );
  }
});

exports.default = ApHead;
//# sourceMappingURL=data:application/json;base64,