/**
 * Slider component.
 * @class ApSlider
 */

'use strict'

import React, {PropTypes as types} from 'react'
import ReactDOM from 'react-dom'
import classnames from 'classnames'
import chopcal from 'chopcal'
import rangecal from 'rangecal'
import ApSliderHandle from './ap_slider_handle'
import ApSliderLabel from './ap_slider_label'
import {ApTouchable} from 'apeman-react-touchable'

/** @lends ApSlider */
const ApSlider = React.createClass({

  // --------------------
  // Specs
  // --------------------
  propTypes: {
    initial: types.number,
    min: types.number,
    max: types.number,
    step: types.number,
    onChange: types.func,
    barOnly: types.bool
  },

  statics: {},

  getInitialState () {
    const s = this
    let { props } = s
    return {
      minX: 0,
      maxX: 1200,
      x: 0,
      value: props.initial
    }
  },

  getDefaultProps () {
    return {
      initial: 50,
      min: 0,
      max: 100,
      step: 0.01,
      barOnly: false
    }
  },

  render () {
    const s = this
    let { state, props } = s

    return (
      <div className={ classnames('ap-slider', props.className) }>
        <div className="ap-slider-inner">
          {s._renderLabel(props.min)}
          <div className="ap-slider-bar-wrap">
            <ApTouchable onTap={s.sliderBarDidTap}>
              <div className="ap-slider-bar"
                   ref="ap-slider-bar">
                <div className="ap-slider-bar-bg"></div>
                <div className="ap-slider-bar-highlight" style={
                        {left: 0, width: state.x}
                    }>
                </div>
              </div>
            </ApTouchable>
            <ApSliderHandle onMove={ s.sliderHandleDidMove }
                            shouldMove={ s.shouldSliderHandleMove }
                            x={ state.x }
                            minX={ state.minX }
                            maxX={ state.maxX }
                            ref="ap-slider-handle"/>
          </div>
          {s._renderLabel(props.max)}
        </div>
      </div>
    )
  },

  // --------------------
  // Lifecycle
  // --------------------

  componentDidMount () {
    const s = this

    window.addEventListener('resize', s.resizeSlider)
    s.resizeSlider()
  },

  componentWillUnmount () {
    const s = this
    window.removeEventListener('resize', s.resizeSlider)
  },

  // ------------------
  // Helper
  // ------------------

  resizeSlider (e) {
    const s = this
    let w = ReactDOM.findDOMNode(s).offsetWidth
    let handle = ReactDOM.findDOMNode(s.refs[ 'ap-slider-handle' ])
    let handleRadius = handle.offsetWidth / 2
    let minX = 0 - handleRadius
    let maxX = w - handleRadius
    let rate = s._rateWithValue(s.state.value)
    s.setState({
      minX: minX,
      maxX: maxX,
      x: rangecal.value(minX, maxX, rate)
    })
  },

  sliderBarDidTap (e) {
    const s = this
    let state = s.state
    let node = ReactDOM.findDOMNode(s)
    let left = node.offsetLeft
    let minX = state.minX
    let maxX = state.maxX
    let x = e.center.x - left
    let rate = rangecal.rate(minX, maxX, x)
    let value = s._valueWithRate(rate)
    s.setSliderValue(value)
  },

  sliderHandleDidMove (e) {
    const s = this
    let { state } = s
    let { minX, maxX } = state
    let x = e.detail.x
    let rate = rangecal.rate(minX, maxX, x + 2)
    let value = s._valueWithRate(rate)
    s.setSliderValue(value)
  },

  shouldSliderHandleMove (p) {
    const s = this
    return true
  },

  setSliderValue (value) {
    const s = this
    let { state, props } = s
    let step = props.step
    let duplicate = state.value === value
    if (duplicate) {
      return
    }
    let { minX, maxX } = state
    let rate = s._rateWithValue(value)
    s.setState({
      value: value,
      x: rangecal.value(minX, maxX, rate)
    })

    value = chopcal.round(value, step)

    if (s._value === value) {
      return
    }

    s._value = value

    if (props.onChange) {
      props.onChange(value, {
        element: s
      })
    }
  },

  // ------------------
  // Private
  // ------------------

  _rateWithValue (value) {
    const s = this
    let { props } = s

    let { min, max } = props

    value = rangecal.round(min, max, value)
    return chopcal.round(rangecal.rate(min, max, value), 0.01)
  },

  _valueWithRate (rate) {
    const s = this
    let { props } = s

    let { min, max } = props

    let value = chopcal.round(rangecal.value(min, max, rate), 0.01)
    return rangecal.round(min, max, value)
  },

  _renderLabel (value) {
    const s = this
    let { props } = s
    if (props.barOnly) {
      return null
    }
    return (<ApSliderLabel value={value}/>)
  }
})

export default ApSlider
