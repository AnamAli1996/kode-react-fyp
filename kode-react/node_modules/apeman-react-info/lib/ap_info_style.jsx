/**
 * Style for ApInfo.
 * @class ApInfoStyle
 */

'use strict'

import React, { PropTypes as types } from 'react'
import { ApStyle } from 'apeman-react-style'

/** @lends ApInfoStyle */
const ApInfoStyle = React.createClass({
  propTypes: {
    style: types.object,
    highlightColor: types.string
  },
  getDefaultProps () {
    return {
      style: {},
      highlightColor: ApStyle.DEFAULT_HIGHLIGHT_COLOR,
      backgroundColor: ApStyle.DEFAULT_BACKGROUND_COLOR,
      maxWidth: ApStyle.CONTENT_WIDTH,
      rowHeight: ApStyle.ROW_HEIGHT
    }
  },
  statics: {
    styleData (config) {
      let { rowHeight, highlightColor, backgroundColor, maxWidth } = config

      let animationDuration = 600
      let iconColor = '#999'
      return {
        all: {
          '.ap-info': {
            boxSizing: 'border-box',
            maxWidth: maxWidth,
            margin: '0 auto'
          },
          '.ap-info-header': {
            display: 'block',
            fontSize: '9px',
            padding: '2px 16px 1px',
            verticalAlign: 'middle',
            position: 'relative',
            borderTop: '1px solid #F0F0F0',
            borderBottom: '1px solid #F0F0F0',
            marginBottom: '-1px',
            color: '#999',
            fontWeight: '100',
            background: 'rgba(0, 0, 0, 0.01)'
          },
          '.ap-info-body': {
            display: 'block',
            margin: '0 8px -1px',
            overflow: 'hidden'
          },
          '.ap-info-item': {
            display: 'flex',
            borderBottom: '1px solid #F0F0F0',
            justifyContent: 'space-between',
            minHeight: `${rowHeight}px`,
            padding: '4px 8px',
            alignItems: 'center'
          },
          '.ap-info-collapsible-item': {
            display: 'block'
          },
          '.ap-info-collapsible-header': {
            display: 'flex',
            alignItems: 'center',
            width: '100%',
            position: 'relative'
          },
          '.ap-info-collapsible-header .ap-info-item': {
            width: '100%',
            paddingLeft: '21px'
          },
          '.ap-info-collapsible-item .ap-info-collapsible-icon': {
            pointerEvents: 'none',
            marginLeft: '8px',
            textAlign: 'center',
            width: '8px',
            top: 0,
            left: 0,
            bottom: 0,
            display: 'inline-flex',
            alignItems: 'center',
            position: 'absolute'
          },
          '.ap-info-collapsible-wrap': {
            overflow: 'hidden',
            transition: `height ${animationDuration}ms`,
            height: 'auto',
            boxSizing: 'border-box'
          },
          '.ap-info-collapsible-wrap .ap-info-collapsible-wrap': {
            transition: 'none'
          },
          '.ap-info-collapsible-wrap-closed': {
            height: '0 !important'
          },
          '.ap-info-collapsible-body': {
            display: 'block'
          },
          '.ap-info-collapsible-body .ap-info': {
            marginLeft: '20px'
          },
          '.ap-info-collapsible-body .ap-info .ap-info-body': {
            marginRight: '0px'
          },
          '.ap-info-item-label': {
            display: 'inline-block',
            color: '#AAA',
            verticalAlign: 'middle'
          },
          '.ap-info-item-value': {
            display: 'inline-flex',
            alignItems: 'center'
          },
          '.ap-info-item-value .ap-info-item-icon': {
            marginLeft: '4px'
          },
          '.ap-info-item-value-text': {
            verticalAlign: 'middle'
          },
          '.ap-info-item-tappable:hover': {
            cursor: 'pointer'
          },
          '.ap-info-item-tappable:active': {
            opacity: '0.8'
          },
          '.ap-info-item-icon': {
            color: `${iconColor}`
          },
          '.ap-info-item-link': {
            textDecoration: 'underline',
            marginLeft: '4px',
            verticalAlign: 'middle',
            display: 'inline-block',
            color: `${highlightColor}`
          },
          '.ap-info-left': {
            marginLeft: 0
          },
          '.ap-info-right': {
            marginRight: 0
          },
          '.ap-info-item-unit': {
            fontSize: 'x-small',
            verticalAlign: 'bottom',
            display: 'inline-block',
            fontWeight: 100,
            marginLeft: '4px'
          },
          '.ap-info-disclosable-item': {
            width: '100%',
            boxSizing: 'border-box',
            overflow: 'hidden'
          },
          '.ap-info-disclosable-wrap': {
            width: '200%',
            boxSizing: 'border-box',
            transition: `transform ${animationDuration}ms, height ${animationDuration}ms`,
            display: 'flex',
            flexWrap: 'nowrap'
          },
          '.ap-info-disclosable-wrap-open': {
            transform: 'translateX(-50%)'
          },
          '.ap-info-disclosable-summary': {
            boxSizing: 'border-box',
            width: '50%'
          },
          '.ap-info-disclosable-detail': {
            boxSizing: 'border-box',
            width: '50%',
            display: 'flex',
            alignItems: 'center',
            position: 'relative'
          },
          '.ap-info-disclosable-back': {
            padding: '0 16px',
            fontSize: 'inherit',
            height: '100%',
            display: 'inline-flex',
            alignItems: 'center',
            justifyContent: 'center',
            cursor: 'pointer',
            position: 'absolute',
            left: '-8px',
            top: 0,
            bottom: 0
          },
          '.ap-info-disclosable-detail-inner': {
            width: '100%',
            paddingLeft: '24px'
          },
          '.ap-info-disclosable-detail-inner .ap-info-body': {
            marginLeft: 0
          },
          '.ap-info-disclosable-prev-icon': {},
          '.ap-info-footer': {
            display: 'block',
            padding: '16px',
            textAlign: 'center',
            fontSize: 'smaller'
          }
        }
      }
    }
  },
  render () {
    const s = this
    let { props } = s

    let { all, small, medium, large } = ApInfoStyle.styleData(props)

    return (
      <ApStyle data={ Object.assign(all, props.style) }
               smallMediaData={ small }
               mediumMediaData={ medium }
               largeMediaData={ large }
      >{ props.children }</ApStyle>
    )
  }
})

export default ApInfoStyle
