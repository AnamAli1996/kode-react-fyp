/**
 * Style for ApConfirmDialog.
 * @class ApConfirmDialogStyle
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _apemanReactStyle = require('apeman-react-style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** @lends ApConfirmDialogStyle */
var ApConfirmDialogStyle = function (_Component) {
  _inherits(ApConfirmDialogStyle, _Component);

  function ApConfirmDialogStyle() {
    _classCallCheck(this, ApConfirmDialogStyle);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(ApConfirmDialogStyle).apply(this, arguments));
  }

  _createClass(ApConfirmDialogStyle, [{
    key: 'render',
    value: function render() {
      var s = this;
      var props = s.props;

      var _ApConfirmDialogStyle = ApConfirmDialogStyle.styleData(props);

      var all = _ApConfirmDialogStyle.all;
      var small = _ApConfirmDialogStyle.small;
      var medium = _ApConfirmDialogStyle.medium;
      var large = _ApConfirmDialogStyle.large;


      return _react2.default.createElement(
        _apemanReactStyle.ApStyle,
        { data: Object.assign(all, props.style),
          smallMediaData: small,
          mediumMediaData: medium,
          largeMediaData: large
        },
        props.children
      );
    }
  }]);

  return ApConfirmDialogStyle;
}(_react.Component);

Object.assign(ApConfirmDialogStyle, {
  propTypes: {
    style: _react.PropTypes.object,
    buttonHeight: _react.PropTypes.number,
    highlightColor: _react.PropTypes.string
  },

  defaultProps: {
    style: {},
    buttonHeight: 32,
    highlightColor: _apemanReactStyle.ApStyle.DEFAULT_HIGHLIGHT_COLOR,
    errorColor: _apemanReactStyle.ApStyle.ERROR_COLOR
  },
  styleData: function styleData(config) {
    var buttonHeight = config.buttonHeight;
    var highlightColor = config.highlightColor;
    var errorColor = config.errorColor;

    var checkboxHeight = 32;
    return {
      all: {
        '.ap-confirm-dialog .ap-dialog-body': {
          paddingBottom: buttonHeight + 8 + 'px',
          textAlign: 'center'
        },
        '.ap-confirm-dialog .ap-dialog-close-button-icon': {},
        '.ap-confirm-dialog-control': {
          display: 'block',
          textAlign: 'center',
          position: 'relative',
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(255,255,255,0.9)',
          padding: '16px 0'
        },
        '.ap-confirm-dialog-button': {
          display: 'inline-block',
          width: '80%',
          textAlign: 'center',
          border: '1px solid #EEE',
          margin: '0 auto',
          background: '' + highlightColor,
          color: 'white',
          boxSizing: 'border-box',
          maxWidth: '320px'
        },
        '.ap-confirm-dialog-button-disabled, .ap-confirm-dialog-button-disabled:hover, .ap-confirm-dialog-button-disabled:active': {
          cursor: 'default',
          boxShadow: 'none',
          color: '#888',
          borderColor: '#888',
          backgroundColor: '#F0F0F0'
        },
        '.ap-confirm-dialog-checkbox': {
          margin: '8px auto',
          lineHeight: checkboxHeight + 'px',
          textAlign: 'left'
        },
        '.ap-confirm-dialog-checkbox i:before': {
          lineHeight: checkboxHeight + 'px'
        },
        '.ap-confirm-dialog-message': {
          fontSize: 'smaller',
          padding: '16px 0'
        },
        '.ap-confirm-dialog-err': {
          fontSize: 'smaller',
          textAlign: 'center',
          color: '' + errorColor,
          fontStyle: 'italic'
        }
      },
      small: {},
      medium: {},
      large: {}
    };
  }
});

exports.default = ApConfirmDialogStyle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwX2NvbmZpcm1fZGlhbG9nX3N0eWxlLmpzeCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFLQTs7Ozs7Ozs7QUFFQTs7OztBQUNBOzs7Ozs7Ozs7O0FBRUE7SUFDTSxvQjs7Ozs7Ozs7Ozs7NkJBQ007QUFDUixVQUFNLElBQUksSUFBVjtBQURRLFVBRUYsS0FGRSxHQUVRLENBRlIsQ0FFRixLQUZFOztBQUFBLGtDQUk0QixxQkFBcUIsU0FBckIsQ0FBK0IsS0FBL0IsQ0FKNUI7O0FBQUEsVUFJRixHQUpFLHlCQUlGLEdBSkU7QUFBQSxVQUlHLEtBSkgseUJBSUcsS0FKSDtBQUFBLFVBSVUsTUFKVix5QkFJVSxNQUpWO0FBQUEsVUFJa0IsS0FKbEIseUJBSWtCLEtBSmxCOzs7QUFNUixhQUNFO0FBQUE7QUFBQSxVQUFTLE1BQU8sT0FBTyxNQUFQLENBQWMsR0FBZCxFQUFtQixNQUFNLEtBQXpCLENBQWhCO0FBQ1MsMEJBQWlCLEtBRDFCO0FBRVMsMkJBQWtCLE1BRjNCO0FBR1MsMEJBQWlCO0FBSDFCO0FBSUcsY0FBTTtBQUpULE9BREY7QUFPRDs7Ozs7O0FBR0gsT0FBTyxNQUFQLENBQWMsb0JBQWQsRUFBb0M7QUFDbEMsYUFBVztBQUNULFdBQU8saUJBQU0sTUFESjtBQUVULGtCQUFjLGlCQUFNLE1BRlg7QUFHVCxvQkFBZ0IsaUJBQU07QUFIYixHQUR1Qjs7QUFPbEMsZ0JBQWM7QUFDWixXQUFPLEVBREs7QUFFWixrQkFBYyxFQUZGO0FBR1osb0JBQWdCLDBCQUFRLHVCQUhaO0FBSVosZ0JBQVksMEJBQVE7QUFKUixHQVBvQjtBQWFsQyxXQWJrQyxxQkFhdkIsTUFidUIsRUFhZjtBQUFBLFFBRWYsWUFGZSxHQUtiLE1BTGEsQ0FFZixZQUZlO0FBQUEsUUFHZixjQUhlLEdBS2IsTUFMYSxDQUdmLGNBSGU7QUFBQSxRQUlmLFVBSmUsR0FLYixNQUxhLENBSWYsVUFKZTs7QUFNakIsUUFBSSxpQkFBaUIsRUFBckI7QUFDQSxXQUFPO0FBQ0wsV0FBSztBQUNILDhDQUFzQztBQUNwQyx5QkFBa0IsZUFBZSxDQUFqQyxPQURvQztBQUVwQyxxQkFBVztBQUZ5QixTQURuQztBQUtILDJEQUFtRCxFQUxoRDtBQU1ILHNDQUE4QjtBQUM1QixtQkFBUyxPQURtQjtBQUU1QixxQkFBVyxRQUZpQjtBQUc1QixvQkFBVSxVQUhrQjtBQUk1QixnQkFBTSxDQUpzQjtBQUs1QixpQkFBTyxDQUxxQjtBQU01QixrQkFBUSxDQU5vQjtBQU81QiwyQkFBaUIsdUJBUFc7QUFRNUIsbUJBQVM7QUFSbUIsU0FOM0I7QUFnQkgscUNBQTZCO0FBQzNCLG1CQUFTLGNBRGtCO0FBRTNCLGlCQUFPLEtBRm9CO0FBRzNCLHFCQUFXLFFBSGdCO0FBSTNCLGtCQUFRLGdCQUptQjtBQUszQixrQkFBUSxRQUxtQjtBQU0zQiwyQkFBZSxjQU5ZO0FBTzNCLGlCQUFPLE9BUG9CO0FBUTNCLHFCQUFXLFlBUmdCO0FBUzNCLG9CQUFVO0FBVGlCLFNBaEIxQjtBQTJCSCxtSUFBMkg7QUFDekgsa0JBQVEsU0FEaUg7QUFFekgscUJBQVcsTUFGOEc7QUFHekgsaUJBQU8sTUFIa0g7QUFJekgsdUJBQWEsTUFKNEc7QUFLekgsMkJBQWlCO0FBTHdHLFNBM0J4SDtBQWtDSCx1Q0FBK0I7QUFDN0Isa0JBQVEsVUFEcUI7QUFFN0Isc0JBQWUsY0FBZixPQUY2QjtBQUc3QixxQkFBVztBQUhrQixTQWxDNUI7QUF1Q0gsZ0RBQXdDO0FBQ3RDLHNCQUFlLGNBQWY7QUFEc0MsU0F2Q3JDO0FBMENILHNDQUE4QjtBQUM1QixvQkFBVSxTQURrQjtBQUU1QixtQkFBUztBQUZtQixTQTFDM0I7QUE4Q0gsa0NBQTBCO0FBQ3hCLG9CQUFVLFNBRGM7QUFFeEIscUJBQVcsUUFGYTtBQUd4QixzQkFBVSxVQUhjO0FBSXhCLHFCQUFXO0FBSmE7QUE5Q3ZCLE9BREE7QUFzREwsYUFBTyxFQXRERjtBQXVETCxjQUFRLEVBdkRIO0FBd0RMLGFBQU87QUF4REYsS0FBUDtBQTBERDtBQTlFaUMsQ0FBcEM7O2tCQWlGZSxvQiIsImZpbGUiOiJhcF9jb25maXJtX2RpYWxvZ19zdHlsZS5qc3giLCJzb3VyY2VSb290IjoibGliIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBTdHlsZSBmb3IgQXBDb25maXJtRGlhbG9nLlxuICogQGNsYXNzIEFwQ29uZmlybURpYWxvZ1N0eWxlXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBSZWFjdCwge0NvbXBvbmVudCwgUHJvcFR5cGVzIGFzIHR5cGVzfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7QXBTdHlsZX0gZnJvbSAnYXBlbWFuLXJlYWN0LXN0eWxlJ1xuXG4vKiogQGxlbmRzIEFwQ29uZmlybURpYWxvZ1N0eWxlICovXG5jbGFzcyBBcENvbmZpcm1EaWFsb2dTdHlsZSBleHRlbmRzIENvbXBvbmVudCB7XG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBsZXQgeyBwcm9wcyB9ID0gc1xuXG4gICAgbGV0IHsgYWxsLCBzbWFsbCwgbWVkaXVtLCBsYXJnZSB9ID0gQXBDb25maXJtRGlhbG9nU3R5bGUuc3R5bGVEYXRhKHByb3BzKVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBcFN0eWxlIGRhdGE9eyBPYmplY3QuYXNzaWduKGFsbCwgcHJvcHMuc3R5bGUpIH1cbiAgICAgICAgICAgICAgIHNtYWxsTWVkaWFEYXRhPXsgc21hbGwgfVxuICAgICAgICAgICAgICAgbWVkaXVtTWVkaWFEYXRhPXsgbWVkaXVtIH1cbiAgICAgICAgICAgICAgIGxhcmdlTWVkaWFEYXRhPXsgbGFyZ2UgfVxuICAgICAgPnsgcHJvcHMuY2hpbGRyZW4gfTwvQXBTdHlsZT5cbiAgICApXG4gIH1cbn1cblxuT2JqZWN0LmFzc2lnbihBcENvbmZpcm1EaWFsb2dTdHlsZSwge1xuICBwcm9wVHlwZXM6IHtcbiAgICBzdHlsZTogdHlwZXMub2JqZWN0LFxuICAgIGJ1dHRvbkhlaWdodDogdHlwZXMubnVtYmVyLFxuICAgIGhpZ2hsaWdodENvbG9yOiB0eXBlcy5zdHJpbmdcbiAgfSxcblxuICBkZWZhdWx0UHJvcHM6IHtcbiAgICBzdHlsZToge30sXG4gICAgYnV0dG9uSGVpZ2h0OiAzMixcbiAgICBoaWdobGlnaHRDb2xvcjogQXBTdHlsZS5ERUZBVUxUX0hJR0hMSUdIVF9DT0xPUixcbiAgICBlcnJvckNvbG9yOiBBcFN0eWxlLkVSUk9SX0NPTE9SXG4gIH0sXG4gIHN0eWxlRGF0YSAoY29uZmlnKSB7XG4gICAgbGV0IHtcbiAgICAgIGJ1dHRvbkhlaWdodCxcbiAgICAgIGhpZ2hsaWdodENvbG9yLFxuICAgICAgZXJyb3JDb2xvclxuICAgIH0gPSBjb25maWdcbiAgICBsZXQgY2hlY2tib3hIZWlnaHQgPSAzMlxuICAgIHJldHVybiB7XG4gICAgICBhbGw6IHtcbiAgICAgICAgJy5hcC1jb25maXJtLWRpYWxvZyAuYXAtZGlhbG9nLWJvZHknOiB7XG4gICAgICAgICAgcGFkZGluZ0JvdHRvbTogYCR7YnV0dG9uSGVpZ2h0ICsgOH1weGAsXG4gICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJ1xuICAgICAgICB9LFxuICAgICAgICAnLmFwLWNvbmZpcm0tZGlhbG9nIC5hcC1kaWFsb2ctY2xvc2UtYnV0dG9uLWljb24nOiB7fSxcbiAgICAgICAgJy5hcC1jb25maXJtLWRpYWxvZy1jb250cm9sJzoge1xuICAgICAgICAgIGRpc3BsYXk6ICdibG9jaycsXG4gICAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDI1NSwyNTUsMjU1LDAuOSknLFxuICAgICAgICAgIHBhZGRpbmc6ICcxNnB4IDAnXG4gICAgICAgIH0sXG4gICAgICAgICcuYXAtY29uZmlybS1kaWFsb2ctYnV0dG9uJzoge1xuICAgICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxuICAgICAgICAgIHdpZHRoOiAnODAlJyxcbiAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgIGJvcmRlcjogJzFweCBzb2xpZCAjRUVFJyxcbiAgICAgICAgICBtYXJnaW46ICcwIGF1dG8nLFxuICAgICAgICAgIGJhY2tncm91bmQ6IGAke2hpZ2hsaWdodENvbG9yfWAsXG4gICAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICAgICAgYm94U2l6aW5nOiAnYm9yZGVyLWJveCcsXG4gICAgICAgICAgbWF4V2lkdGg6ICczMjBweCdcbiAgICAgICAgfSxcbiAgICAgICAgJy5hcC1jb25maXJtLWRpYWxvZy1idXR0b24tZGlzYWJsZWQsIC5hcC1jb25maXJtLWRpYWxvZy1idXR0b24tZGlzYWJsZWQ6aG92ZXIsIC5hcC1jb25maXJtLWRpYWxvZy1idXR0b24tZGlzYWJsZWQ6YWN0aXZlJzoge1xuICAgICAgICAgIGN1cnNvcjogJ2RlZmF1bHQnLFxuICAgICAgICAgIGJveFNoYWRvdzogJ25vbmUnLFxuICAgICAgICAgIGNvbG9yOiAnIzg4OCcsXG4gICAgICAgICAgYm9yZGVyQ29sb3I6ICcjODg4JyxcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICcjRjBGMEYwJ1xuICAgICAgICB9LFxuICAgICAgICAnLmFwLWNvbmZpcm0tZGlhbG9nLWNoZWNrYm94Jzoge1xuICAgICAgICAgIG1hcmdpbjogJzhweCBhdXRvJyxcbiAgICAgICAgICBsaW5lSGVpZ2h0OiBgJHtjaGVja2JveEhlaWdodH1weGAsXG4gICAgICAgICAgdGV4dEFsaWduOiAnbGVmdCdcbiAgICAgICAgfSxcbiAgICAgICAgJy5hcC1jb25maXJtLWRpYWxvZy1jaGVja2JveCBpOmJlZm9yZSc6IHtcbiAgICAgICAgICBsaW5lSGVpZ2h0OiBgJHtjaGVja2JveEhlaWdodH1weGBcbiAgICAgICAgfSxcbiAgICAgICAgJy5hcC1jb25maXJtLWRpYWxvZy1tZXNzYWdlJzoge1xuICAgICAgICAgIGZvbnRTaXplOiAnc21hbGxlcicsXG4gICAgICAgICAgcGFkZGluZzogJzE2cHggMCdcbiAgICAgICAgfSxcbiAgICAgICAgJy5hcC1jb25maXJtLWRpYWxvZy1lcnInOiB7XG4gICAgICAgICAgZm9udFNpemU6ICdzbWFsbGVyJyxcbiAgICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICAgIGNvbG9yOiBgJHtlcnJvckNvbG9yfWAsXG4gICAgICAgICAgZm9udFN0eWxlOiAnaXRhbGljJ1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc21hbGw6IHt9LFxuICAgICAgbWVkaXVtOiB7fSxcbiAgICAgIGxhcmdlOiB7fVxuICAgIH1cbiAgfVxufSlcblxuZXhwb3J0IGRlZmF1bHQgQXBDb25maXJtRGlhbG9nU3R5bGVcbiJdfQ==