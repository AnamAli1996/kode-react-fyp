/**
 * Style for ApHeader.
 * @class ApHeaderStyle
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _acolor = require('acolor');

var _apemanReactStyle = require('apeman-react-style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApHeaderStyle */
var ApHeaderStyle = function (_Component) {
  (0, _inherits3.default)(ApHeaderStyle, _Component);

  function ApHeaderStyle() {
    (0, _classCallCheck3.default)(this, ApHeaderStyle);
    return (0, _possibleConstructorReturn3.default)(this, (ApHeaderStyle.__proto__ || (0, _getPrototypeOf2.default)(ApHeaderStyle)).apply(this, arguments));
  }

  (0, _createClass3.default)(ApHeaderStyle, [{
    key: 'render',
    value: function render() {
      var s = this;
      var props = s.props;

      var _ApHeaderStyle$styleD = ApHeaderStyle.styleData(props);

      var all = _ApHeaderStyle$styleD.all;
      var small = _ApHeaderStyle$styleD.small;
      var medium = _ApHeaderStyle$styleD.medium;
      var large = _ApHeaderStyle$styleD.large;


      return _react2.default.createElement(
        _apemanReactStyle.ApStyle,
        { data: (0, _assign2.default)(all, props.style),
          smallMediaData: small,
          mediumMediaData: medium,
          largeMediaData: large
        },
        props.children
      );
    }
  }]);
  return ApHeaderStyle;
}(_react.Component);

(0, _assign2.default)(ApHeaderStyle, {
  propTypes: {
    style: _react.PropTypes.object,
    height: _react.PropTypes.number,
    color: _react.PropTypes.string,
    backgroundColor: _react.PropTypes.string,
    highlightColor: _react.PropTypes.string,
    highlightHeight: _react.PropTypes.number,
    tabHeight: _react.PropTypes.number
  },
  defaultProps: {
    style: {},
    height: 44,
    tabHeight: 36,
    color: '#555555',
    highlightColor: _apemanReactStyle.ApStyle.DEFAULT_HIGHLIGHT_COLOR,
    backgroundColor: _apemanReactStyle.ApStyle.DEFAULT_BACKGROUND_COLOR,
    borderColor: '#F0F0F0',
    highlightHeight: 2
  },

  styleData: function styleData(config) {
    var color = config.color;
    var backgroundColor = config.backgroundColor;
    var highlightColor = config.highlightColor;
    var borderColor = config.borderColor;
    var height = config.height;
    var highlightHeight = config.highlightHeight;
    var tabHeight = config.tabHeight;

    return {
      all: {
        '.ap-header-space': {
          display: 'block',
          position: 'relative',
          width: '100%',
          height: height + 'px',
          padding: 0,
          margin: 0,
          boxSizing: 'border-box'
        },
        '.ap-header': {
          position: 'fixed',
          left: 0,
          top: 0,
          height: 'auto',
          textAlign: 'left',
          boxSizing: 'border-box',
          width: '100%',
          background: '' + (0, _acolor.alpha)(backgroundColor, 0.9),
          zIndex: 9
        },
        '.ap-header-back': {
          position: 'absolute',
          left: 0,
          top: 0,
          right: 0,
          zIndex: -1,
          height: height + 'px',
          borderBottom: '1px solid ' + borderColor
        },
        '.ap-header-logo': {
          padding: 0,
          margin: 0,
          display: 'inline-block',
          fontWeight: 100,
          lineHeight: height + 'px',
          fontSize: parseInt(height * 2 / 3) + 'px',
          maxWidth: '100%'
        },
        '.ap-header-logo .ap-header-logo-link,.ap-header-logo .ap-header-logo-link:link': {
          display: 'inline-block',
          padding: '0 2px',
          cursor: 'default',
          color: '' + color,
          lineHeight: height + 'px',
          maxWidth: '100%',
          textDecoration: 'none',
          wordWrap: 'break-word'
        },
        '.ap-header-logo .ap-header-logo-link:hover': {
          textDecoration: 'none'
        },
        '.ap-header-logo .ap-header-logo-link:active': {
          opacity: 0.8,
          textDecoration: 'none'
        },
        '.ap-header-tab-wrap': {
          display: 'block',
          padding: 0,
          margin: 0,
          borderBottom: '1px solid ' + borderColor
        },
        '.ap-header-tab': {
          display: 'flex',
          boxSizing: 'border-box',
          fontSize: '14px',
          color: '#888',
          height: tabHeight + 'px',
          lineHeight: tabHeight + 'px',
          background: 'transparent'
        },
        '.ap-header-tab-item': {
          flex: 1,
          padding: '0 8px',
          textAlign: 'center',
          boxSizing: 'border-box',
          cursor: 'pointer',
          display: 'inline-block',
          textDecoration: 'none',
          height: tabHeight + 'px',
          borderColor: 'transparent',
          borderBottomWidth: highlightHeight + 'px'
        },
        '.ap-header-tab-item:hover': {
          textDecoration: 'none'
        },
        '.ap-header-tab-item:active': {
          color: '' + highlightColor,
          borderColor: 'transparent',
          opacity: 0.66
        },
        '.ap-header-tab-item-selected,.ap-header-tab-item-selected:hover,.ap-header-tab-item-selected:active': {
          color: '' + highlightColor,
          borderColor: 'transparent transparent ' + highlightColor
        },
        '.ap-header-menu': {
          position: 'relative',
          float: 'right',
          padding: '0px'
        },
        '.ap-header-menu-item': {
          padding: '0 8px',
          margin: '4px 8px',
          fontSize: '12px',
          verticalAlign: 'middle',
          height: height - 8 + 'px',
          lineHeight: height - 8 + 'px'
        },
        '.ap-header-dropdown': {
          float: 'right',
          position: 'static'
        },
        '.ap-header-dropdown .ap-dropdown-content': {
          left: 'auto',
          right: 0
        },
        '.ap-header-dropdown-item': {}
      },
      small: {
        '.ap-header-logo': {
          float: 'left'
        },
        '.ap-header-tab': {
          display: 'inline-block',
          margin: '0 16px',
          padding: '0 8px',
          height: height + 'px',
          lineHeight: height + 'px'
        },

        '.ap-header-tab-item': {
          flex: 'initial',
          height: height + 'px',
          padding: '0 16px'
        },
        '.ap-header-back': {
          borderBottom: 'none'
        }
      }
    };
  }
});

exports.default = ApHeaderStyle;
//# sourceMappingURL=data:application/json;base64,