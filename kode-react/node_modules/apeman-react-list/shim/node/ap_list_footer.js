/**
 * List footer component.
 * @class ApListFooter
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _apemanReactSpinner = require('apeman-react-spinner');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApListFooter */
var ApListFooter = _react2.default.createClass({
  displayName: 'ApListFooter',


  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Show spinner */
    spinning: _react.PropTypes.bool,
    /** Spinner theme */
    spinner: _react.PropTypes.string
  },

  mixins: [],

  statics: {},

  getInitialState: function getInitialState() {
    return {};
  },
  getDefaultProps: function getDefaultProps() {
    return {
      spinning: false,
      spinner: _apemanReactSpinner.ApSpinner.DEFAULT_THEME
    };
  },
  render: function render() {
    var s = this;
    var state = s.state,
        props = s.props;


    return _react2.default.createElement(
      'div',
      { className: (0, _classnames2.default)('ap-list-footer', props.className),
        style: (0, _assign2.default)({}, props.style) },
      _react2.default.createElement(_apemanReactSpinner.ApSpinner, { enabled: props.spinning,
        className: 'ap-list-footer-spinner'
      }),
      props.children
    );
  }

  // --------------------
  // Lifecycle
  // --------------------

  // ------------------
  // Custom
  // ------------------

  // ------------------
  // Private
  // ------------------

});

exports.default = ApListFooter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwX2xpc3RfZm9vdGVyLmpzeCJdLCJuYW1lcyI6WyJBcExpc3RGb290ZXIiLCJjcmVhdGVDbGFzcyIsInByb3BUeXBlcyIsInNwaW5uaW5nIiwiYm9vbCIsInNwaW5uZXIiLCJzdHJpbmciLCJtaXhpbnMiLCJzdGF0aWNzIiwiZ2V0SW5pdGlhbFN0YXRlIiwiZ2V0RGVmYXVsdFByb3BzIiwiREVGQVVMVF9USEVNRSIsInJlbmRlciIsInMiLCJzdGF0ZSIsInByb3BzIiwiY2xhc3NOYW1lIiwic3R5bGUiLCJjaGlsZHJlbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBS0E7Ozs7Ozs7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTtBQUNBLElBQU1BLGVBQWUsZ0JBQU1DLFdBQU4sQ0FBa0I7QUFBQTs7O0FBRXJDO0FBQ0E7QUFDQTs7QUFFQUMsYUFBVztBQUNUO0FBQ0FDLGNBQVUsaUJBQU1DLElBRlA7QUFHVDtBQUNBQyxhQUFTLGlCQUFNQztBQUpOLEdBTjBCOztBQWFyQ0MsVUFBUSxFQWI2Qjs7QUFlckNDLFdBQVMsRUFmNEI7O0FBaUJyQ0MsaUJBakJxQyw2QkFpQmxCO0FBQ2pCLFdBQU8sRUFBUDtBQUNELEdBbkJvQztBQXFCckNDLGlCQXJCcUMsNkJBcUJsQjtBQUNqQixXQUFPO0FBQ0xQLGdCQUFVLEtBREw7QUFFTEUsZUFBUyw4QkFBVU07QUFGZCxLQUFQO0FBSUQsR0ExQm9DO0FBNEJyQ0MsUUE1QnFDLG9CQTRCM0I7QUFDUixRQUFNQyxJQUFJLElBQVY7QUFEUSxRQUVGQyxLQUZFLEdBRWVELENBRmYsQ0FFRkMsS0FGRTtBQUFBLFFBRUtDLEtBRkwsR0FFZUYsQ0FGZixDQUVLRSxLQUZMOzs7QUFJUixXQUNFO0FBQUE7QUFBQSxRQUFLLFdBQVksMEJBQVcsZ0JBQVgsRUFBNkJBLE1BQU1DLFNBQW5DLENBQWpCO0FBQ0ssZUFBUSxzQkFBYyxFQUFkLEVBQWtCRCxNQUFNRSxLQUF4QixDQURiO0FBRUUscUVBQVcsU0FBVUYsTUFBTVosUUFBM0I7QUFDVyxtQkFBVTtBQURyQixRQUZGO0FBS0lZLFlBQU1HO0FBTFYsS0FERjtBQVNEOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQXJEcUMsQ0FBbEIsQ0FBckI7O2tCQXdEZWxCLFkiLCJmaWxlIjoiYXBfbGlzdF9mb290ZXIuanN4Iiwic291cmNlUm9vdCI6ImxpYiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGlzdCBmb290ZXIgY29tcG9uZW50LlxuICogQGNsYXNzIEFwTGlzdEZvb3RlclxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgUmVhY3QsIHtQcm9wVHlwZXMgYXMgdHlwZXN9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcydcbmltcG9ydCB7QXBTcGlubmVyfSBmcm9tICdhcGVtYW4tcmVhY3Qtc3Bpbm5lcidcblxuLyoqIEBsZW5kcyBBcExpc3RGb290ZXIgKi9cbmNvbnN0IEFwTGlzdEZvb3RlciA9IFJlYWN0LmNyZWF0ZUNsYXNzKHtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBTcGVjc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIHByb3BUeXBlczoge1xuICAgIC8qKiBTaG93IHNwaW5uZXIgKi9cbiAgICBzcGlubmluZzogdHlwZXMuYm9vbCxcbiAgICAvKiogU3Bpbm5lciB0aGVtZSAqL1xuICAgIHNwaW5uZXI6IHR5cGVzLnN0cmluZ1xuICB9LFxuXG4gIG1peGluczogW10sXG5cbiAgc3RhdGljczoge30sXG5cbiAgZ2V0SW5pdGlhbFN0YXRlICgpIHtcbiAgICByZXR1cm4ge31cbiAgfSxcblxuICBnZXREZWZhdWx0UHJvcHMgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzcGlubmluZzogZmFsc2UsXG4gICAgICBzcGlubmVyOiBBcFNwaW5uZXIuREVGQVVMVF9USEVNRVxuICAgIH1cbiAgfSxcblxuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IHMgPSB0aGlzXG4gICAgbGV0IHsgc3RhdGUsIHByb3BzIH0gPSBzXG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9eyBjbGFzc25hbWVzKCdhcC1saXN0LWZvb3RlcicsIHByb3BzLmNsYXNzTmFtZSkgfVxuICAgICAgICAgICBzdHlsZT17IE9iamVjdC5hc3NpZ24oe30sIHByb3BzLnN0eWxlKSB9PlxuICAgICAgICA8QXBTcGlubmVyIGVuYWJsZWQ9eyBwcm9wcy5zcGlubmluZyB9XG4gICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYXAtbGlzdC1mb290ZXItc3Bpbm5lclwiXG4gICAgICAgIC8+XG4gICAgICAgIHsgcHJvcHMuY2hpbGRyZW4gfVxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gTGlmZWN5Y2xlXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIEN1c3RvbVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gUHJpdmF0ZVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cbn0pXG5cbmV4cG9ydCBkZWZhdWx0IEFwTGlzdEZvb3RlclxuIl19