/**
 * Style for ApDialog.
 * @class ApDialogStyle
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _apemanReactStyle = require('apeman-react-style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** @lends ApDialogStyle */
var ApDialogStyle = function (_Component) {
  _inherits(ApDialogStyle, _Component);

  function ApDialogStyle() {
    _classCallCheck(this, ApDialogStyle);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(ApDialogStyle).apply(this, arguments));
  }

  _createClass(ApDialogStyle, [{
    key: 'render',
    value: function render() {
      var s = this;
      var props = s.props;

      var _ApDialogStyle$styleD = ApDialogStyle.styleData(props);

      var all = _ApDialogStyle$styleD.all;
      var small = _ApDialogStyle$styleD.small;
      var medium = _ApDialogStyle$styleD.medium;
      var large = _ApDialogStyle$styleD.large;


      return _react2.default.createElement(
        _apemanReactStyle.ApStyle,
        { data: Object.assign(all, props.style),
          smallMediaData: small,
          mediumMediaData: medium,
          largeMediaData: large
        },
        props.children
      );
    }
  }]);

  return ApDialogStyle;
}(_react.Component);

Object.assign(ApDialogStyle, {
  propTypes: {
    style: _react.PropTypes.object,
    headerHeight: _react.PropTypes.number
  },

  defaultProps: {
    style: {},
    headerHeight: 44
  },
  styleData: function styleData(config) {
    var CONTENT_WIDTH = _apemanReactStyle.ApStyle.CONTENT_WIDTH;
    var headerHeight = config.headerHeight;
    var backgroundColor = config.backgroundColor;


    return {
      all: {
        '.ap-dialog': {
          display: 'none',
          backgroundColor: 'transparent',
          position: 'fixed',
          left: 0,
          right: 0,
          bottom: 0,
          top: 0,
          zIndex: 99
        },
        '.ap-dialog-back': {
          backgroundColor: 'rgba(0,0,0,0.33)',
          position: 'absolute',
          left: 0,
          right: 0,
          bottom: 0,
          top: 0,
          zIndex: 1
        },
        '.ap-dialog-back-inner': {
          width: '100%',
          height: '100%',
          boxSizing: 'border-box',
          display: 'block'
        },
        '.ap-dialog-present': {
          display: 'block'
        },
        '.ap-dialog-inner': {
          height: '100%',
          width: '100%',
          boxSizing: 'border-box',
          position: 'relative',
          padding: '36px 24px',
          zIndex: 4,
          justifyContent: 'center',
          flexDirection: 'column'
        },
        '.ap-dialog-content': {
          overflow: 'auto',
          zIndex: 8,
          margin: '0 auto',
          height: 'auto',
          backgroundColor: '#FFF',
          border: '1px solid #DDD',
          borderRadius: '8px',
          minHeight: '240px',
          maxWidth: CONTENT_WIDTH,
          width: '100%',
          boxSizing: 'border-box',
          position: 'relative',
          boxShadow: '2px 2px 2px rgba(0,0,0,0.3)'
        },
        '.ap-dialog-title': {
          lineHeight: headerHeight + 'px',
          margin: 0,
          padding: 0,
          fontWeight: 'normal'
        },
        '.ap-dialog-close-button': {
          position: 'absolute',
          top: 0,
          right: 0,
          padding: '0 16px',
          fontSize: '16px',
          lineHeight: headerHeight + 'px',
          display: 'inline-block',
          cursor: 'pointer',
          zIndex: 44
        },
        '.ap-dialog-close-button:hover': {
          opacity: 0.9
        },
        '.ap-dialog-close-button:active': {
          opacity: 0.6
        },
        '.ap-dialog-close-button-icon': {
          lineHeight: headerHeight + 'px'
        },
        '.ap-dialog-header': {
          display: 'block',
          position: 'absolute',
          zIndex: 2,
          textAlign: 'center',
          top: 0,
          left: 0,
          right: 0,
          height: headerHeight + 'px',
          lineHeight: headerHeight + 'px',
          boxSizing: 'border-box',
          borderBottom: '1px solid #F5F5F5',
          backgroundColor: 'rgba(255,255,255,0.9)'
        },
        '.ap-dialog-body': {
          padding: headerHeight + 8 + 'px 16px 8px',
          boxSizing: 'border-box',
          maxHeight: '100%',
          height: 'auto',
          width: '100%',
          overflow: 'auto'
        },
        '.ap-dialog-fix': {
          overflow: 'hidden !important'
        },
        '.ap-dialog-spinner': {
          position: 'absolute',
          background: '' + _apemanReactStyle.ApStyle.COVER_BACKGROUND,
          left: 0,
          top: 0,
          right: 0,
          bottom: 0,
          zIndex: 99
        }
      },
      small: {},
      medium: {},
      large: {}
    };
  }
});

exports.default = ApDialogStyle;
//# sourceMappingURL=data:application/json;base64,