/**
 * Style for ApToggle.
 * @class ApToggleStyle
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _apemanReactStyle = require('apeman-react-style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** @lends ApToggleStyle */
var ApToggleStyle = function (_Component) {
  _inherits(ApToggleStyle, _Component);

  function ApToggleStyle() {
    _classCallCheck(this, ApToggleStyle);

    return _possibleConstructorReturn(this, Object.getPrototypeOf(ApToggleStyle).apply(this, arguments));
  }

  _createClass(ApToggleStyle, [{
    key: 'render',
    value: function render() {
      var s = this;
      var props = s.props;

      var _ApToggleStyle$styleD = ApToggleStyle.styleData(props);

      var all = _ApToggleStyle$styleD.all;
      var small = _ApToggleStyle$styleD.small;
      var medium = _ApToggleStyle$styleD.medium;
      var large = _ApToggleStyle$styleD.large;


      return _react2.default.createElement(
        _apemanReactStyle.ApStyle,
        { data: Object.assign(all, props.style),
          smallMediaData: small,
          mediumMediaData: medium,
          largeMediaData: large
        },
        props.children
      );
    }
  }]);

  return ApToggleStyle;
}(_react.Component);

Object.assign(ApToggleStyle, {
  propTypes: {
    style: _react.PropTypes.object,
    highlightColor: _react.PropTypes.string
  },
  defaultProps: {
    style: {},
    highlightColor: _apemanReactStyle.ApStyle.DEFAULT_HIGHLIGHT_COLOR,
    backgroundColor: _apemanReactStyle.ApStyle.DEFAULT_BACKGROUND_COLOR
  },
  styleData: function styleData(config) {
    var highlightColor = config.highlightColor;
    var backgroundColor = config.backgroundColor;


    var borderRadius = 4;
    return {
      all: {
        '.ap-toggle': {
          borderRadius: borderRadius + 'px'
        },
        '.ap-toggle-item': {
          color: '' + highlightColor,
          border: '1px solid ' + highlightColor,
          margin: '0 -1px 0 0',
          background: 'transparent'
        },
        '.ap-toggle-item:first-child': {
          borderRadius: borderRadius + 'px 0 0 ' + borderRadius + 'px'
        },
        '.ap-toggle-item:last-child': {
          borderRadius: '0 ' + borderRadius + 'px ' + borderRadius + 'px 0'
        },
        '.ap-toggle-item-active': {
          background: '' + highlightColor,
          color: 'white'
        }
      }
    };
  }
});

exports.default = ApToggleStyle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwX3RvZ2dsZV9zdHlsZS5qc3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FBS0E7Ozs7Ozs7O0FBRUE7Ozs7QUFDQTs7Ozs7Ozs7OztBQUVBO0lBQ00sYTs7Ozs7Ozs7Ozs7NkJBQ007QUFDUixVQUFNLElBQUksSUFBVjtBQURRLFVBRUYsS0FGRSxHQUVRLENBRlIsQ0FFRixLQUZFOztBQUFBLGtDQUk0QixjQUFjLFNBQWQsQ0FBd0IsS0FBeEIsQ0FKNUI7O0FBQUEsVUFJRixHQUpFLHlCQUlGLEdBSkU7QUFBQSxVQUlHLEtBSkgseUJBSUcsS0FKSDtBQUFBLFVBSVUsTUFKVix5QkFJVSxNQUpWO0FBQUEsVUFJa0IsS0FKbEIseUJBSWtCLEtBSmxCOzs7QUFNUixhQUNFO0FBQUE7QUFBQSxVQUFTLE1BQU8sT0FBTyxNQUFQLENBQWMsR0FBZCxFQUFtQixNQUFNLEtBQXpCLENBQWhCO0FBQ1MsMEJBQWlCLEtBRDFCO0FBRVMsMkJBQWtCLE1BRjNCO0FBR1MsMEJBQWlCO0FBSDFCO0FBSUcsY0FBTTtBQUpULE9BREY7QUFPRDs7Ozs7O0FBR0gsT0FBTyxNQUFQLENBQWMsYUFBZCxFQUE2QjtBQUMzQixhQUFXO0FBQ1QsV0FBTyxpQkFBTSxNQURKO0FBRVQsb0JBQWdCLGlCQUFNO0FBRmIsR0FEZ0I7QUFLM0IsZ0JBQWM7QUFDWixXQUFPLEVBREs7QUFFWixvQkFBZ0IsMEJBQVEsdUJBRlo7QUFHWixxQkFBaUIsMEJBQVE7QUFIYixHQUxhO0FBVTNCLFdBVjJCLHFCQVVoQixNQVZnQixFQVVSO0FBQUEsUUFDWCxjQURXLEdBQ3lCLE1BRHpCLENBQ1gsY0FEVztBQUFBLFFBQ0ssZUFETCxHQUN5QixNQUR6QixDQUNLLGVBREw7OztBQUdqQixRQUFJLGVBQWUsQ0FBbkI7QUFDQSxXQUFPO0FBQ0wsV0FBSztBQUNILHNCQUFjO0FBQ1osd0JBQWlCLFlBQWpCO0FBRFksU0FEWDtBQUlILDJCQUFtQjtBQUNqQixzQkFBVSxjQURPO0FBRWpCLGlDQUFxQixjQUZKO0FBR2pCLGtCQUFRLFlBSFM7QUFJakIsc0JBQVk7QUFKSyxTQUpoQjtBQVVILHVDQUErQjtBQUM3Qix3QkFBaUIsWUFBakIsZUFBdUMsWUFBdkM7QUFENkIsU0FWNUI7QUFhSCxzQ0FBOEI7QUFDNUIsK0JBQW1CLFlBQW5CLFdBQXFDLFlBQXJDO0FBRDRCLFNBYjNCO0FBZ0JILGtDQUEwQjtBQUN4QiwyQkFBZSxjQURTO0FBRXhCLGlCQUFPO0FBRmlCO0FBaEJ2QjtBQURBLEtBQVA7QUF1QkQ7QUFyQzBCLENBQTdCOztrQkF3Q2UsYSIsImZpbGUiOiJhcF90b2dnbGVfc3R5bGUuanN4Iiwic291cmNlUm9vdCI6ImxpYiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU3R5bGUgZm9yIEFwVG9nZ2xlLlxuICogQGNsYXNzIEFwVG9nZ2xlU3R5bGVcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuaW1wb3J0IFJlYWN0LCB7Q29tcG9uZW50LCBQcm9wVHlwZXMgYXMgdHlwZXN9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtBcFN0eWxlfSBmcm9tICdhcGVtYW4tcmVhY3Qtc3R5bGUnXG5cbi8qKiBAbGVuZHMgQXBUb2dnbGVTdHlsZSAqL1xuY2xhc3MgQXBUb2dnbGVTdHlsZSBleHRlbmRzIENvbXBvbmVudCB7XG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBsZXQgeyBwcm9wcyB9ID0gc1xuXG4gICAgbGV0IHsgYWxsLCBzbWFsbCwgbWVkaXVtLCBsYXJnZSB9ID0gQXBUb2dnbGVTdHlsZS5zdHlsZURhdGEocHJvcHMpXG5cbiAgICByZXR1cm4gKFxuICAgICAgPEFwU3R5bGUgZGF0YT17IE9iamVjdC5hc3NpZ24oYWxsLCBwcm9wcy5zdHlsZSkgfVxuICAgICAgICAgICAgICAgc21hbGxNZWRpYURhdGE9eyBzbWFsbCB9XG4gICAgICAgICAgICAgICBtZWRpdW1NZWRpYURhdGE9eyBtZWRpdW0gfVxuICAgICAgICAgICAgICAgbGFyZ2VNZWRpYURhdGE9eyBsYXJnZSB9XG4gICAgICA+eyBwcm9wcy5jaGlsZHJlbiB9PC9BcFN0eWxlPlxuICAgIClcbiAgfVxufVxuXG5PYmplY3QuYXNzaWduKEFwVG9nZ2xlU3R5bGUsIHtcbiAgcHJvcFR5cGVzOiB7XG4gICAgc3R5bGU6IHR5cGVzLm9iamVjdCxcbiAgICBoaWdobGlnaHRDb2xvcjogdHlwZXMuc3RyaW5nXG4gIH0sXG4gIGRlZmF1bHRQcm9wczoge1xuICAgIHN0eWxlOiB7fSxcbiAgICBoaWdobGlnaHRDb2xvcjogQXBTdHlsZS5ERUZBVUxUX0hJR0hMSUdIVF9DT0xPUixcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IEFwU3R5bGUuREVGQVVMVF9CQUNLR1JPVU5EX0NPTE9SXG4gIH0sXG4gIHN0eWxlRGF0YSAoY29uZmlnKSB7XG4gICAgbGV0IHsgaGlnaGxpZ2h0Q29sb3IsIGJhY2tncm91bmRDb2xvciB9ID0gY29uZmlnXG5cbiAgICBsZXQgYm9yZGVyUmFkaXVzID0gNFxuICAgIHJldHVybiB7XG4gICAgICBhbGw6IHtcbiAgICAgICAgJy5hcC10b2dnbGUnOiB7XG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiBgJHtib3JkZXJSYWRpdXN9cHhgXG4gICAgICAgIH0sXG4gICAgICAgICcuYXAtdG9nZ2xlLWl0ZW0nOiB7XG4gICAgICAgICAgY29sb3I6IGAke2hpZ2hsaWdodENvbG9yfWAsXG4gICAgICAgICAgYm9yZGVyOiBgMXB4IHNvbGlkICR7aGlnaGxpZ2h0Q29sb3J9YCxcbiAgICAgICAgICBtYXJnaW46ICcwIC0xcHggMCAwJyxcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAndHJhbnNwYXJlbnQnXG4gICAgICAgIH0sXG4gICAgICAgICcuYXAtdG9nZ2xlLWl0ZW06Zmlyc3QtY2hpbGQnOiB7XG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiBgJHtib3JkZXJSYWRpdXN9cHggMCAwICR7Ym9yZGVyUmFkaXVzfXB4YFxuICAgICAgICB9LFxuICAgICAgICAnLmFwLXRvZ2dsZS1pdGVtOmxhc3QtY2hpbGQnOiB7XG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiBgMCAke2JvcmRlclJhZGl1c31weCAke2JvcmRlclJhZGl1c31weCAwYFxuICAgICAgICB9LFxuICAgICAgICAnLmFwLXRvZ2dsZS1pdGVtLWFjdGl2ZSc6IHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiBgJHtoaWdobGlnaHRDb2xvcn1gLFxuICAgICAgICAgIGNvbG9yOiAnd2hpdGUnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pXG5cbmV4cG9ydCBkZWZhdWx0IEFwVG9nZ2xlU3R5bGVcbiJdfQ==