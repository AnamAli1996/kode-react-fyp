/**
 * Style for ApDropdown.
 * @class ApDropdownStyle
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _apemanReactStyle = require('apeman-react-style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApDropdownStyle */
var ApDropdownStyle = function (_Component) {
  (0, _inherits3.default)(ApDropdownStyle, _Component);

  function ApDropdownStyle() {
    (0, _classCallCheck3.default)(this, ApDropdownStyle);
    return (0, _possibleConstructorReturn3.default)(this, (ApDropdownStyle.__proto__ || (0, _getPrototypeOf2.default)(ApDropdownStyle)).apply(this, arguments));
  }

  (0, _createClass3.default)(ApDropdownStyle, [{
    key: 'render',
    value: function render() {
      var s = this;
      var props = s.props;

      var _ApDropdownStyle$styl = ApDropdownStyle.styleData(props);

      var all = _ApDropdownStyle$styl.all;
      var small = _ApDropdownStyle$styl.small;
      var medium = _ApDropdownStyle$styl.medium;
      var large = _ApDropdownStyle$styl.large;


      return _react2.default.createElement(
        _apemanReactStyle.ApStyle,
        { data: (0, _assign2.default)(all, props.style),
          smallMediaData: small,
          mediumMediaData: medium,
          largeMediaData: large
        },
        props.children
      );
    }
  }]);
  return ApDropdownStyle;
}(_react.Component);

(0, _assign2.default)(ApDropdownStyle, {
  propTypes: {
    style: _react.PropTypes.object,
    highlightColor: _react.PropTypes.string
  },

  defaultProps: {
    style: {},
    highlightColor: _apemanReactStyle.ApStyle.DEFAULT_HIGHLIGHT_COLOR,
    backgroundColor: _apemanReactStyle.ApStyle.DEFAULT_BACKGROUND_COLOR
  },

  styleData: function styleData(config) {
    var highlightColor = config.highlightColor;
    var backgroundColor = config.backgroundColor;

    var duration = '400ms';
    var buttonHeight = 44;
    return {
      all: {
        '.ap-dropdown': {
          position: 'relative',
          boxSizing: 'border-box',
          display: 'inline-block'
        },
        '.ap-dropdown-content': {
          position: 'absolute',
          boxSizing: 'border-box',
          overflow: 'hidden',
          transition: 'width ' + duration + ', height ' + duration,
          top: buttonHeight + 'px',
          left: 0,
          background: 'rgba(255,255,255,0.95)',
          width: '100%',
          maxWidth: _apemanReactStyle.ApStyle.CONTENT_WIDTH,
          border: '1px solid #EEE',
          zIndex: 99
        },
        '.ap-dropdown-content-inner': {
          minWidth: '192px',
          minHeight: '40px'
        },
        '.ap-dropdown-open .ap-dropdown-content': {},
        '.ap-dropdown-closed .ap-dropdown-content': {
          height: '0 !important',
          border: 'none'
        },

        '.ap-dropdown-button-wrap': {
          position: 'relative'
        },
        '.ap-dropdown-button': {
          margin: 0,
          padding: '0 8px',
          boxSizing: 'border-box',
          verticalAlign: 'middle',
          border: 'none',
          color: 'inherit',
          lineHeight: buttonHeight + 'px',
          height: buttonHeight + 'px',
          backgroundColor: 'transparent',
          display: 'inline-flex',
          justifyContent: 'center',
          alignItems: 'center'
        },
        '.ap-dropdown-button-aligner': {
          height: '100%',
          width: '1px',
          verticalAlign: 'middle'
        },
        '.ap-dropdown-item': {
          display: 'block',
          boxSizing: 'border-box',
          textDecoration: 'none',
          padding: '4px 8px',
          lineHeight: '36px',
          borderBottom: '1px solid #F0F0F0'
        },
        '.ap-dropdown-item:hover': {
          cursor: 'pointer',
          background: '#FAFAFA'
        },
        '.ap-dropdown-item:active': {
          background: '#F0F0F0'
        },
        '.ap-dropdown-icon': {
          display: 'inline-block',
          margin: '0 8px',
          fontSize: '12px'
        },
        '.ap-dropdown-spinner-cover': {
          position: 'absolute',
          left: 0,
          top: 0,
          right: 0,
          bottom: 0,
          textAlign: 'center',
          boxSizing: 'border-box',
          padding: '16px 32px',
          background: 'rgba(255, 255, 255, 0.75)',
          border: '1px solid rgba(255, 255, 255, 0.9)',
          zIndex: 101,
          color: '#888'
        }
      }
    };
  }
});

exports.default = ApDropdownStyle;
//# sourceMappingURL=data:application/json;base64,