/**
 * iframe components.
 * @class ApFrame
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _apemanReactSpinner = require('apeman-react-spinner');

var _asobj = require('asobj');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApFrame */
var ApFrame = _react2.default.createClass({
  displayName: 'ApFrame',


  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Source URL string */
    src: _react.PropTypes.string,
    /** Theme of spinner */
    spinner: _react.PropTypes.string,
    /** Display with full screen */
    full: _react.PropTypes.bool,
    /** Component width */
    width: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string]),
    /** Component height */
    height: _react.PropTypes.oneOfType([_react.PropTypes.number, _react.PropTypes.string]),
    /** Ref to iframe */
    iframeRef: _react.PropTypes.func
  },

  mixins: [],

  statics: {},

  getInitialState: function getInitialState() {
    var s = this;
    var props = s.props;

    return {
      spinning: !!props.src,
      err: null
    };
  },
  getDefaultProps: function getDefaultProps() {
    return {
      src: null,
      full: false,
      spinner: _apemanReactSpinner.ApSpinner.DEFAULT_THEME,
      width: 'auto',
      height: 'auto'
    };
  },
  render: function render() {
    var s = this;
    var state = s.state;
    var props = s.props;

    var className = (0, _classnames2.default)('ap-frame', {
      'ap-frame-full': props.full
    }, props.className);
    var style = Object.assign({
      width: props.width,
      height: props.height
    }, props.style);
    return _react2.default.createElement(
      'div',
      { className: className,
        style: style },
      _react2.default.createElement(_apemanReactSpinner.ApSpinner, { enabled: state.spinning,
        theme: props.spinner,
        className: 'ap-frame-spinner'
      }),
      _react2.default.createElement('iframe', { src: props.src,
        className: 'ap-frame-frame',
        frameBorder: '0',
        onLoad: s.handleLoad,
        ref: props.iframeRef
      }),
      props.children
    );
  },


  // --------------------
  // Lifecycle
  // --------------------

  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    var s = this;
    var props = s.props;
    var state = s.state;

    return !(0, _asobj.shallowEqual)(props, nextProps) || !(0, _asobj.shallowEqual)(state, nextState);
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var s = this;
    var state = s.state;

    var stopSpinning = state.spinning && !nextProps.src;
    if (stopSpinning) {
      s.setState({ spinning: false });
    }
  },


  // ------------------
  // Custom
  // ------------------

  handleLoad: function handleLoad(e) {
    var s = this;
    var props = s.props;

    s.setState({
      spinning: false
    });
    if (props.onLoad) {
      props.onLoad(e);
    }
  }

  // ------------------
  // Private
  // ------------------

});

exports.default = ApFrame;
//# sourceMappingURL=data:application/json;base64,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S0FBWixFQUFYO0FBQ0Q7QUFDRixHQTVGK0I7OztBQThGaEM7QUFDQTtBQUNBOztBQUVBLFlBbEdnQyxzQkFrR3BCLENBbEdvQixFQWtHakI7QUFDYixRQUFNLElBQUksSUFBVjtBQURhLFFBRVAsS0FGTyxHQUVHLENBRkgsQ0FFUCxLQUZPOztBQUdiLE1BQUUsUUFBRixDQUFXO0FBQ1QsZ0JBQVU7QUFERCxLQUFYO0FBR0EsUUFBSSxNQUFNLE1BQVYsRUFBa0I7QUFDaEIsWUFBTSxNQUFOLENBQWEsQ0FBYjtBQUNEO0FBQ0Y7O0FBRUQ7QUFDQTtBQUNBOztBQS9HZ0MsQ0FBbEIsQ0FBaEI7O2tCQWtIZSxPIiwiZmlsZSI6ImFwX2ZyYW1lLmpzeCIsInNvdXJjZVJvb3QiOiJsaWIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIGlmcmFtZSBjb21wb25lbnRzLlxuICogQGNsYXNzIEFwRnJhbWVcbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuaW1wb3J0IFJlYWN0LCB7UHJvcFR5cGVzIGFzIHR5cGVzfSBmcm9tICdyZWFjdCdcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nXG5pbXBvcnQgY2xhc3NuYW1lcyBmcm9tICdjbGFzc25hbWVzJ1xuaW1wb3J0IHtBcFNwaW5uZXJ9IGZyb20gJ2FwZW1hbi1yZWFjdC1zcGlubmVyJ1xuaW1wb3J0IHtzaGFsbG93RXF1YWx9IGZyb20gJ2Fzb2JqJ1xuXG4vKiogQGxlbmRzIEFwRnJhbWUgKi9cbmNvbnN0IEFwRnJhbWUgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gU3BlY3NcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBwcm9wVHlwZXM6IHtcbiAgICAvKiogU291cmNlIFVSTCBzdHJpbmcgKi9cbiAgICBzcmM6IHR5cGVzLnN0cmluZyxcbiAgICAvKiogVGhlbWUgb2Ygc3Bpbm5lciAqL1xuICAgIHNwaW5uZXI6IHR5cGVzLnN0cmluZyxcbiAgICAvKiogRGlzcGxheSB3aXRoIGZ1bGwgc2NyZWVuICovXG4gICAgZnVsbDogdHlwZXMuYm9vbCxcbiAgICAvKiogQ29tcG9uZW50IHdpZHRoICovXG4gICAgd2lkdGg6IHR5cGVzLm9uZU9mVHlwZShbIHR5cGVzLm51bWJlciwgdHlwZXMuc3RyaW5nIF0pLFxuICAgIC8qKiBDb21wb25lbnQgaGVpZ2h0ICovXG4gICAgaGVpZ2h0OiB0eXBlcy5vbmVPZlR5cGUoWyB0eXBlcy5udW1iZXIsIHR5cGVzLnN0cmluZyBdKSxcbiAgICAvKiogUmVmIHRvIGlmcmFtZSAqL1xuICAgIGlmcmFtZVJlZjogdHlwZXMuZnVuY1xuICB9LFxuXG4gIG1peGluczogW1xuICBdLFxuXG4gIHN0YXRpY3M6IHt9LFxuXG4gIGdldEluaXRpYWxTdGF0ZSAoKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBsZXQgeyBwcm9wcyB9ID0gc1xuICAgIHJldHVybiB7XG4gICAgICBzcGlubmluZzogISFwcm9wcy5zcmMsXG4gICAgICBlcnI6IG51bGxcbiAgICB9XG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3JjOiBudWxsLFxuICAgICAgZnVsbDogZmFsc2UsXG4gICAgICBzcGlubmVyOiBBcFNwaW5uZXIuREVGQVVMVF9USEVNRSxcbiAgICAgIHdpZHRoOiAnYXV0bycsXG4gICAgICBoZWlnaHQ6ICdhdXRvJ1xuICAgIH1cbiAgfSxcblxuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IHMgPSB0aGlzXG4gICAgbGV0IHsgc3RhdGUsIHByb3BzIH0gPSBzXG4gICAgbGV0IGNsYXNzTmFtZSA9IGNsYXNzbmFtZXMoJ2FwLWZyYW1lJywge1xuICAgICAgJ2FwLWZyYW1lLWZ1bGwnOiBwcm9wcy5mdWxsXG4gICAgfSwgcHJvcHMuY2xhc3NOYW1lKVxuICAgIGxldCBzdHlsZSA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgd2lkdGg6IHByb3BzLndpZHRoLFxuICAgICAgaGVpZ2h0OiBwcm9wcy5oZWlnaHRcbiAgICB9LCBwcm9wcy5zdHlsZSlcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9eyBjbGFzc05hbWUgfVxuICAgICAgICAgICBzdHlsZT17IHN0eWxlIH0+XG4gICAgICAgIDxBcFNwaW5uZXIgZW5hYmxlZD17IHN0YXRlLnNwaW5uaW5nIH1cbiAgICAgICAgICAgICAgICAgICB0aGVtZT17IHByb3BzLnNwaW5uZXIgfVxuICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nYXAtZnJhbWUtc3Bpbm5lcidcbiAgICAgICAgPlxuICAgICAgICA8L0FwU3Bpbm5lcj5cbiAgICAgICAgPGlmcmFtZSBzcmM9eyBwcm9wcy5zcmMgfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nYXAtZnJhbWUtZnJhbWUnXG4gICAgICAgICAgICAgICAgZnJhbWVCb3JkZXI9JzAnXG4gICAgICAgICAgICAgICAgb25Mb2FkPXsgcy5oYW5kbGVMb2FkIH1cbiAgICAgICAgICAgICAgICByZWY9eyBwcm9wcy5pZnJhbWVSZWYgfVxuICAgICAgICA+XG4gICAgICAgIDwvaWZyYW1lPlxuICAgICAgICB7IHByb3BzLmNoaWxkcmVuIH1cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfSxcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBMaWZlY3ljbGVcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBzaG91bGRDb21wb25lbnRVcGRhdGUgKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBsZXQgeyBwcm9wcywgc3RhdGUgfSA9IHNcbiAgICByZXR1cm4gIXNoYWxsb3dFcXVhbChwcm9wcywgbmV4dFByb3BzKSB8fCAhc2hhbGxvd0VxdWFsKHN0YXRlLCBuZXh0U3RhdGUpXG4gIH0sXG5cbiAgY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyAobmV4dFByb3BzKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBsZXQgeyBzdGF0ZSB9ID0gc1xuICAgIGxldCBzdG9wU3Bpbm5pbmcgPSBzdGF0ZS5zcGlubmluZyAmJiAhbmV4dFByb3BzLnNyY1xuICAgIGlmIChzdG9wU3Bpbm5pbmcpIHtcbiAgICAgIHMuc2V0U3RhdGUoeyBzcGlubmluZzogZmFsc2UgfSlcbiAgICB9XG4gIH0sXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIEN1c3RvbVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cblxuICBoYW5kbGVMb2FkIChlKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBsZXQgeyBwcm9wcyB9ID0gc1xuICAgIHMuc2V0U3RhdGUoe1xuICAgICAgc3Bpbm5pbmc6IGZhbHNlXG4gICAgfSlcbiAgICBpZiAocHJvcHMub25Mb2FkKSB7XG4gICAgICBwcm9wcy5vbkxvYWQoZSlcbiAgICB9XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gUHJpdmF0ZVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cbn0pXG5cbmV4cG9ydCBkZWZhdWx0IEFwRnJhbWVcbiJdfQ==