/**
 * Radio button component.
 * @class ApRadio
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _apemanReactIcon = require('apeman-react-icon');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DEFAULT_ICON = 'ion ion-ios-circle-outline';
var DEFAULT_CHECKED_ICON = 'ion ion-ios-circle-filled';

/** @lends ApRadio */
var ApRadio = _react2.default.createClass({
  displayName: 'ApRadio',


  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Element id of the radio box */
    id: _react.PropTypes.string.isRequired,
    /** Name of the radio box */
    name: _react.PropTypes.string.isRequired,
    /** value of the radio box */
    value: _react.PropTypes.string.isRequired,
    /** Title text */
    title: _react.PropTypes.string,
    /** Checked or not */
    checked: _react.PropTypes.bool,
    /** Handler for change event */
    onChange: _react.PropTypes.func,
    /** Class name for icon */
    icon: _react.PropTypes.string,
    /** Class name for checked icon */
    checkedIcon: _react.PropTypes.string
  },

  statics: {
    DEFAULT_ICON: DEFAULT_ICON,
    DEFAULT_CHECKED_ICON: DEFAULT_CHECKED_ICON
  },

  getInitialState: function getInitialState() {
    return {};
  },
  getDefaultProps: function getDefaultProps() {
    return {
      id: null,
      name: null,
      value: null,
      title: '',
      checked: false,
      onChange: null,
      icon: DEFAULT_ICON,
      checkedIcon: DEFAULT_CHECKED_ICON
    };
  },
  render: function render() {
    var _iconClass;

    var s = this;
    var props = s.props;
    var id = props.id;
    var name = props.name;
    var value = props.value;
    var checked = props.checked;
    var onChange = props.onChange;


    var iconClass = (_iconClass = {
      'ap-radio-icon-checked': checked
    }, _defineProperty(_iconClass, props.checkedIcon, checked), _defineProperty(_iconClass, props.icon, !checked), _iconClass);

    var className = (0, _classnames2.default)('ap-radio', {
      'ap-checkbox-checked': checked
    });
    return _react2.default.createElement(
      'label',
      { className: className,
        htmlFor: id,
        id: id + '-wrap' },
      _react2.default.createElement(_apemanReactIcon.ApIcon, { className: (0, _classnames2.default)('ap-radio-icon', iconClass) }),
      _react2.default.createElement('input', { type: 'radio',
        className: (0, _classnames2.default)('ap-radio-input'),
        id: id,
        name: name,
        value: value,
        checked: checked,
        onChange: onChange }),
      _react2.default.createElement(
        'span',
        { className: (0, _classnames2.default)('ap-radio-title') },
        props.title
      )
    );
  }
});

exports.default = ApRadio;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwX3JhZGlvLmpzeCJdLCJuYW1lcyI6WyJERUZBVUxUX0lDT04iLCJERUZBVUxUX0NIRUNLRURfSUNPTiIsIkFwUmFkaW8iLCJjcmVhdGVDbGFzcyIsInByb3BUeXBlcyIsImlkIiwic3RyaW5nIiwiaXNSZXF1aXJlZCIsIm5hbWUiLCJ2YWx1ZSIsInRpdGxlIiwiY2hlY2tlZCIsImJvb2wiLCJvbkNoYW5nZSIsImZ1bmMiLCJpY29uIiwiY2hlY2tlZEljb24iLCJzdGF0aWNzIiwiZ2V0SW5pdGlhbFN0YXRlIiwiZ2V0RGVmYXVsdFByb3BzIiwicmVuZGVyIiwicyIsInByb3BzIiwiaWNvbkNsYXNzIiwiY2xhc3NOYW1lIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFLQTs7Ozs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQSxJQUFNQSxlQUFlLDRCQUFyQjtBQUNBLElBQU1DLHVCQUF1QiwyQkFBN0I7O0FBRUE7QUFDQSxJQUFNQyxVQUFVLGdCQUFNQyxXQUFOLENBQWtCO0FBQUE7OztBQUVoQztBQUNBO0FBQ0E7O0FBRUFDLGFBQVc7QUFDVDtBQUNBQyxRQUFJLGlCQUFNQyxNQUFOLENBQWFDLFVBRlI7QUFHVDtBQUNBQyxVQUFNLGlCQUFNRixNQUFOLENBQWFDLFVBSlY7QUFLVDtBQUNBRSxXQUFPLGlCQUFNSCxNQUFOLENBQWFDLFVBTlg7QUFPVDtBQUNBRyxXQUFPLGlCQUFNSixNQVJKO0FBU1Q7QUFDQUssYUFBUyxpQkFBTUMsSUFWTjtBQVdUO0FBQ0FDLGNBQVUsaUJBQU1DLElBWlA7QUFhVDtBQUNBQyxVQUFNLGlCQUFNVCxNQWRIO0FBZVQ7QUFDQVUsaUJBQWEsaUJBQU1WO0FBaEJWLEdBTnFCOztBQXlCaENXLFdBQVM7QUFDUGpCLDhCQURPO0FBRVBDO0FBRk8sR0F6QnVCOztBQThCaENpQixpQkE5QmdDLDZCQThCYjtBQUNqQixXQUFPLEVBQVA7QUFDRCxHQWhDK0I7QUFrQ2hDQyxpQkFsQ2dDLDZCQWtDYjtBQUNqQixXQUFPO0FBQ0xkLFVBQUksSUFEQztBQUVMRyxZQUFNLElBRkQ7QUFHTEMsYUFBTyxJQUhGO0FBSUxDLGFBQU8sRUFKRjtBQUtMQyxlQUFTLEtBTEo7QUFNTEUsZ0JBQVUsSUFOTDtBQU9MRSxZQUFNZixZQVBEO0FBUUxnQixtQkFBYWY7QUFSUixLQUFQO0FBVUQsR0E3QytCO0FBK0NoQ21CLFFBL0NnQyxvQkErQ3RCO0FBQUE7O0FBQ1IsUUFBTUMsSUFBSSxJQUFWO0FBRFEsUUFFRkMsS0FGRSxHQUVRRCxDQUZSLENBRUZDLEtBRkU7QUFBQSxRQUtOakIsRUFMTSxHQVVKaUIsS0FWSSxDQUtOakIsRUFMTTtBQUFBLFFBTU5HLElBTk0sR0FVSmMsS0FWSSxDQU1OZCxJQU5NO0FBQUEsUUFPTkMsS0FQTSxHQVVKYSxLQVZJLENBT05iLEtBUE07QUFBQSxRQVFORSxPQVJNLEdBVUpXLEtBVkksQ0FRTlgsT0FSTTtBQUFBLFFBU05FLFFBVE0sR0FVSlMsS0FWSSxDQVNOVCxRQVRNOzs7QUFZUixRQUFJVTtBQUNGLCtCQUF5Qlo7QUFEdkIsbUNBRUFXLE1BQU1OLFdBRk4sRUFFcUJMLE9BRnJCLCtCQUdBVyxNQUFNUCxJQUhOLEVBR2MsQ0FBQ0osT0FIZixjQUFKOztBQU1BLFFBQUlhLFlBQVksMEJBQVcsVUFBWCxFQUF1QjtBQUNyQyw2QkFBdUJiO0FBRGMsS0FBdkIsQ0FBaEI7QUFHQSxXQUNFO0FBQUE7QUFBQSxRQUFPLFdBQVlhLFNBQW5CO0FBQ08saUJBQVVuQixFQURqQjtBQUVPLFlBQU9BLEVBQVAsVUFGUDtBQUdFLCtEQUFRLFdBQVksMEJBQVcsZUFBWCxFQUE0QmtCLFNBQTVCLENBQXBCLEdBSEY7QUFJRSwrQ0FBTyxNQUFLLE9BQVo7QUFDTyxtQkFBWSwwQkFBVyxnQkFBWCxDQURuQjtBQUVPLFlBQUtsQixFQUZaO0FBR08sY0FBT0csSUFIZDtBQUlPLGVBQVFDLEtBSmY7QUFLTyxpQkFBVUUsT0FMakI7QUFNTyxrQkFBV0UsUUFObEIsR0FKRjtBQVdFO0FBQUE7QUFBQSxVQUFNLFdBQVksMEJBQVcsZ0JBQVgsQ0FBbEI7QUFBbURTLGNBQU1aO0FBQXpEO0FBWEYsS0FERjtBQWVEO0FBbkYrQixDQUFsQixDQUFoQjs7a0JBc0ZlUixPIiwiZmlsZSI6ImFwX3JhZGlvLmpzeCIsInNvdXJjZVJvb3QiOiJsaWIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJhZGlvIGJ1dHRvbiBjb21wb25lbnQuXG4gKiBAY2xhc3MgQXBSYWRpb1xuICovXG5cbid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgUmVhY3QsIHtQcm9wVHlwZXMgYXMgdHlwZXN9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcydcbmltcG9ydCB7QXBJY29ufSBmcm9tICdhcGVtYW4tcmVhY3QtaWNvbidcblxuY29uc3QgREVGQVVMVF9JQ09OID0gJ2lvbiBpb24taW9zLWNpcmNsZS1vdXRsaW5lJ1xuY29uc3QgREVGQVVMVF9DSEVDS0VEX0lDT04gPSAnaW9uIGlvbi1pb3MtY2lyY2xlLWZpbGxlZCdcblxuLyoqIEBsZW5kcyBBcFJhZGlvICovXG5jb25zdCBBcFJhZGlvID0gUmVhY3QuY3JlYXRlQ2xhc3Moe1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIFNwZWNzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgLyoqIEVsZW1lbnQgaWQgb2YgdGhlIHJhZGlvIGJveCAqL1xuICAgIGlkOiB0eXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICAvKiogTmFtZSBvZiB0aGUgcmFkaW8gYm94ICovXG4gICAgbmFtZTogdHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgLyoqIHZhbHVlIG9mIHRoZSByYWRpbyBib3ggKi9cbiAgICB2YWx1ZTogdHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgLyoqIFRpdGxlIHRleHQgKi9cbiAgICB0aXRsZTogdHlwZXMuc3RyaW5nLFxuICAgIC8qKiBDaGVja2VkIG9yIG5vdCAqL1xuICAgIGNoZWNrZWQ6IHR5cGVzLmJvb2wsXG4gICAgLyoqIEhhbmRsZXIgZm9yIGNoYW5nZSBldmVudCAqL1xuICAgIG9uQ2hhbmdlOiB0eXBlcy5mdW5jLFxuICAgIC8qKiBDbGFzcyBuYW1lIGZvciBpY29uICovXG4gICAgaWNvbjogdHlwZXMuc3RyaW5nLFxuICAgIC8qKiBDbGFzcyBuYW1lIGZvciBjaGVja2VkIGljb24gKi9cbiAgICBjaGVja2VkSWNvbjogdHlwZXMuc3RyaW5nXG4gIH0sXG5cbiAgc3RhdGljczoge1xuICAgIERFRkFVTFRfSUNPTixcbiAgICBERUZBVUxUX0NIRUNLRURfSUNPTlxuICB9LFxuXG4gIGdldEluaXRpYWxTdGF0ZSAoKSB7XG4gICAgcmV0dXJuIHt9XG4gIH0sXG5cbiAgZ2V0RGVmYXVsdFByb3BzICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IG51bGwsXG4gICAgICBuYW1lOiBudWxsLFxuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICB0aXRsZTogJycsXG4gICAgICBjaGVja2VkOiBmYWxzZSxcbiAgICAgIG9uQ2hhbmdlOiBudWxsLFxuICAgICAgaWNvbjogREVGQVVMVF9JQ09OLFxuICAgICAgY2hlY2tlZEljb246IERFRkFVTFRfQ0hFQ0tFRF9JQ09OXG4gICAgfVxuICB9LFxuXG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBsZXQgeyBwcm9wcyB9ID0gc1xuXG4gICAgbGV0IHtcbiAgICAgIGlkLFxuICAgICAgbmFtZSxcbiAgICAgIHZhbHVlLFxuICAgICAgY2hlY2tlZCxcbiAgICAgIG9uQ2hhbmdlXG4gICAgfSA9IHByb3BzXG5cbiAgICBsZXQgaWNvbkNsYXNzID0ge1xuICAgICAgJ2FwLXJhZGlvLWljb24tY2hlY2tlZCc6IGNoZWNrZWQsXG4gICAgICBbIHByb3BzLmNoZWNrZWRJY29uIF06IGNoZWNrZWQsXG4gICAgICBbIHByb3BzLmljb24gXTogIWNoZWNrZWRcbiAgICB9XG5cbiAgICBsZXQgY2xhc3NOYW1lID0gY2xhc3NuYW1lcygnYXAtcmFkaW8nLCB7XG4gICAgICAnYXAtY2hlY2tib3gtY2hlY2tlZCc6IGNoZWNrZWRcbiAgICB9KVxuICAgIHJldHVybiAoXG4gICAgICA8bGFiZWwgY2xhc3NOYW1lPXsgY2xhc3NOYW1lIH1cbiAgICAgICAgICAgICBodG1sRm9yPXsgaWQgfVxuICAgICAgICAgICAgIGlkPXtgJHtpZH0td3JhcGB9PlxuICAgICAgICA8QXBJY29uIGNsYXNzTmFtZT17IGNsYXNzbmFtZXMoJ2FwLXJhZGlvLWljb24nLCBpY29uQ2xhc3MpIH0vPlxuICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgICAgICAgIGNsYXNzTmFtZT17IGNsYXNzbmFtZXMoJ2FwLXJhZGlvLWlucHV0JykgfVxuICAgICAgICAgICAgICAgaWQ9eyBpZCB9XG4gICAgICAgICAgICAgICBuYW1lPXsgbmFtZSB9XG4gICAgICAgICAgICAgICB2YWx1ZT17IHZhbHVlIH1cbiAgICAgICAgICAgICAgIGNoZWNrZWQ9eyBjaGVja2VkIH1cbiAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsgb25DaGFuZ2UgfS8+XG4gICAgICAgIDxzcGFuIGNsYXNzTmFtZT17IGNsYXNzbmFtZXMoJ2FwLXJhZGlvLXRpdGxlJykgfT57IHByb3BzLnRpdGxlIH08L3NwYW4+XG4gICAgICA8L2xhYmVsPlxuICAgIClcbiAgfVxufSlcblxuZXhwb3J0IGRlZmF1bHQgQXBSYWRpb1xuIl19