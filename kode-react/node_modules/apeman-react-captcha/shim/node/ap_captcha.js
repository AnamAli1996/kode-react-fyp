/**
 * Captcha component.
 * @class ApCaptcha
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _apemanReactIcon = require('apeman-react-icon');

var _apemanReactImage = require('apeman-react-image');

var _apemanReactSpinner = require('apeman-react-spinner');

var _apemanReactTouchable = require('apeman-react-touchable');

var _breact = require('breact');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/** @lends ApCaptcha */
var ApCaptcha = function (_Component) {
  _inherits(ApCaptcha, _Component);

  function ApCaptcha(props) {
    _classCallCheck(this, ApCaptcha);

    var _this = _possibleConstructorReturn(this, (ApCaptcha.__proto__ || Object.getPrototypeOf(ApCaptcha)).call(this, props));

    var s = _this;
    (0, _breact.autobind)(s);
    return _this;
  }

  _createClass(ApCaptcha, [{
    key: 'render',
    value: function render() {
      var s = this;
      var props = s.props;

      return _react2.default.createElement(
        'div',
        { className: (0, _classnames2.default)('ap-captcha', props.className),
          style: Object.assign({}, props.style) },
        _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(_apemanReactSpinner.ApSpinner, { className: 'ap-captcha-spinner',
            enabled: props.spinning,
            theme: props.spinnerTheme
          }),
          _react2.default.createElement(_apemanReactImage.ApImage, { className: 'ap-captcha-image',
            scale: 'fit',
            src: props.src,
            width: props.imageWidth,
            height: props.imageHeight,
            onLoad: s.handleImageLoad,
            onError: s.handleImageError,
            alt: ''
          })
        ),
        _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(
            'a',
            { className: 'ap-captcha-refresh-button' },
            _react2.default.createElement(
              _apemanReactTouchable.ApTouchable,
              { onTap: s.handleTap },
              _react2.default.createElement(
                'span',
                null,
                _react2.default.createElement(_apemanReactIcon.ApIcon, { className: (0, _classnames2.default)('ap-captcha-refresh-icon', props.refreshIcon, {
                    'fa-spin': props.spinning
                  }) }),
                _react2.default.createElement(
                  'span',
                  null,
                  props.refreshText
                )
              )
            )
          )
        )
      );
    }

    // ------------------
    // Custom
    // ------------------

  }, {
    key: 'handleTap',
    value: function handleTap() {
      var s = this;
      var props = s.props;

      if (props.onRefresh) {
        props.onRefresh();
      }
    }
  }, {
    key: 'handleImageLoad',
    value: function handleImageLoad(ev) {
      var s = this;
      var props = s.props;

      if (props.onImageLoad) {
        props.onImageLoad(ev);
      }
    }
  }, {
    key: 'handleImageError',
    value: function handleImageError(err) {
      var s = this;
      var props = s.props;

      if (props.onImageError) {
        props.onImageError(err);
      }
    }
  }]);

  return ApCaptcha;
}(_react.Component);

Object.assign(_react.Component, {
  // --------------------
  // Specs
  // --------------------
  propTypes: {
    /** Image source url */
    src: _react.PropTypes.string,
    /** Handler for refresh */
    onRefresh: _react.PropTypes.func,
    refreshIcon: _react.PropTypes.string,
    refreshText: _react.PropTypes.string,
    imageWidth: _react.PropTypes.number,
    imageHeight: _react.PropTypes.number,
    onImageLoad: _react.PropTypes.func,
    onImageError: _react.PropTypes.func,
    spinning: _react.PropTypes.bool,
    spinnerTheme: _react.PropTypes.string
  },

  defaultProps: {
    src: null,
    onRefresh: null,
    refreshIcon: 'fa fa-refresh',
    refreshText: '',
    imageWidth: 240,
    imageHeight: 94,
    onImageLoad: null,
    onImageError: null,
    spinning: false,
    spinnerTheme: _apemanReactSpinner.ApSpinner.DEFAULT_THEME
  }

});

exports.default = ApCaptcha;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwX2NhcHRjaGEuanN4Il0sIm5hbWVzIjpbIkFwQ2FwdGNoYSIsInByb3BzIiwicyIsImNsYXNzTmFtZSIsIk9iamVjdCIsImFzc2lnbiIsInN0eWxlIiwic3Bpbm5pbmciLCJzcGlubmVyVGhlbWUiLCJzcmMiLCJpbWFnZVdpZHRoIiwiaW1hZ2VIZWlnaHQiLCJoYW5kbGVJbWFnZUxvYWQiLCJoYW5kbGVJbWFnZUVycm9yIiwiaGFuZGxlVGFwIiwicmVmcmVzaEljb24iLCJyZWZyZXNoVGV4dCIsIm9uUmVmcmVzaCIsImV2Iiwib25JbWFnZUxvYWQiLCJlcnIiLCJvbkltYWdlRXJyb3IiLCJwcm9wVHlwZXMiLCJzdHJpbmciLCJmdW5jIiwibnVtYmVyIiwiYm9vbCIsImRlZmF1bHRQcm9wcyIsIkRFRkFVTFRfVEhFTUUiXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUtBOzs7Ozs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7OztBQUVBO0lBQ01BLFM7OztBQUNKLHFCQUFhQyxLQUFiLEVBQW9CO0FBQUE7O0FBQUEsc0hBQ1pBLEtBRFk7O0FBRWxCLFFBQU1DLFNBQU47QUFDQSwwQkFBU0EsQ0FBVDtBQUhrQjtBQUluQjs7Ozs2QkFFUztBQUNSLFVBQU1BLElBQUksSUFBVjtBQURRLFVBRUZELEtBRkUsR0FFUUMsQ0FGUixDQUVGRCxLQUZFOztBQUdSLGFBQ0U7QUFBQTtBQUFBLFVBQUssV0FBWSwwQkFBVyxZQUFYLEVBQXlCQSxNQUFNRSxTQUEvQixDQUFqQjtBQUNLLGlCQUFPQyxPQUFPQyxNQUFQLENBQWMsRUFBZCxFQUFrQkosTUFBTUssS0FBeEIsQ0FEWjtBQUVFO0FBQUE7QUFBQTtBQUNFLHlFQUFXLFdBQVUsb0JBQXJCO0FBQ1cscUJBQVVMLE1BQU1NLFFBRDNCO0FBRVcsbUJBQVFOLE1BQU1PO0FBRnpCLFlBREY7QUFLRSxxRUFBUyxXQUFVLGtCQUFuQjtBQUNTLG1CQUFNLEtBRGY7QUFFUyxpQkFBTVAsTUFBTVEsR0FGckI7QUFHUyxtQkFBUVIsTUFBTVMsVUFIdkI7QUFJUyxvQkFBU1QsTUFBTVUsV0FKeEI7QUFLUyxvQkFBU1QsRUFBRVUsZUFMcEI7QUFNUyxxQkFBVVYsRUFBRVcsZ0JBTnJCO0FBT1MsaUJBQUk7QUFQYjtBQUxGLFNBRkY7QUFpQkU7QUFBQTtBQUFBO0FBQ0U7QUFBQTtBQUFBLGNBQUcsV0FBVSwyQkFBYjtBQUNFO0FBQUE7QUFBQSxnQkFBYSxPQUFRWCxFQUFFWSxTQUF2QjtBQUNRO0FBQUE7QUFBQTtBQUNJLHlFQUFRLFdBQVksMEJBQVcseUJBQVgsRUFBc0NiLE1BQU1jLFdBQTVDLEVBQXlEO0FBQzNFLCtCQUFXZCxNQUFNTTtBQUQwRCxtQkFBekQsQ0FBcEIsR0FESjtBQUlJO0FBQUE7QUFBQTtBQUFRTix3QkFBTWU7QUFBZDtBQUpKO0FBRFI7QUFERjtBQURGO0FBakJGLE9BREY7QUFnQ0Q7O0FBRUQ7QUFDQTtBQUNBOzs7O2dDQUVhO0FBQ1gsVUFBTWQsSUFBSSxJQUFWO0FBRFcsVUFFTEQsS0FGSyxHQUVLQyxDQUZMLENBRUxELEtBRks7O0FBR1gsVUFBSUEsTUFBTWdCLFNBQVYsRUFBcUI7QUFDbkJoQixjQUFNZ0IsU0FBTjtBQUNEO0FBQ0Y7OztvQ0FFZ0JDLEUsRUFBSTtBQUNuQixVQUFNaEIsSUFBSSxJQUFWO0FBRG1CLFVBRWJELEtBRmEsR0FFSEMsQ0FGRyxDQUViRCxLQUZhOztBQUduQixVQUFJQSxNQUFNa0IsV0FBVixFQUF1QjtBQUNyQmxCLGNBQU1rQixXQUFOLENBQWtCRCxFQUFsQjtBQUNEO0FBQ0Y7OztxQ0FFaUJFLEcsRUFBSztBQUNyQixVQUFNbEIsSUFBSSxJQUFWO0FBRHFCLFVBRWZELEtBRmUsR0FFTEMsQ0FGSyxDQUVmRCxLQUZlOztBQUdyQixVQUFJQSxNQUFNb0IsWUFBVixFQUF3QjtBQUN0QnBCLGNBQU1vQixZQUFOLENBQW1CRCxHQUFuQjtBQUNEO0FBQ0Y7Ozs7OztBQUdIaEIsT0FBT0MsTUFBUCxtQkFBeUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0FpQixhQUFXO0FBQ1Q7QUFDQWIsU0FBSyxpQkFBTWMsTUFGRjtBQUdUO0FBQ0FOLGVBQVcsaUJBQU1PLElBSlI7QUFLVFQsaUJBQWEsaUJBQU1RLE1BTFY7QUFNVFAsaUJBQWEsaUJBQU1PLE1BTlY7QUFPVGIsZ0JBQVksaUJBQU1lLE1BUFQ7QUFRVGQsaUJBQWEsaUJBQU1jLE1BUlY7QUFTVE4saUJBQWEsaUJBQU1LLElBVFY7QUFVVEgsa0JBQWMsaUJBQU1HLElBVlg7QUFXVGpCLGNBQVUsaUJBQU1tQixJQVhQO0FBWVRsQixrQkFBYyxpQkFBTWU7QUFaWCxHQUpZOztBQW1CdkJJLGdCQUFjO0FBQ1psQixTQUFLLElBRE87QUFFWlEsZUFBVyxJQUZDO0FBR1pGLGlCQUFhLGVBSEQ7QUFJWkMsaUJBQWEsRUFKRDtBQUtaTixnQkFBWSxHQUxBO0FBTVpDLGlCQUFhLEVBTkQ7QUFPWlEsaUJBQWEsSUFQRDtBQVFaRSxrQkFBYyxJQVJGO0FBU1pkLGNBQVUsS0FURTtBQVVaQyxrQkFBYyw4QkFBVW9CO0FBVlo7O0FBbkJTLENBQXpCOztrQkFrQ2U1QixTIiwiZmlsZSI6ImFwX2NhcHRjaGEuanN4Iiwic291cmNlUm9vdCI6ImxpYiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ2FwdGNoYSBjb21wb25lbnQuXG4gKiBAY2xhc3MgQXBDYXB0Y2hhXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmltcG9ydCBSZWFjdCwge0NvbXBvbmVudCwgUHJvcFR5cGVzIGFzIHR5cGVzfSBmcm9tICdyZWFjdCdcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnXG5cbmltcG9ydCB7QXBJY29ufSBmcm9tICdhcGVtYW4tcmVhY3QtaWNvbidcbmltcG9ydCB7QXBJbWFnZX0gZnJvbSAnYXBlbWFuLXJlYWN0LWltYWdlJ1xuaW1wb3J0IHtBcFNwaW5uZXJ9IGZyb20gJ2FwZW1hbi1yZWFjdC1zcGlubmVyJ1xuaW1wb3J0IHtBcFRvdWNoYWJsZX0gZnJvbSAnYXBlbWFuLXJlYWN0LXRvdWNoYWJsZSdcbmltcG9ydCB7YXV0b2JpbmR9IGZyb20gJ2JyZWFjdCdcblxuLyoqIEBsZW5kcyBBcENhcHRjaGEgKi9cbmNsYXNzIEFwQ2FwdGNoYSBleHRlbmRzIENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yIChwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKVxuICAgIGNvbnN0IHMgPSB0aGlzXG4gICAgYXV0b2JpbmQocylcbiAgfVxuXG4gIHJlbmRlciAoKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBsZXQgeyBwcm9wcyB9ID0gc1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17IGNsYXNzbmFtZXMoJ2FwLWNhcHRjaGEnLCBwcm9wcy5jbGFzc05hbWUpfVxuICAgICAgICAgICBzdHlsZT17T2JqZWN0LmFzc2lnbih7fSwgcHJvcHMuc3R5bGUpIH0+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPEFwU3Bpbm5lciBjbGFzc05hbWU9J2FwLWNhcHRjaGEtc3Bpbm5lcidcbiAgICAgICAgICAgICAgICAgICAgIGVuYWJsZWQ9eyBwcm9wcy5zcGlubmluZyB9XG4gICAgICAgICAgICAgICAgICAgICB0aGVtZT17IHByb3BzLnNwaW5uZXJUaGVtZSB9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8QXBJbWFnZSBjbGFzc05hbWU9J2FwLWNhcHRjaGEtaW1hZ2UnXG4gICAgICAgICAgICAgICAgICAgc2NhbGU9J2ZpdCdcbiAgICAgICAgICAgICAgICAgICBzcmM9eyBwcm9wcy5zcmMgfVxuICAgICAgICAgICAgICAgICAgIHdpZHRoPXsgcHJvcHMuaW1hZ2VXaWR0aCB9XG4gICAgICAgICAgICAgICAgICAgaGVpZ2h0PXsgcHJvcHMuaW1hZ2VIZWlnaHQgfVxuICAgICAgICAgICAgICAgICAgIG9uTG9hZD17IHMuaGFuZGxlSW1hZ2VMb2FkIH1cbiAgICAgICAgICAgICAgICAgICBvbkVycm9yPXsgcy5oYW5kbGVJbWFnZUVycm9yIH1cbiAgICAgICAgICAgICAgICAgICBhbHQ9JydcbiAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8YSBjbGFzc05hbWU9J2FwLWNhcHRjaGEtcmVmcmVzaC1idXR0b24nPlxuICAgICAgICAgICAgPEFwVG91Y2hhYmxlIG9uVGFwPXsgcy5oYW5kbGVUYXAgfT5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8QXBJY29uIGNsYXNzTmFtZT17IGNsYXNzbmFtZXMoJ2FwLWNhcHRjaGEtcmVmcmVzaC1pY29uJywgcHJvcHMucmVmcmVzaEljb24sIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ZhLXNwaW4nOiBwcm9wcy5zcGlubmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSkgfS8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57IHByb3BzLnJlZnJlc2hUZXh0IH08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvQXBUb3VjaGFibGU+XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBDdXN0b21cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgaGFuZGxlVGFwICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIGxldCB7IHByb3BzIH0gPSBzXG4gICAgaWYgKHByb3BzLm9uUmVmcmVzaCkge1xuICAgICAgcHJvcHMub25SZWZyZXNoKClcbiAgICB9XG4gIH1cblxuICBoYW5kbGVJbWFnZUxvYWQgKGV2KSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBsZXQgeyBwcm9wcyB9ID0gc1xuICAgIGlmIChwcm9wcy5vbkltYWdlTG9hZCkge1xuICAgICAgcHJvcHMub25JbWFnZUxvYWQoZXYpXG4gICAgfVxuICB9XG5cbiAgaGFuZGxlSW1hZ2VFcnJvciAoZXJyKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBsZXQgeyBwcm9wcyB9ID0gc1xuICAgIGlmIChwcm9wcy5vbkltYWdlRXJyb3IpIHtcbiAgICAgIHByb3BzLm9uSW1hZ2VFcnJvcihlcnIpXG4gICAgfVxuICB9XG59XG5cbk9iamVjdC5hc3NpZ24oQ29tcG9uZW50LCB7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIFNwZWNzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIHByb3BUeXBlczoge1xuICAgIC8qKiBJbWFnZSBzb3VyY2UgdXJsICovXG4gICAgc3JjOiB0eXBlcy5zdHJpbmcsXG4gICAgLyoqIEhhbmRsZXIgZm9yIHJlZnJlc2ggKi9cbiAgICBvblJlZnJlc2g6IHR5cGVzLmZ1bmMsXG4gICAgcmVmcmVzaEljb246IHR5cGVzLnN0cmluZyxcbiAgICByZWZyZXNoVGV4dDogdHlwZXMuc3RyaW5nLFxuICAgIGltYWdlV2lkdGg6IHR5cGVzLm51bWJlcixcbiAgICBpbWFnZUhlaWdodDogdHlwZXMubnVtYmVyLFxuICAgIG9uSW1hZ2VMb2FkOiB0eXBlcy5mdW5jLFxuICAgIG9uSW1hZ2VFcnJvcjogdHlwZXMuZnVuYyxcbiAgICBzcGlubmluZzogdHlwZXMuYm9vbCxcbiAgICBzcGlubmVyVGhlbWU6IHR5cGVzLnN0cmluZ1xuICB9LFxuXG4gIGRlZmF1bHRQcm9wczoge1xuICAgIHNyYzogbnVsbCxcbiAgICBvblJlZnJlc2g6IG51bGwsXG4gICAgcmVmcmVzaEljb246ICdmYSBmYS1yZWZyZXNoJyxcbiAgICByZWZyZXNoVGV4dDogJycsXG4gICAgaW1hZ2VXaWR0aDogMjQwLFxuICAgIGltYWdlSGVpZ2h0OiA5NCxcbiAgICBvbkltYWdlTG9hZDogbnVsbCxcbiAgICBvbkltYWdlRXJyb3I6IG51bGwsXG4gICAgc3Bpbm5pbmc6IGZhbHNlLFxuICAgIHNwaW5uZXJUaGVtZTogQXBTcGlubmVyLkRFRkFVTFRfVEhFTUVcbiAgfVxuXG59KVxuXG5leHBvcnQgZGVmYXVsdCBBcENhcHRjaGFcbiJdfQ==