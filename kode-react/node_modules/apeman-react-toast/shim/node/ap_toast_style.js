/**
 * Style for ApToast.
 * @class ApToastStyle
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _apemanReactStyle = require('apeman-react-style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApToastStyle */
var ApToastStyle = _react2.default.createClass({
  displayName: 'ApToastStyle',

  propTypes: {
    style: _react.PropTypes.object,
    normalColor: _react.PropTypes.string,
    infoColor: _react.PropTypes.string,
    warnColor: _react.PropTypes.string,
    errorColor: _react.PropTypes.string
  },
  getDefaultProps: function getDefaultProps() {
    return {
      style: {},
      normalColor: _apemanReactStyle.ApStyle.NORMAL_COLOR,
      infoColor: _apemanReactStyle.ApStyle.INFO_COLOR,
      warnColor: _apemanReactStyle.ApStyle.WARN_COLOR,
      errorColor: _apemanReactStyle.ApStyle.ERROR_COLOR,
      transitionDuration: 100
    };
  },

  statics: {
    styleData: function styleData(config) {
      var normalColor = config.normalColor;
      var infoColor = config.infoColor;
      var warnColor = config.warnColor;
      var errorColor = config.errorColor;
      var transitionDuration = config.transitionDuration;

      return {
        all: {
          '.ap-toast-group': {
            position: 'fixed',
            height: 0,
            top: 'initial',
            overflow: 'visible',
            left: 0,
            bottom: 24,
            right: 0,
            textAlign: 'center',
            padding: 0,
            zIndex: 49,
            display: 'flex',
            flexDirection: 'column',
            justifyContent: 'flex-end'
          },
          '.ap-toast': {
            display: 'block',
            margin: '0 auto'
          },
          '.ap-toast-inner': {
            margin: '4px auto',
            maxWidth: '420px',
            display: 'inline-block',
            textAlign: 'left',
            padding: '4px',
            boxShadow: '2px 2px 4px rgba(0,0,0,0.33)',
            backgroundColor: 'rgba(255, 255, 255, 0.95)',
            color: '' + normalColor,
            border: '4px solid ' + normalColor,
            fontSize: '14px',
            width: '240px',
            borderRadius: '2px'
          },
          '.ap-toast-item': {
            display: 'block',
            padding: '2px 0'
          },
          '.ap-toast-item:active': {
            opacity: 0.8
          },
          '.ap-info-toast .ap-toast-inner': {
            color: '' + infoColor,
            borderColor: '' + infoColor
          },
          '.ap-warn-toast .ap-toast-inner': {
            color: '' + warnColor,
            borderColor: '' + warnColor
          },
          '.ap-error-toast .ap-toast-inner': {
            color: '' + errorColor,
            borderColor: '' + errorColor
          },
          '.ap-toast-item-icon': {
            display: 'inline-block',
            pointerEvents: 'none'
          },
          '.ap-toast-text': {
            display: 'inline-block',
            pointerEvents: 'none',
            margin: '0 2px',
            cursor: 'default'
          },
          '.ap-toast-transition-enter': {
            lineHeight: '0em'
          },
          '.ap-toast-transition-enter-active': {
            lineHeight: '1em',
            padding: '2px 0',
            transition: 'padding ' + transitionDuration + 'ms line-height ' + transitionDuration + 'ms'
          },
          '.ap-toast-transition-leave': {
            lineHeight: '1em',
            padding: '2px 0'
          },
          '.ap-toast-transition-leave-active': {
            lineHeight: '0em',
            padding: '0',
            transition: 'padding ' + transitionDuration + 'ms line-height ' + transitionDuration + 'ms'
          }
        }
      };
    }
  },
  render: function render() {
    var s = this;
    var props = s.props;

    var _ApToastStyle$styleDa = ApToastStyle.styleData(props);

    var all = _ApToastStyle$styleDa.all;
    var small = _ApToastStyle$styleDa.small;
    var medium = _ApToastStyle$styleDa.medium;
    var large = _ApToastStyle$styleDa.large;


    return _react2.default.createElement(
      _apemanReactStyle.ApStyle,
      { data: Object.assign(all, props.style),
        smallMediaData: small,
        mediumMediaData: medium,
        largeMediaData: large
      },
      props.children
    );
  }
});

exports.default = ApToastStyle;
//# sourceMappingURL=data:application/json;base64,