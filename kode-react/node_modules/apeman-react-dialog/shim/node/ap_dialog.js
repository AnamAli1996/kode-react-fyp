/**
 * Dialog component.
 * @class ApDialog
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _apemanReactTouchable = require('apeman-react-touchable');

var _apemanReactIcon = require('apeman-react-icon');

var _apemanReactSpinner = require('apeman-react-spinner');

var _ap_dialog_header = require('./ap_dialog_header');

var _ap_dialog_header2 = _interopRequireDefault(_ap_dialog_header);

var _ap_dialog_body = require('./ap_dialog_body');

var _ap_dialog_body2 = _interopRequireDefault(_ap_dialog_body);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_CLOSE_ICON = 'fa fa-close';

/** @lends ApDialog */
var ApDialog = _react2.default.createClass({
  displayName: 'ApDialog',


  // --------------------
  // Specs
  // --------------------

  propTypes: {
    present: _react.PropTypes.bool.isRequired,
    onClose: _react.PropTypes.func,
    spinning: _react.PropTypes.bool,
    spinner: _react.PropTypes.string,
    title: _react.PropTypes.string,
    closeIcon: _react.PropTypes.string
  },

  statics: {
    DEFAULT_CLOSE_ICON: DEFAULT_CLOSE_ICON
  },

  getInitialState: function getInitialState() {
    return {};
  },
  getDefaultProps: function getDefaultProps() {
    return {
      present: false,
      onClose: null,
      spinning: false,
      spinner: _apemanReactSpinner.ApSpinner.DEFAULT_THEME,
      title: null,
      closeIcon: DEFAULT_CLOSE_ICON
    };
  },
  render: function render() {
    var s = this;
    var props = s.props;

    if (!props.present) {
      return null;
    }
    return _react2.default.createElement(
      'div',
      { className: (0, _classnames2.default)('ap-dialog', props.className, {
          'ap-dialog-present': props.present
        }),
        style: Object.assign({}, props.style) },
      _react2.default.createElement(_apemanReactSpinner.ApSpinner, { theme: props.spinner,
        className: 'ap-dialog-spinner',
        enabled: props.spinning }),
      _react2.default.createElement(
        'div',
        { className: 'ap-dialog-inner' },
        s.renderBack(),
        _react2.default.createElement(
          'div',
          { className: 'ap-dialog-content' },
          _react2.default.createElement(
            _ap_dialog_header2.default,
            null,
            s.renderTitle(),
            s.renderCloseButton()
          ),
          _react2.default.createElement(
            _ap_dialog_body2.default,
            null,
            props.children
          )
        )
      )
    );
  },


  // --------------------
  // Lifecycle
  // --------------------

  componentWillMount: function componentWillMount() {
    var s = this;
  },
  componentDidMount: function componentDidMount() {
    var s = this;
    var props = s.props;

    s.toggleDocumentScroll(props.present);
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var s = this;

    s.toggleDocumentScroll(nextProps.present);
  },
  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    var s = this;
    return true;
  },
  componentWillUpdate: function componentWillUpdate(nextProps, nextState) {
    var s = this;
  },
  componentDidUpdate: function componentDidUpdate(prevProps, prevState) {
    var s = this;
  },
  componentWillUnmount: function componentWillUnmount() {
    var s = this;
    s.toggleDocumentScroll(false);
  },


  // ------------------
  // Helper
  // ------------------

  handleClose: function handleClose(e) {
    var s = this;
    var props = s.props;

    if (props.onClose) {
      props.onClose(e);
    }
  },
  toggleDocumentScroll: function toggleDocumentScroll(enabled) {
    var s = this;

    var _document = document;
    var body = _document.body;

    if (enabled) {
      body.classList.add('ap-dialog-fix');
    } else {
      body.classList.remove('ap-dialog-fix');
    }
  },


  // ------------------
  // Private
  // ------------------

  renderBack: function renderBack() {
    var s = this;
    var props = s.props;

    return _react2.default.createElement(
      'div',
      { className: 'ap-dialog-back' },
      _react2.default.createElement(
        _apemanReactTouchable.ApTouchable,
        { onTap: s.handleClose },
        _react2.default.createElement('div', { className: 'ap-dialog-back-inner' })
      )
    );
  },
  renderCloseButton: function renderCloseButton() {
    var s = this;
    var props = s.props;

    return _react2.default.createElement(
      'a',
      { className: 'ap-dialog-close-button' },
      _react2.default.createElement(
        _apemanReactTouchable.ApTouchable,
        { onTap: s.handleClose },
        _react2.default.createElement(
          'span',
          null,
          _react2.default.createElement(_apemanReactIcon.ApIcon, { className: (0, _classnames2.default)('ap-dialog-close-button-icon', props.closeIcon) })
        )
      )
    );
  },
  renderTitle: function renderTitle() {
    var s = this;
    var props = s.props;

    return _react2.default.createElement(
      'h3',
      { className: 'ap-dialog-title' },
      props.title
    );
  }
});

exports.default = ApDialog;
//# sourceMappingURL=data:application/json;base64,