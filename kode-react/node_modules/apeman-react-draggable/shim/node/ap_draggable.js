/**
 * apeman react package for draggable component.
 * @augments ApComponent
 * @class ApDraggable
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _numcal = require('numcal');

var _numcal2 = _interopRequireDefault(_numcal);

var _rangecal = require('rangecal');

var _rangecal2 = _interopRequireDefault(_rangecal);

var _veccal = require('veccal');

var _veccal2 = _interopRequireDefault(_veccal);

var _apemanReactTouchable = require('apeman-react-touchable');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var directions = ['HORIZONTAL', 'LEFT', 'RIGHT', 'VERTICAL', 'UP', 'DOWN', 'NONE', 'ALL'];
var MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
var DEFAULT_TRANSITION_DURATION = 80;

/** @lends ApDraggable */
var ApDraggable = _react2.default.createClass({
  displayName: 'ApDraggable',


  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Handler for drag start */
    onStart: _react.PropTypes.func,
    /** Handler for drag move */
    onMove: _react.PropTypes.func,
    /** Handler for drag stop */
    onStop: _react.PropTypes.func,
    shouldMove: _react.PropTypes.func,
    /** Move direction */
    direction: _react.PropTypes.oneOf(directions),
    x: _react.PropTypes.number,
    minX: _react.PropTypes.number,
    maxX: _react.PropTypes.number,
    y: _react.PropTypes.number,
    minY: _react.PropTypes.number,
    maxY: _react.PropTypes.number
  },

  statics: {
    enums: {
      directions: directions
    },
    movement: function movement(cx, cy, base, direction) {
      var _veccal$subtract = _veccal2.default.subtract([cx, cy], [base.x, base.y]);

      var _veccal$subtract2 = _slicedToArray(_veccal$subtract, 2);

      var x = _veccal$subtract2[0];
      var y = _veccal$subtract2[1];

      switch (direction) {
        case 'HORIZONTAL':
        case 'LEFT':
        case 'RIGHT':
          y = 0;
          break;
        case 'VERTICAL':
        case 'UP':
        case 'DOWN':
          x = 0;
          break;
        case 'NONE':
          x = 0;
          y = 0;
          break;
        default:
          break;
      }
      return [x, y];
    }
  },

  getInitialState: function getInitialState() {
    var s = this;
    var props = s.props;

    return {
      dragging: false,
      base: {
        x: 0,
        y: 0
      },
      move: {
        x: props.x || 0,
        y: props.y || 0
      }
    };
  },
  getDefaultProps: function getDefaultProps() {
    return {
      direction: 'ALL',
      shouldMove: function shouldMove() {
        return true;
      },

      minX: MIN_SAFE_INTEGER,
      maxX: MAX_SAFE_INTEGER,
      minY: MIN_SAFE_INTEGER,
      maxY: MAX_SAFE_INTEGER
    };
  },
  render: function render() {
    var s = this;
    var props = s.props;
    var state = s.state;

    var className = (0, _classnames2.default)('ap-draggable', {
      'ap-draggable-dragging': state.dragging
    }, props.className);
    return _react2.default.createElement(
      _apemanReactTouchable.ApTouchable,
      _extends({}, props, {
        className: className,
        onPanStart: s.handlePanStart,
        onPan: s.handlePanMove,
        onPanEnd: s.handlePanEnd,
        panThreshold: 1,
        onPanCancel: s.handlePanCancel,
        panDirection: props.direction
      }),
      props.children
    );
  },


  // --------------------
  // Lifecycle
  // --------------------

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var s = this;
    var state = s.state;
    var x = nextProps.x;
    var y = nextProps.y;


    var hasX = typeof x !== 'undefined';
    var hasY = typeof y !== 'undefined';
    var changed = hasX || hasY;
    if (changed) {
      x = hasX ? x : state.move.x;
      y = hasY ? y : state.move.y;
      s.setState({
        move: {
          x: x,
          y: y
        }
      });
      s.applyTransform(x, y);
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    var s = this;

    if (s._dragApplyTimer) {
      clearTimeout(s._dragApplyTimer);
    }
  },


  // ------------------
  // Helper
  // ------------------

  handlePanStart: function handlePanStart(e) {
    var s = this;
    var center = e.center;

    s.dragStart(center.x, center.y);
  },
  handlePanMove: function handlePanMove(e) {
    var s = this;
    var center = e.center;

    s.dragMove(center.x, center.y);
  },
  handlePanEnd: function handlePanEnd(e) {
    var s = this;
    var center = e.center;

    s.dragEnd(center.x, center.y);
  },
  handlePanCancel: function handlePanCancel(e) {
    var s = this;
    var center = e.center;

    s.dragEnd(center.x, center.y);
  },
  dragStart: function dragStart(cx, cy) {
    var s = this;
    var props = s.props;
    var state = s.state;

    if (state.dragging) {
      return;
    }
    clearTimeout(s._dragApplyTimer);
    var base = state.move;
    var move = _veccal2.default.subtract([cx, cy], [base.x, base.y]);

    var _move = _slicedToArray(move, 2);

    var x = _move[0];
    var y = _move[1];

    s.setState({
      dragging: true,
      base: { x: x, y: y },
      move: { x: 0, y: 0 }
    });
    if (props.onStart) {
      props.onStart.call(s, s.createEvent(x, y));
    }
  },
  dragMove: function dragMove(cx, cy) {
    var s = this;
    var props = s.props;
    var state = s.state;

    if (!state.dragging) {
      return;
    }

    var _ApDraggable$movement = ApDraggable.movement(cx, cy, state.base, props.direction);

    var _ApDraggable$movement2 = _slicedToArray(_ApDraggable$movement, 2);

    var x = _ApDraggable$movement2[0];
    var y = _ApDraggable$movement2[1];

    if (props.shouldMove) {
      var skip = !props.shouldMove({ x: x, y: y });
      if (skip) {
        return;
      }
    }
    var fromLastTime = new Date() - s._lastDragMoveDate;
    var delay = _numcal2.default.max(DEFAULT_TRANSITION_DURATION - fromLastTime, 0);
    clearTimeout(s._dragApplyTimer);
    s._dragApplyTimer = setTimeout(function () {
      s.applyTransform(x, y);
      s.setState({
        dragging: true,
        move: { x: x, y: y }
      });
      s._lastDragMoveDate = new Date();
    }, delay);

    if (props.onMove) {
      var event = s.createEvent(x, y);
      props.onMove.call(s, event);
    }
  },
  dragEnd: function dragEnd(cx, cy) {
    var s = this;
    var props = s.props;
    var state = s.state;

    if (!state.dragging) {
      return;
    }
    clearTimeout(s._dragApplyTimer);

    var _ApDraggable$movement3 = ApDraggable.movement(cx, cy, state.base, props.direction);

    var _ApDraggable$movement4 = _slicedToArray(_ApDraggable$movement3, 2);

    var x = _ApDraggable$movement4[0];
    var y = _ApDraggable$movement4[1];

    s.setState({
      dragging: false
    });
    if (props.onStop) {
      props.onStop.call(s, s.createEvent(x, y));
    }
  },
  applyTransform: function applyTransform(x, y) {
    var s = this;
    var props = s.props;
    var minX = props.minX;
    var maxX = props.maxX;
    var minY = props.minY;
    var maxY = props.maxY;

    var elm = _reactDom2.default.findDOMNode(s);
    x = parseInt(_rangecal2.default.round(minX, maxX, x));
    y = parseInt(_rangecal2.default.round(minY, maxY, y));
    var transform = 'translate(' + x + 'px, ' + y + 'px)';
    var duplicate = s._transform === transform;
    if (duplicate) {
      return;
    }
    s._transform = transform;
    elm.style.transform = transform;
  },
  createEvent: function createEvent(x, y) {
    var s = this;
    return new CustomEvent('ap:drag', {
      detail: {
        x: x,
        y: y,
        ref: s
      }
    });
  },


  _lastDragMoveDate: new Date(),
  _dragApplyTimer: -1
});

exports.default = ApDraggable;
//# sourceMappingURL=data:application/json;base64,bnVsbA==