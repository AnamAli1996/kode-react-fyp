/**
 * Info item with collapsible feature
 * @class ApInfoCollapsibleItem
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _apemanReactMixinPure = require('apeman-react-mixin-pure');

var _apemanReactMixinLayout = require('apeman-react-mixin-layout');

var _ap_info_item = require('./ap_info_item');

var _ap_info_item2 = _interopRequireDefault(_ap_info_item);

var _apemanReactIcon = require('apeman-react-icon');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var OPEN_ICON = _ap_info_item2.default.OPEN_ICON;
var CLOSE_ICON = _ap_info_item2.default.CLOSE_ICON;

/** @lends ApInfoCollapsibleItem */

var ApInfoCollapsibleItem = _react2.default.createClass({
  displayName: 'ApInfoCollapsibleItem',

  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Label text */
    label: _react.PropTypes.string,
    /** Value text */
    value: _react.PropTypes.string,
    /** Unit suffix */
    unit: _react.PropTypes.string,
    /** Callback for toggle */
    onToggle: _react.PropTypes.func
  },

  mixins: [_apemanReactMixinPure.ApPureMixin, _apemanReactMixinLayout.ApLayoutMixin],

  getInitialState: function getInitialState() {
    return {
      open: false
    };
  },
  render: function render() {
    var s = this;
    var state = s.state;
    var props = s.props;
    var layouts = s.layouts;

    var className = (0, _classnames2.default)('ap-info-collapsible-item', props.className);
    var icon = state.open ? OPEN_ICON : CLOSE_ICON;
    return _react2.default.createElement(
      'div',
      { className: className },
      _react2.default.createElement(
        'div',
        { className: 'ap-info-collapsible-header' },
        _react2.default.createElement(_apemanReactIcon.ApIcon, { className: (0, _classnames2.default)('ap-info-item-icon', 'ap-info-collapsible-icon', icon) }),
        _react2.default.createElement(_ap_info_item2.default, { label: props.label,
          unit: props.unit,
          value: props.value,
          onTap: s.toggleCollapsing
        })
      ),
      _react2.default.createElement(
        'div',
        { className: (0, _classnames2.default)('ap-info-collapsible-wrap', {
            'ap-info-collapsible-wrap-closed': !state.open
          }), style: layouts.wrap },
        _react2.default.createElement(
          'div',
          { className: 'ap-info-collapsible-body',
            ref: function ref(body) {
              s.body = body;
            }
          },
          props.children
        )
      )
    );
  },


  // --------------------
  // For ApLayoutMixin
  // --------------------

  getInitialLayouts: function getInitialLayouts() {
    return {
      wrap: {
        height: 'auto'
      }
    };
  },
  calcLayouts: function calcLayouts() {
    var s = this;
    var body = s.body;

    var bodyRect = body && body.getBoundingClientRect();
    return {
      wrap: {
        height: bodyRect && bodyRect.height
      }
    };
  },


  // --------------------
  // Custom
  // --------------------
  toggleCollapsing: function toggleCollapsing(e) {
    var s = this;
    var props = s.props;
    var state = s.state;

    s.setState({
      open: !state.open
    });
    if (props.onToggle) {
      props.onToggle(e);
    }
  }
});

exports.default = ApInfoCollapsibleItem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwX2luZm9fY29sbGFwc2libGVfaXRlbS5qc3giXSwibmFtZXMiOlsiT1BFTl9JQ09OIiwiQ0xPU0VfSUNPTiIsIkFwSW5mb0NvbGxhcHNpYmxlSXRlbSIsImNyZWF0ZUNsYXNzIiwicHJvcFR5cGVzIiwibGFiZWwiLCJzdHJpbmciLCJ2YWx1ZSIsInVuaXQiLCJvblRvZ2dsZSIsImZ1bmMiLCJtaXhpbnMiLCJnZXRJbml0aWFsU3RhdGUiLCJvcGVuIiwicmVuZGVyIiwicyIsInN0YXRlIiwicHJvcHMiLCJsYXlvdXRzIiwiY2xhc3NOYW1lIiwiaWNvbiIsInRvZ2dsZUNvbGxhcHNpbmciLCJ3cmFwIiwiYm9keSIsImNoaWxkcmVuIiwiZ2V0SW5pdGlhbExheW91dHMiLCJoZWlnaHQiLCJjYWxjTGF5b3V0cyIsImJvZHlSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZSIsInNldFN0YXRlIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUlBOzs7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztJQUVRQSxTLDBCQUFBQSxTO0lBQVdDLFUsMEJBQUFBLFU7O0FBRW5COztBQUNBLElBQU1DLHdCQUF3QixnQkFBTUMsV0FBTixDQUFrQjtBQUFBOztBQUM5QztBQUNBO0FBQ0E7O0FBRUFDLGFBQVc7QUFDVDtBQUNBQyxXQUFPLGlCQUFNQyxNQUZKO0FBR1Q7QUFDQUMsV0FBTyxpQkFBTUQsTUFKSjtBQUtUO0FBQ0FFLFVBQU0saUJBQU1GLE1BTkg7QUFPVDtBQUNBRyxjQUFVLGlCQUFNQztBQVJQLEdBTG1DOztBQWdCOUNDLFVBQVEsMEVBaEJzQzs7QUFxQjlDQyxpQkFyQjhDLDZCQXFCM0I7QUFDakIsV0FBTztBQUNMQyxZQUFNO0FBREQsS0FBUDtBQUdELEdBekI2QztBQTJCOUNDLFFBM0I4QyxvQkEyQnBDO0FBQ1IsUUFBTUMsSUFBSSxJQUFWO0FBRFEsUUFFRkMsS0FGRSxHQUV3QkQsQ0FGeEIsQ0FFRkMsS0FGRTtBQUFBLFFBRUtDLEtBRkwsR0FFd0JGLENBRnhCLENBRUtFLEtBRkw7QUFBQSxRQUVZQyxPQUZaLEdBRXdCSCxDQUZ4QixDQUVZRyxPQUZaOztBQUdSLFFBQUlDLFlBQVksMEJBQVcsMEJBQVgsRUFBdUNGLE1BQU1FLFNBQTdDLENBQWhCO0FBQ0EsUUFBSUMsT0FBT0osTUFBTUgsSUFBTixHQUFhYixTQUFiLEdBQXlCQyxVQUFwQztBQUNBLFdBQ0U7QUFBQTtBQUFBLFFBQUssV0FBWWtCLFNBQWpCO0FBQ0U7QUFBQTtBQUFBLFVBQUssV0FBVSw0QkFBZjtBQUNFLGlFQUFRLFdBQVksMEJBQVcsbUJBQVgsRUFBZ0MsMEJBQWhDLEVBQTREQyxJQUE1RCxDQUFwQixHQURGO0FBRUUsZ0VBQVksT0FBUUgsTUFBTVosS0FBMUI7QUFDWSxnQkFBT1ksTUFBTVQsSUFEekI7QUFFWSxpQkFBUVMsTUFBTVYsS0FGMUI7QUFHWSxpQkFBUVEsRUFBRU07QUFIdEI7QUFGRixPQURGO0FBU0U7QUFBQTtBQUFBLFVBQUssV0FBWSwwQkFBVywwQkFBWCxFQUF1QztBQUN0RCwrQ0FBbUMsQ0FBQ0wsTUFBTUg7QUFEWSxXQUF2QyxDQUFqQixFQUVLLE9BQVFLLFFBQVFJLElBRnJCO0FBR0U7QUFBQTtBQUFBLFlBQUssV0FBVSwwQkFBZjtBQUNLLGlCQUFNLGFBQUNDLElBQUQsRUFBVTtBQUFFUixnQkFBRVEsSUFBRixHQUFTQSxJQUFUO0FBQWU7QUFEdEM7QUFHSU4sZ0JBQU1PO0FBSFY7QUFIRjtBQVRGLEtBREY7QUFxQkQsR0FyRDZDOzs7QUF1RDlDO0FBQ0E7QUFDQTs7QUFFQUMsbUJBM0Q4QywrQkEyRHpCO0FBQ25CLFdBQU87QUFDTEgsWUFBTTtBQUNKSSxnQkFBUTtBQURKO0FBREQsS0FBUDtBQUtELEdBakU2QztBQW1FOUNDLGFBbkU4Qyx5QkFtRS9CO0FBQ2IsUUFBTVosSUFBSSxJQUFWO0FBRGEsUUFFUFEsSUFGTyxHQUVFUixDQUZGLENBRVBRLElBRk87O0FBR2IsUUFBSUssV0FBV0wsUUFBUUEsS0FBS00scUJBQUwsRUFBdkI7QUFDQSxXQUFPO0FBQ0xQLFlBQU07QUFDSkksZ0JBQVFFLFlBQVlBLFNBQVNGO0FBRHpCO0FBREQsS0FBUDtBQUtELEdBNUU2Qzs7O0FBOEU5QztBQUNBO0FBQ0E7QUFDQUwsa0JBakY4Qyw0QkFpRjVCUyxDQWpGNEIsRUFpRnpCO0FBQ25CLFFBQU1mLElBQUksSUFBVjtBQURtQixRQUViRSxLQUZhLEdBRUlGLENBRkosQ0FFYkUsS0FGYTtBQUFBLFFBRU5ELEtBRk0sR0FFSUQsQ0FGSixDQUVOQyxLQUZNOztBQUduQkQsTUFBRWdCLFFBQUYsQ0FBVztBQUNUbEIsWUFBTSxDQUFDRyxNQUFNSDtBQURKLEtBQVg7QUFHQSxRQUFJSSxNQUFNUixRQUFWLEVBQW9CO0FBQ2xCUSxZQUFNUixRQUFOLENBQWVxQixDQUFmO0FBQ0Q7QUFDRjtBQTFGNkMsQ0FBbEIsQ0FBOUI7O2tCQTZGZTVCLHFCIiwiZmlsZSI6ImFwX2luZm9fY29sbGFwc2libGVfaXRlbS5qc3giLCJzb3VyY2VSb290IjoibGliIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBJbmZvIGl0ZW0gd2l0aCBjb2xsYXBzaWJsZSBmZWF0dXJlXG4gKiBAY2xhc3MgQXBJbmZvQ29sbGFwc2libGVJdGVtXG4gKi9cbid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgUmVhY3QsIHtQcm9wVHlwZXMgYXMgdHlwZXN9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcydcbmltcG9ydCB7QXBQdXJlTWl4aW59IGZyb20gJ2FwZW1hbi1yZWFjdC1taXhpbi1wdXJlJ1xuaW1wb3J0IHtBcExheW91dE1peGlufSBmcm9tICdhcGVtYW4tcmVhY3QtbWl4aW4tbGF5b3V0J1xuaW1wb3J0IEFwSW5mb0l0ZW0gZnJvbSAnLi9hcF9pbmZvX2l0ZW0nXG5pbXBvcnQge0FwSWNvbn0gZnJvbSAnYXBlbWFuLXJlYWN0LWljb24nXG5cbmNvbnN0IHsgT1BFTl9JQ09OLCBDTE9TRV9JQ09OIH0gPSBBcEluZm9JdGVtXG5cbi8qKiBAbGVuZHMgQXBJbmZvQ29sbGFwc2libGVJdGVtICovXG5jb25zdCBBcEluZm9Db2xsYXBzaWJsZUl0ZW0gPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIFNwZWNzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgLyoqIExhYmVsIHRleHQgKi9cbiAgICBsYWJlbDogdHlwZXMuc3RyaW5nLFxuICAgIC8qKiBWYWx1ZSB0ZXh0ICovXG4gICAgdmFsdWU6IHR5cGVzLnN0cmluZyxcbiAgICAvKiogVW5pdCBzdWZmaXggKi9cbiAgICB1bml0OiB0eXBlcy5zdHJpbmcsXG4gICAgLyoqIENhbGxiYWNrIGZvciB0b2dnbGUgKi9cbiAgICBvblRvZ2dsZTogdHlwZXMuZnVuY1xuICB9LFxuXG4gIG1peGluczogW1xuICAgIEFwUHVyZU1peGluLFxuICAgIEFwTGF5b3V0TWl4aW5cbiAgXSxcblxuICBnZXRJbml0aWFsU3RhdGUgKCkge1xuICAgIHJldHVybiB7XG4gICAgICBvcGVuOiBmYWxzZVxuICAgIH1cbiAgfSxcblxuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IHMgPSB0aGlzXG4gICAgbGV0IHsgc3RhdGUsIHByb3BzLCBsYXlvdXRzIH0gPSBzXG4gICAgbGV0IGNsYXNzTmFtZSA9IGNsYXNzbmFtZXMoJ2FwLWluZm8tY29sbGFwc2libGUtaXRlbScsIHByb3BzLmNsYXNzTmFtZSlcbiAgICBsZXQgaWNvbiA9IHN0YXRlLm9wZW4gPyBPUEVOX0lDT04gOiBDTE9TRV9JQ09OXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXsgY2xhc3NOYW1lIH0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdhcC1pbmZvLWNvbGxhcHNpYmxlLWhlYWRlcic+XG4gICAgICAgICAgPEFwSWNvbiBjbGFzc05hbWU9eyBjbGFzc25hbWVzKCdhcC1pbmZvLWl0ZW0taWNvbicsICdhcC1pbmZvLWNvbGxhcHNpYmxlLWljb24nLCBpY29uKSB9Lz5cbiAgICAgICAgICA8QXBJbmZvSXRlbSBsYWJlbD17IHByb3BzLmxhYmVsIH1cbiAgICAgICAgICAgICAgICAgICAgICB1bml0PXsgcHJvcHMudW5pdCB9XG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWU9eyBwcm9wcy52YWx1ZSB9XG4gICAgICAgICAgICAgICAgICAgICAgb25UYXA9eyBzLnRvZ2dsZUNvbGxhcHNpbmcgfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17IGNsYXNzbmFtZXMoJ2FwLWluZm8tY29sbGFwc2libGUtd3JhcCcsIHtcbiAgICAgICAgICAnYXAtaW5mby1jb2xsYXBzaWJsZS13cmFwLWNsb3NlZCc6ICFzdGF0ZS5vcGVuXG4gICAgICAgIH0pIH0gc3R5bGU9eyBsYXlvdXRzLndyYXAgfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nYXAtaW5mby1jb2xsYXBzaWJsZS1ib2R5J1xuICAgICAgICAgICAgICAgcmVmPXsgKGJvZHkpID0+IHsgcy5ib2R5ID0gYm9keSB9IH1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7IHByb3BzLmNoaWxkcmVuIH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH0sXG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gRm9yIEFwTGF5b3V0TWl4aW5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBnZXRJbml0aWFsTGF5b3V0cyAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyYXA6IHtcbiAgICAgICAgaGVpZ2h0OiAnYXV0bydcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgY2FsY0xheW91dHMgKCkge1xuICAgIGNvbnN0IHMgPSB0aGlzXG4gICAgbGV0IHsgYm9keSB9ID0gc1xuICAgIGxldCBib2R5UmVjdCA9IGJvZHkgJiYgYm9keS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgIHJldHVybiB7XG4gICAgICB3cmFwOiB7XG4gICAgICAgIGhlaWdodDogYm9keVJlY3QgJiYgYm9keVJlY3QuaGVpZ2h0XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIEN1c3RvbVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLVxuICB0b2dnbGVDb2xsYXBzaW5nIChlKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICBsZXQgeyBwcm9wcywgc3RhdGUgfSA9IHNcbiAgICBzLnNldFN0YXRlKHtcbiAgICAgIG9wZW46ICFzdGF0ZS5vcGVuXG4gICAgfSlcbiAgICBpZiAocHJvcHMub25Ub2dnbGUpIHtcbiAgICAgIHByb3BzLm9uVG9nZ2xlKGUpXG4gICAgfVxuICB9XG59KVxuXG5leHBvcnQgZGVmYXVsdCBBcEluZm9Db2xsYXBzaWJsZUl0ZW1cbiJdfQ==