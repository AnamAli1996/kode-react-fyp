/**
 * Dialog to confirm.
 * @class ApConfirmDialog
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _apemanReactCheckbox = require('apeman-react-checkbox');

var _apemanReactButton = require('apeman-react-button');

var _ap_dialog = require('./ap_dialog');

var _ap_dialog2 = _interopRequireDefault(_ap_dialog);

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** lends ApConfirmDialog */
var ApConfirmDialog = _react2.default.createClass({
  displayName: 'ApConfirmDialog',


  // --------------------
  // Specs
  // --------------------

  propTypes: {
    present: _react.PropTypes.bool.isRequired,
    /** Handler for submit event */
    onSubmit: _react.PropTypes.func,
    /** Handler for cancel event */
    onCancel: _react.PropTypes.func,
    /** Dialog title */
    title: _react.PropTypes.string,
    /** Dialog message */
    message: _react.PropTypes.string,
    /** Id of checkbox */
    checkboxId: _react.PropTypes.string,
    /** Name of checkbox */
    checkboxName: _react.PropTypes.string,
    /** Label text of checkbox */
    checkboxText: _react.PropTypes.string,
    /** Errot text when not checked */
    errorText: _react.PropTypes.string,
    /** Submit button text */
    submitText: _react.PropTypes.string
  },

  mixins: [],

  statics: {},

  getInitialState: function getInitialState() {
    return {
      checked: false,
      errored: false
    };
  },
  getDefaultProps: function getDefaultProps() {
    var id = _uuid2.default.v4().replace(/\-/g, '');
    return {
      onSubmit: null,
      onCancel: null,
      checkboxId: 'ap-confirm-dialog-checkbox-' + id,
      checkboxName: 'ap-confirm-check-' + id,
      checkboxText: null,
      submitText: 'submit',
      errorText: 'Needs check before submit.',
      message: 'Once destroyed, there is no going back. Please be certain.'
    };
  },
  render: function render() {
    var s = this;
    var state = s.state;
    var props = s.props;

    if (!props.present) {
      return null;
    }
    return _react2.default.createElement(
      _ap_dialog2.default,
      _extends({ className: (0, _classnames2.default)('ap-confirm-dialog', props.className),
        style: Object.assign({}, props.style),
        onClose: s.handleCancel
      }, props),
      _react2.default.createElement(
        'p',
        { className: 'ap-confirm-dialog-message' },
        props.message
      ),
      _react2.default.createElement(
        'div',
        null,
        props.children
      ),
      _react2.default.createElement(
        'div',
        { className: 'ap-confirm-dialog-control' },
        s.renderError(state.errored),
        s.renderCheckbox(state.checked),
        s.renderSubmitButton(state.checked)
      )
    );
  },
  toggleCheckbox: function toggleCheckbox() {
    var s = this;
    var state = s.state;
    s.setState({
      checked: !state.checked,
      errored: false
    });
  },
  handleSubmit: function handleSubmit(e) {
    var s = this;
    var state = s.state;
    var props = s.props;

    if (!state.checked) {
      s.setState({
        errored: true
      });
      return;
    }
    s.setState({
      errored: false
    });
    if (props.onSubmit) {
      props.onSubmit(e);
    }
  },
  handleCancel: function handleCancel(e) {
    var s = this;
    var props = s.props;

    s.setState({ errored: false });
    if (props.onCancel) {
      props.onCancel(e);
    }
  },


  // ------------------
  // Private
  // ------------------
  renderError: function renderError(errored) {
    var s = this;
    var props = s.props;

    if (!errored) {
      return null;
    }
    return _react2.default.createElement(
      'div',
      { className: 'ap-confirm-dialog-err' },
      _react2.default.createElement(
        'span',
        null,
        props.errorText
      )
    );
  },
  renderCheckbox: function renderCheckbox(checked) {
    var s = this;
    var props = s.props;

    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(_apemanReactCheckbox.ApCheckbox, { className: 'ap-confirm-dialog-checkbox',
        checked: checked,
        name: props.checkboxName,
        id: props.checkboxId,
        title: props.checkboxText,
        onChange: s.toggleCheckbox,
        value: 'YES'

      })
    );
  },
  renderSubmitButton: function renderSubmitButton(checked) {
    var s = this;
    var props = s.props;

    return _react2.default.createElement(
      _apemanReactButton.ApButton,
      { onTap: s.handleSubmit,
        disabled: false,
        primary: true,
        className: (0, _classnames2.default)('ap-confirm-dialog-button', {
          'ap-confirm-dialog-button-disabled': !checked
        }) },
      _react2.default.createElement(
        'span',
        { className: 'ap-confirm-dialog-button-text' },
        props.submitText
      )
    );
  }
});

exports.default = ApConfirmDialog;
//# sourceMappingURL=data:application/json;base64,