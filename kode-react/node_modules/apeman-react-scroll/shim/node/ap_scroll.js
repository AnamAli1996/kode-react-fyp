/**
 * apeman react package for scroll components.
 * @class ApScroll
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _apemanReactMixinResize = require('apeman-react-mixin-resize');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var noop = function noop(e) {
  return undefined;
};

/** @lends ApScroll */
var ApScroll = _react2.default.createClass({
  displayName: 'ApScroll',


  // --------------------
  // Specs
  // --------------------

  propTypes: {
    direction: _react.PropTypes.oneOf(['x', 'y', 'xy']),
    showScrollbars: _react.PropTypes.bool,
    disableMouseWheel: _react.PropTypes.bool,
    iScrollRef: _react.PropTypes.func,
    onScrollCancel: _react.PropTypes.func,
    onScrollStart: _react.PropTypes.func,
    onScroll: _react.PropTypes.func,
    onScrollEnd: _react.PropTypes.func,
    onFlick: _react.PropTypes.func
  },

  mixins: [_apemanReactMixinResize.ApResizeMixin],

  statics: {
    refreshIScroll: function refreshIScroll(iScroll, delay) {
      var timer = setTimeout(function () {
        if (iScroll) {
          iScroll.refresh();
        }
      }, delay || 0);
      return function () {
        return clearTimeout(timer);
      };
    }
  },

  getInitialState: function getInitialState() {
    return {};
  },
  getDefaultProps: function getDefaultProps() {
    return {
      id: 'ap-scroll-' + _uuid2.default.v4(),
      direction: 'y',
      showScrollbars: false,
      disableMouseWheel: false,
      iScrollRef: noop,
      onScrollCancel: noop,
      onScrollStart: noop,
      onScroll: noop,
      onScrollEnd: noop,
      onFlick: noop
    };
  },
  render: function render() {
    var s = this;
    var state = s.state;
    var props = s.props;

    return _react2.default.createElement(
      'div',
      { id: props.id,
        className: (0, _classnames2.default)('ap-scroll', props.className),
        style: Object.assign({}, props.style)
      },
      props.children
    );
  },


  // --------------------
  // Lifecycle
  // --------------------

  componentDidMount: function componentDidMount() {
    var IScroll = require('iscroll/build/iscroll-probe.js');
    var s = this;
    var props = s.props;
    var direction = props.direction;
    var iScrollRef = props.iScrollRef;


    setTimeout(function () {
      var isMounted = s.isMounted();
      if (!isMounted) {
        return;
      }
      var iScroll = new IScroll(_reactDom2.default.findDOMNode(s), {
        mouseWheel: !props.disableMouseWheel,
        probeType: 2,
        showScrollbars: props.showScrollbars,
        scrollX: /x/.test(direction),
        scrollY: /y/.test(direction)
      });
      var listeners = s._getEventListeners();
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = Object.keys(listeners)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var event = _step.value;

          iScroll.on(event, listeners[event]);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      s._iScroll = iScroll;

      if (props.onIScrollInit) {
        console.warn('[ApScroll] onIScrollInit is now deprecated. Use onIScrollInit instead.');
        var _window = window;
        var Event = _window.Event;

        var e = new Event('ap:scroll:init');
        props.onIScrollInit(Object.assign(e, { iScroll: iScroll }));
      }

      if (iScrollRef) {}
      iScrollRef(iScroll);

      s.refreshIScroll(10); // Make sure scroll works.
    }, 0);
  },
  componentWillUnmount: function componentWillUnmount() {
    var s = this;
    var iScroll = s._iScroll;

    if (s._cancelRefresh) {
      s._cancelRefresh();
    }
    if (iScroll) {
      var listeners = s._getEventListeners();
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = Object.keys(listeners)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var event = _step2.value;

          iScroll.on(event, listeners[event]);
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      iScroll.destroy();
    }
  },


  // ------------------
  // For ApResizeMixin
  // ------------------

  windowDidResize: function windowDidResize(e) {
    var s = this;

    s.refreshIScroll(0);
  },


  // ------------------
  // Custom
  // ------------------

  refreshIScroll: function refreshIScroll(delay) {
    var s = this;
    s._cancelRefresh = ApScroll.refreshIScroll(s._iScroll, delay);
  },


  // ------------------
  // Private
  // ------------------

  _iScroll: null,

  _getEventListeners: function _getEventListeners() {
    var s = this;
    var props = s.props;

    var listeners = {
      'scrollCancel': props.onScrollCancel,
      'scrollStart': props.onScrollStart,
      'scroll': props.onScroll,
      'scrollEnd': props.onScrollEnd,
      'flick': props.onFlick
    };
    var _iteratorNormalCompletion3 = true;
    var _didIteratorError3 = false;
    var _iteratorError3 = undefined;

    try {
      for (var _iterator3 = Object.keys(listeners)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
        var event = _step3.value;

        if (!listeners[event]) {
          delete listeners[event];
        }
      }
    } catch (err) {
      _didIteratorError3 = true;
      _iteratorError3 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion3 && _iterator3.return) {
          _iterator3.return();
        }
      } finally {
        if (_didIteratorError3) {
          throw _iteratorError3;
        }
      }
    }

    return listeners;
  },

  _cancelRefresh: null

});

exports.default = ApScroll;
//# sourceMappingURL=data:application/json;base64,bnVsbA==