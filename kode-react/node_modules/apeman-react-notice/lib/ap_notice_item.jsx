/**
 * Notice item component
 * @class ApNoticeItem
 */

'use strict'

import React, {PropTypes as types} from 'react'
import classnames from 'classnames'
import stringcase from 'stringcase'
import {ApButton} from 'apeman-react-button'

/** @lends ApNoticeItem */
const ApNoticeItem = React.createClass({
  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Item text */
    text: types.string,
    /** Action button text and handlers */
    actions: types.object,
    /** Hide component */
    hidden: types.bool,
    /** Information level */
    level: types.oneOf([
      'DEFAULT',
      'INFO',
      'WARN',
      'ERROR'
    ])
  },

  mixins: [],

  statics: {},

  getInitialState () {
    return {}
  },

  getDefaultProps () {
    return {
      text: null,
      actions: null,
      hidden: false,
      level: 'DEFAULT'
    }
  },

  render () {
    const s = this
    let { props } = s
    let { text, hidden, actions, level } = props

    let buttons = Object.keys(actions || {}).map((title) =>
      s._renderButton(title, actions[ title ], {
        key: `${title}`
      })
    )
    let className = classnames('ap-notice-item',
      `ap-notice-item-${stringcase.spinalcase(String(level).toLowerCase())}`, {
        'ap-notice-item-hidden': hidden
      }, props.className)
    return (
      <div className={ className }
           style={Object.assign({}, props.style) }>
        <div className='ap-notice-item-inner'>
          <span>{text}</span>
                    <span>
                    { props.children }
                    </span>
                    <span className='ap-notice-item-action'>
                        {buttons}
                    </span>
        </div>
      </div>
    )
  },

  // --------------------
  // Lifecycle
  // --------------------

  // ------------------
  // Custom
  // ------------------

  // ------------------
  // Private
  // ------------------

  _renderButton (title, handler, props) {
    return (
      <ApButton { ...props }
        onTap={ handler }
        className='ap-notice-item-button'
      >{ title }</ApButton>
    )
  }
})

export default ApNoticeItem

