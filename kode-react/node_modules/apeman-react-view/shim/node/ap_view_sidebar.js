/**
 * Sidebar of views
 * @class ApViewSidebar
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _apemanReactTouchable = require('apeman-react-touchable');

var _reactAddonsCssTransitionGroup = require('react-addons-css-transition-group');

var _reactAddonsCssTransitionGroup2 = _interopRequireDefault(_reactAddonsCssTransitionGroup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApViewSidebar */
var ApViewSidebar = _react2.default.createClass({
  displayName: 'ApViewSidebar',

  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Shows sidebar */
    enabled: _react.PropTypes.bool,
    /** Handler for close */
    onClose: _react.PropTypes.func,
    /** Duration for transition */
    transitionTimeout: _react.PropTypes.number
  },

  getDefaultProps: function getDefaultProps() {
    return {
      transitionTimeout: 400,
      enabled: false
    };
  },
  render: function render() {
    var s = this;
    var props = s.props;
    var enabled = props.enabled;
    var transitionTimeout = props.transitionTimeout;

    var className = (0, _classnames2.default)('ap-view-sidebar', props.className, {
      'ap-view-sidebar-enabled': enabled
    });
    return _react2.default.createElement(
      'div',
      { className: className,
        style: (0, _assign2.default)({}, props.style) },
      _react2.default.createElement(
        _reactAddonsCssTransitionGroup2.default,
        { transitionName: 'ap-view-sidebar-transition',
          transitionEnterTimeout: transitionTimeout,
          transitionLeaveTimeout: transitionTimeout
        },
        enabled ? _react2.default.createElement(
          'div',
          { className: 'ap-view-sidebar-inner', key: 'inner' },
          _react2.default.createElement(
            'div',
            { className: 'ap-view-sidebar-content' },
            props.children
          ),
          _react2.default.createElement(_apemanReactTouchable.ApTouchable, { className: 'ap-view-sidebar-closer',
            onTap: props.onClose
          })
        ) : null
      )
    );
  }
});

exports.default = ApViewSidebar;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwX3ZpZXdfc2lkZWJhci5qc3giXSwibmFtZXMiOlsiQXBWaWV3U2lkZWJhciIsImNyZWF0ZUNsYXNzIiwicHJvcFR5cGVzIiwiZW5hYmxlZCIsImJvb2wiLCJvbkNsb3NlIiwiZnVuYyIsInRyYW5zaXRpb25UaW1lb3V0IiwibnVtYmVyIiwiZ2V0RGVmYXVsdFByb3BzIiwicmVuZGVyIiwicyIsInByb3BzIiwiY2xhc3NOYW1lIiwic3R5bGUiLCJjaGlsZHJlbiJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFJQTs7Ozs7Ozs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7Ozs7O0FBRUE7QUFDQSxJQUFNQSxnQkFBZ0IsZ0JBQU1DLFdBQU4sQ0FBa0I7QUFBQTs7QUFDdEM7QUFDQTtBQUNBOztBQUVBQyxhQUFXO0FBQ1Q7QUFDQUMsYUFBUyxpQkFBTUMsSUFGTjtBQUdUO0FBQ0FDLGFBQVMsaUJBQU1DLElBSk47QUFLVDtBQUNBQyx1QkFBbUIsaUJBQU1DO0FBTmhCLEdBTDJCOztBQWN0Q0MsaUJBZHNDLDZCQWNuQjtBQUNqQixXQUFPO0FBQ0xGLHlCQUFtQixHQURkO0FBRUxKLGVBQVM7QUFGSixLQUFQO0FBSUQsR0FuQnFDO0FBcUJ0Q08sUUFyQnNDLG9CQXFCNUI7QUFDUixRQUFNQyxJQUFJLElBQVY7QUFEUSxRQUVGQyxLQUZFLEdBRVFELENBRlIsQ0FFRkMsS0FGRTtBQUFBLFFBSUZULE9BSkUsR0FJNkJTLEtBSjdCLENBSUZULE9BSkU7QUFBQSxRQUlPSSxpQkFKUCxHQUk2QkssS0FKN0IsQ0FJT0wsaUJBSlA7O0FBS1IsUUFBSU0sWUFBWSwwQkFBVyxpQkFBWCxFQUE4QkQsTUFBTUMsU0FBcEMsRUFBK0M7QUFDN0QsaUNBQTJCVjtBQURrQyxLQUEvQyxDQUFoQjtBQUdBLFdBQ0U7QUFBQTtBQUFBLFFBQUssV0FBWVUsU0FBakI7QUFDSyxlQUFRLHNCQUFjLEVBQWQsRUFBa0JELE1BQU1FLEtBQXhCLENBRGI7QUFFRTtBQUFBO0FBQUEsVUFBeUIsZ0JBQWUsNEJBQXhDO0FBQ3lCLGtDQUF5QlAsaUJBRGxEO0FBRXlCLGtDQUF5QkE7QUFGbEQ7QUFLSUosa0JBQ0U7QUFBQTtBQUFBLFlBQUssV0FBVSx1QkFBZixFQUF1QyxLQUFJLE9BQTNDO0FBQ0U7QUFBQTtBQUFBLGNBQUssV0FBVSx5QkFBZjtBQUNJUyxrQkFBTUc7QUFEVixXQURGO0FBSUUsNkVBQWEsV0FBVSx3QkFBdkI7QUFDYSxtQkFBUUgsTUFBTVA7QUFEM0I7QUFKRixTQURGLEdBVUk7QUFmUjtBQUZGLEtBREY7QUF1QkQ7QUFwRHFDLENBQWxCLENBQXRCOztrQkF1RGVMLGEiLCJmaWxlIjoiYXBfdmlld19zaWRlYmFyLmpzeCIsInNvdXJjZVJvb3QiOiJsaWIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNpZGViYXIgb2Ygdmlld3NcbiAqIEBjbGFzcyBBcFZpZXdTaWRlYmFyXG4gKi9cbid1c2Ugc3RyaWN0J1xuXG5pbXBvcnQgUmVhY3QsIHtQcm9wVHlwZXMgYXMgdHlwZXN9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcydcbmltcG9ydCB7QXBUb3VjaGFibGV9IGZyb20gJ2FwZW1hbi1yZWFjdC10b3VjaGFibGUnXG5pbXBvcnQgUmVhY3RDU1NUcmFuc2l0aW9uR3JvdXAgZnJvbSAncmVhY3QtYWRkb25zLWNzcy10cmFuc2l0aW9uLWdyb3VwJ1xuXG4vKiogQGxlbmRzIEFwVmlld1NpZGViYXIgKi9cbmNvbnN0IEFwVmlld1NpZGViYXIgPSBSZWFjdC5jcmVhdGVDbGFzcyh7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIFNwZWNzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgcHJvcFR5cGVzOiB7XG4gICAgLyoqIFNob3dzIHNpZGViYXIgKi9cbiAgICBlbmFibGVkOiB0eXBlcy5ib29sLFxuICAgIC8qKiBIYW5kbGVyIGZvciBjbG9zZSAqL1xuICAgIG9uQ2xvc2U6IHR5cGVzLmZ1bmMsXG4gICAgLyoqIER1cmF0aW9uIGZvciB0cmFuc2l0aW9uICovXG4gICAgdHJhbnNpdGlvblRpbWVvdXQ6IHR5cGVzLm51bWJlclxuICB9LFxuXG4gIGdldERlZmF1bHRQcm9wcyAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zaXRpb25UaW1lb3V0OiA0MDAsXG4gICAgICBlbmFibGVkOiBmYWxzZVxuICAgIH1cbiAgfSxcblxuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IHMgPSB0aGlzXG4gICAgbGV0IHsgcHJvcHMgfSA9IHNcblxuICAgIGxldCB7IGVuYWJsZWQsIHRyYW5zaXRpb25UaW1lb3V0IH0gPSBwcm9wc1xuICAgIGxldCBjbGFzc05hbWUgPSBjbGFzc25hbWVzKCdhcC12aWV3LXNpZGViYXInLCBwcm9wcy5jbGFzc05hbWUsIHtcbiAgICAgICdhcC12aWV3LXNpZGViYXItZW5hYmxlZCc6IGVuYWJsZWRcbiAgICB9KVxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17IGNsYXNzTmFtZSB9XG4gICAgICAgICAgIHN0eWxlPXsgT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMuc3R5bGUpIH0+XG4gICAgICAgIDxSZWFjdENTU1RyYW5zaXRpb25Hcm91cCB0cmFuc2l0aW9uTmFtZT0nYXAtdmlldy1zaWRlYmFyLXRyYW5zaXRpb24nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uRW50ZXJUaW1lb3V0PXsgdHJhbnNpdGlvblRpbWVvdXQgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbkxlYXZlVGltZW91dD17IHRyYW5zaXRpb25UaW1lb3V0IH1cbiAgICAgICAgPlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVuYWJsZWQgPyAoXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdhcC12aWV3LXNpZGViYXItaW5uZXInIGtleT0naW5uZXInPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdhcC12aWV3LXNpZGViYXItY29udGVudCc+XG4gICAgICAgICAgICAgICAgICB7IHByb3BzLmNoaWxkcmVuIH1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8QXBUb3VjaGFibGUgY2xhc3NOYW1lPSdhcC12aWV3LXNpZGViYXItY2xvc2VyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblRhcD17IHByb3BzLm9uQ2xvc2UgfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8L0FwVG91Y2hhYmxlPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICkgOiBudWxsXG4gICAgICAgICAgfVxuICAgICAgICA8L1JlYWN0Q1NTVHJhbnNpdGlvbkdyb3VwPlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG59KVxuXG5leHBvcnQgZGVmYXVsdCBBcFZpZXdTaWRlYmFyXG4iXX0=