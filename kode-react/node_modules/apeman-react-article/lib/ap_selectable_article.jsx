/**
 * Article with selections
 * @class ApSelectableArticle
 */

'use strict'

import React, { PropTypes as types } from 'react'
import classnames from 'classnames'
import { ApStyle } from 'apeman-react-style'
import { ApSelect } from 'apeman-react-select'
import { ApLabel } from 'apeman-react-label'
import uuid from 'uuid'

/** @lends ApSelectableArticle */
const ApSelectableArticle = React.createClass({

  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Label */
    label: types.string,
    /** Article id */
    id: types.string,
    /** Name of select */
    name: types.string,
    /** Value of select */
    value: types.string,
    /** Placeholder of select */
    placeholder: types.string,
    /** Select options */
    options: types.object,
    /** Alt messages */
    alt: types.string
  },

  mixins: [],

  statics: {
    Content: React.createClass({
      propTypes: {
        /** Select option value */
        contentFor: types.string.isRequired
      },
      render () {
        const s = this
        let { props } = s
        let className = classnames(
          'ap-selectable-article-content',
          `ap-selectable-article-content-${props.contentFor}`
        )

        return (
          <div className={ className }>
            { props.children }
          </div>
        )
      }
    })
  },

  getInitialState () {
    return {}
  },

  getDefaultProps () {
    return {}
  },

  render () {
    const s = this
    let { state, props } = s
    let {
      label,
      value,
      alt,
      id = `ap-selectable-article-${s.uuid}`
    } = props
    let select = [ 'id', 'name', 'placeholder', 'options', 'value', 'onChange', 'multiple' ].reduce((select, name) =>
      Object.assign(select, { [name]: props[ name ] }), {}
    )
    select.id = `${id}-select`
    return (
      <article className={ classnames('ap-selectable-article', props.className)}
               id={ id }
               style={Object.assign({}, props.style) }>
        <ApStyle className='ap-selectable-article-dynamic-style'
        >{`#${id} .ap-selectable-article-content-${value} { display: block; }`}</ApStyle>
        <div className='ap-selectable-article-header'>
          <ApLabel htmlFor={ select.id }>{ label ? label : null }</ApLabel>
          <ApSelect { ...select } />
        </div>
        <div className='ap-selectable-article-body'>
          { value ? null : <div className='ap-selectable-article-alt'>{ alt }</div>}
          { props.children }
        </div>
      </article>
    )
  },

  // --------------------
  // Lifecycle
  // --------------------

  componentDidMount () {
    const s = this
    s.uuid = uuid.v4()
  }

  // ------------------
  // Custom
  // ------------------

  // ------------------
  // Private
  // ------------------
})

export default ApSelectableArticle
