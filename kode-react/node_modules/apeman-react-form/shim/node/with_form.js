/**
 * Higher order component with form
 * @function withForm
 * @param {function} Component - A component constructor
 * @returns {function} - Wrapped component
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _breact = require('breact');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _apemanReactStyle = require('apeman-react-style');

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _stringcase = require('stringcase');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _acolor = require('acolor');

var _asobj = require('asobj');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var noop = function noop() {
  return null;
};
var rejectMetaKey = function rejectMetaKey(name) {
  return !/^[$_]/.test(name);
};

/** @lends withForm */
function withForm(Component) {
  return (0, _breact.wrap)(Component, {
    displayName: 'withForm',
    propTypes: {
      /** Form id */
      id: _react.PropTypes.string,
      /** Submit handling */
      onSubmit: _react.PropTypes.func,
      /** Cancel handling */
      onCancel: _react.PropTypes.func,
      /** Update values */
      onUpdate: _react.PropTypes.func.isRequired,
      /** Form values */
      values: _react.PropTypes.object.isRequired,
      /** Form errors */
      errors: _react.PropTypes.object,
      /** Error color */
      errorColor: _react.PropTypes.string
    },

    getDefaultProps: function getDefaultProps() {
      return {
        onSubmit: noop,
        onCancel: noop,
        onUpdate: noop,
        values: {},
        errors: null,
        errorColor: '#E11'
      };
    },
    render: function render() {
      var s = this;
      var props = s.props;
      var _props$id = props.id;
      var id = _props$id === undefined ? 'form-' + s.uuid : _props$id;
      var errors = props.errors;
      var errorColor = props.errorColor;


      var errorList = _react2.default.createElement(withForm.ErrorList, { errors: errors,
        id: id });

      var errorStyle = _react2.default.createElement(withForm.ErrorStyle, { errors: errors,
        errorColor: errorColor,
        id: id });

      var idOf = function idOf(name) {
        return id + '-' + (0, _stringcase.spinalcase)(name);
      };
      var componentProps = (0, _asobj.clone)(props, {
        without: ['className']
      });
      var className = (0, _classnames2.default)(props.className, {
        'with-ap-form-error': Object.keys(errors || {}).filter(rejectMetaKey).length > 0
      });
      return _react2.default.createElement(Component, _extends({}, componentProps, {
        className: className,
        id: id,
        idOf: idOf,
        errorStyle: errorStyle,
        errorList: errorList
      }));
    },


    // --------------------
    // Lifecycle
    // --------------------

    componentWillMount: function componentWillMount() {
      var s = this;
      s.uuid = _uuid2.default.v4();
    }
  });
}

Object.assign(withForm, {
  // ------------------
  // Custom
  // ------------------

  ErrorList: function ErrorList(_ref) {
    var errors = _ref.errors;
    var id = _ref.id;

    var items = Object.keys(errors || {}).filter(rejectMetaKey).reduce(function (items, name) {
      return Object.assign(items, _defineProperty({}, errors[name], name));
    }, {});
    var className = (0, _classnames2.default)('ap-form-error-list', {
      'ap-form-error-list-empty': Object.keys(items).length === 0
    });

    return _react2.default.createElement(
      'ul',
      { className: className,
        id: 'error-list-for-' + id
      },
      Object.keys(items).map(function (message) {
        return _react2.default.createElement(
          'li',
          { key: items[message],
            className: 'ap-form-error-list-item'
          },
          message
        );
      })
    );
  },
  ErrorStyle: function ErrorStyle(_ref2) {
    var errors = _ref2.errors;
    var id = _ref2.id;
    var errorColor = _ref2.errorColor;

    var data = Object.keys(errors || {}).filter(rejectMetaKey).reduce(function (data, name) {
      return Object.assign(data, _defineProperty({}, '#' + id + ' [name="' + name + '"]', {
        borderColor: errorColor,
        outlineColor: errorColor,
        backgroundColor: (0, _acolor.alpha)(errorColor, 0.1)
      }));
    }, {});
    return _react2.default.createElement(_apemanReactStyle.ApStyle, { data: data });
  }
});

exports.default = withForm;
//# sourceMappingURL=data:application/json;base64,