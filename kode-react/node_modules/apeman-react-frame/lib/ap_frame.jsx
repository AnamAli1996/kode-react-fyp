/**
 * iframe components.
 * @class ApFrame
 */

'use strict'

import React, {PropTypes as types} from 'react'
import ReactDOM from 'react-dom'
import classnames from 'classnames'
import {ApSpinner} from 'apeman-react-spinner'
import {shallowEqual} from 'asobj'

/** @lends ApFrame */
const ApFrame = React.createClass({

  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Source URL string */
    src: types.string,
    /** Theme of spinner */
    spinner: types.string,
    /** Display with full screen */
    full: types.bool,
    /** Component width */
    width: types.oneOfType([ types.number, types.string ]),
    /** Component height */
    height: types.oneOfType([ types.number, types.string ]),
    /** Ref to iframe */
    iframeRef: types.func
  },

  mixins: [
  ],

  statics: {},

  getInitialState () {
    const s = this
    let { props } = s
    return {
      spinning: !!props.src,
      err: null
    }
  },

  getDefaultProps () {
    return {
      src: null,
      full: false,
      spinner: ApSpinner.DEFAULT_THEME,
      width: 'auto',
      height: 'auto'
    }
  },

  render () {
    const s = this
    let { state, props } = s
    let className = classnames('ap-frame', {
      'ap-frame-full': props.full
    }, props.className)
    let style = Object.assign({
      width: props.width,
      height: props.height
    }, props.style)
    return (
      <div className={ className }
           style={ style }>
        <ApSpinner enabled={ state.spinning }
                   theme={ props.spinner }
                   className='ap-frame-spinner'
        >
        </ApSpinner>
        <iframe src={ props.src }
                className='ap-frame-frame'
                frameBorder='0'
                onLoad={ s.handleLoad }
                ref={ props.iframeRef }
        >
        </iframe>
        { props.children }
      </div>
    )
  },

  // --------------------
  // Lifecycle
  // --------------------

  shouldComponentUpdate (nextProps, nextState) {
    const s = this
    let { props, state } = s
    return !shallowEqual(props, nextProps) || !shallowEqual(state, nextState)
  },

  componentWillReceiveProps (nextProps) {
    const s = this
    let { state } = s
    let stopSpinning = state.spinning && !nextProps.src
    if (stopSpinning) {
      s.setState({ spinning: false })
    }
  },

  // ------------------
  // Custom
  // ------------------

  handleLoad (e) {
    const s = this
    let { props } = s
    s.setState({
      spinning: false
    })
    if (props.onLoad) {
      props.onLoad(e)
    }
  }

  // ------------------
  // Private
  // ------------------
})

export default ApFrame
