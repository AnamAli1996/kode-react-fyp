/**
 * Notice component
 * @class ApNotice
 */

'use strict'

import React, {PropTypes as types} from 'react'
import ReactDOM from 'react-dom'
import classnames from 'classnames'
import {ApLayoutMixin} from 'apeman-react-mixin-layout'
import {ApSpinner} from 'apeman-react-spinner'

/** @lends ApNotice */
const ApNotice = React.createClass({

  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Show spinner */
    spinning: types.bool,
    /** Spinner theme */
    spinner: types.string
  },

  mixins: [
    ApLayoutMixin
  ],

  statics: {},

  getInitialState () {
    return {
      height: 'auto'
    }
  },

  getDefaultProps () {
    return {
      spinning: false,
      spinner: ApSpinner.DEFAULT_THEME
    }
  },

  render () {
    const s = this
    let { props, layouts } = s

    return (
      <div className={ classnames('ap-notice', props.className)}
           style={ Object.assign({}, layouts.notice, props.style) }>
        <ApSpinner className="ap-notice-spinner"
                   style={ layouts.spinner }
                   enabled={ props.spinning }
        />
        <div className="ap-notice-inner"
             ref="inner">
          { props.children }
        </div>
      </div>
    )
  },

  // --------------------
  // Lifecycle
  // --------------------

  // --------------------
  // For ApLayoutMixin
  // --------------------

  getInitialLayouts () {
    return {
      spinner: null,
      notice: null
    }
  },

  calcLayouts () {
    const s = this
    let { props } =s
    let inner = ReactDOM.findDOMNode(s.refs[ 'inner' ])
    let innerRect = inner.getBoundingClientRect()
    return {
      notice: {
        height: innerRect.height
      },
      spinner: {
        height: innerRect.height
      }
    }
  }

  // ------------------
  // Private
  // ------------------

})

export default ApNotice
