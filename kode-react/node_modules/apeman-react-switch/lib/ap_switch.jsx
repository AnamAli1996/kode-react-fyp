/**
 * apeman react package for switch components
 * @class ApSwitch
 */

'use strict'

import React, {PropTypes as types} from 'react'
import classnames from 'classnames'
import {ApPureMixin} from 'apeman-react-mixin-pure'
import {withTouch} from 'apeman-react-touchable'
import uuid from 'uuid'

/** @lends ApSwitch */
const ApSwitch = React.createClass({

  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Switch on or not */
    on: types.bool.isRequired,
    /** Title text for on state */
    onTitle: types.string,
    /** Title text for off state */
    offTitle: types.string,
    /** Width of component */
    width: types.number
  },

  mixins: [
    ApPureMixin
  ],

  statics: {},

  getInitialState () {
    return {}
  },

  getDefaultProps () {
    return {
      id: uuid.v4(),
      on: false,
      onTitle: '',
      offTitle: ''
    }
  },

  render () {
    const s = this
    let { state, props } = s
    let { width, id } = props
    let className = classnames('ap-switch', {
      'ap-switch-on': props.on,
      'ap-switch-off': !props.on
    }, props.className)
    return (
      <div className={ className }
           style={ Object.assign({ width }, props.style) }
           id={ id }
      >
        <div className='ap-switch-inner'>
          { s.renderLabel(`${id}-radio-off`, 'ap-switch-on-label', props.onTitle) }
          { s.renderRadio(`${id}-radio-off`, 'off', !props.on)}
          <div className='ap-switch-handle'>
          </div>
          { s.renderLabel(`${id}-radio-on`, 'ap-switch-off-label', props.offTitle) }
          { s.renderRadio(`${id}-radio-on`, 'on', !!props.on)}
        </div>
        { props.children }
      </div>
    )
  },

  // --------------------
  // Lifecycle
  // --------------------

  // ------------------
  // Custom
  // ------------------

  noop () {

  },

  // ------------------
  // Private
  // ------------------

  renderLabel (htmlFor, className, title) {
    const s = this
    return (
      <label htmlFor={ htmlFor }
             className={ classnames('ap-switch-label', className) }>
        <span className='ap-switch-label-text'>{ title }</span>
      </label>
    )
  },

  renderRadio (id, value, checked) {
    const s = this
    return (
      <input type='radio'
             id={ id }
             value={ value }
             checked={ checked }
             onChange={ s.noop }
             className='ap-switch-radio'/>
    )
  }
})

export default ApSwitch // Dummy for doc
export default withTouch(ApSwitch)
