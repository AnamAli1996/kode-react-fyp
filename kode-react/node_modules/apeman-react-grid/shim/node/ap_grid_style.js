/**
 * Style for ApGrid.
 * @class ApGridStyle
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _apemanReactStyle = require('apeman-react-style');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/** @lends ApGridStyle */
var ApGridStyle = _react2.default.createClass({
  displayName: 'ApGridStyle',

  propTypes: {
    style: _react.PropTypes.object,
    itemSize: _react.PropTypes.number,
    highlightColor: _react.PropTypes.string
  },
  getDefaultProps: function getDefaultProps() {
    return {
      style: {},
      itemSize: 82,
      detailColor: '#444',
      highlightColor: _apemanReactStyle.ApStyle.DEFAULT_HIGHLIGHT_COLOR,
      backgroundColor: _apemanReactStyle.ApStyle.DEFAULT_BACKGROUND_COLOR
    };
  },

  statics: {
    styleData: function styleData(config) {
      var highlightColor = config.highlightColor;
      var backgroundColor = config.backgroundColor;
      var itemSize = config.itemSize;

      var itemMargin = 8;
      var duration = 400;
      var arrowSize = itemMargin * 3;
      return {
        all: {
          '.ap-grid': {
            display: 'flex',
            flexFlow: 'row wrap',
            justifyContent: 'space-around',
            margin: '0 auto'
          },
          '.ap-grid-item-wrap': {
            display: 'inline-block',
            margin: 0,
            padding: 0,
            position: 'relative'
          },
          '.ap-grid-item-arrow': {
            position: 'absolute',
            bottom: itemMargin - arrowSize + 'px',
            width: arrowSize + 'px',
            height: arrowSize + 'px',
            transform: 'rotate(-45deg)',
            right: '50%',
            borderRadius: '0 0 0 100%',
            transformOrigin: 'top right',
            display: 'inline-block',
            background: '' + highlightColor
          },
          '.ap-grid-detail-wrap': {
            display: 'block',
            width: 0,
            transition: 'height ' + duration + 'ms, max-height ' + duration + 'ms',
            padding: 0,
            margin: 0,
            zIndex: 4,
            boxSizing: 'border-box',
            background: '' + highlightColor,
            color: 'white'
          },
          '.ap-grid-detail-wrap-active': {
            width: '100%'
          },
          '.ap-grid-detail-wrap-closed': {
            maxHeight: arrowSize + 'px !important',
            height: 0
          },
          '.ap-grid-item': {
            display: 'inline-flex',
            textAlign: 'center',
            width: itemSize + 'px',
            height: itemSize + 'px',
            border: '2px solid #CCC',
            backgroundColor: '#FFF',
            backgroundSize: 'cover',
            justifyContent: 'flex-start',
            alignItems: 'center',
            flexDirection: 'column',
            overflow: 'hidden',
            padding: itemMargin + 'px',
            borderRadius: '4px',
            margin: 8
          },
          '.ap-grid-item:hover': {
            background: '#FAFAFA',
            cursor: 'pointer'
          },
          '.ap-grid-item-title': {
            padding: 0,
            margin: '4px 0',
            fontSize: 'larger'
          },
          '.ap-grid-item-text': {
            lineHeight: '1em',
            fontSize: 'smaller',
            margin: 0
          },
          '.ap-grid-item-wrap-selected .ap-grid-item': {
            border: '2px solid ' + highlightColor
          },
          '.ap-grid-item-wrap-selected .ap-grid-item:hover,.ap-grid-item-wrap-selected .ap-grid-item:active': {
            border: '2px solid ' + highlightColor
          }
        }

      };
    }
  },
  render: function render() {
    var s = this;
    var props = s.props;

    var _ApGridStyle$styleDat = ApGridStyle.styleData(props);

    var all = _ApGridStyle$styleDat.all;
    var small = _ApGridStyle$styleDat.small;
    var medium = _ApGridStyle$styleDat.medium;
    var large = _ApGridStyle$styleDat.large;


    return _react2.default.createElement(
      _apemanReactStyle.ApStyle,
      { data: Object.assign(all, props.style),
        smallMediaData: small,
        mediumMediaData: medium,
        largeMediaData: large
      },
      props.children
    );
  }
});

exports.default = ApGridStyle;
//# sourceMappingURL=data:application/json;base64,bnVsbA==