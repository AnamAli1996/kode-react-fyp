/**
 * apeman react package for developer tools.
 * @class ApDevtool
 */

'use strict'

import React, {PropTypes as types} from 'react'
import ReactDOM from 'react-dom'
import stringcase from 'stringcase'
import classnames from 'classnames'
import {ApButton} from 'apeman-react-button'
import {getEnv, isProduction} from 'asenv'
import {ApLayoutMixin} from 'apeman-react-mixin-layout'
import {ApDraggable} from 'apeman-react-draggable'
import {get} from 'bwindow'

/** @lends ApDevtool */
const ApDevtool = React.createClass({

  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Version string of the application */
    version: types.string,
    /** Information object */
    info: types.object,
    /** Action handlers */
    actions: types.object
  },

  mixins: [
    ApLayoutMixin
  ],

  statics: {},

  getInitialState () {
    const s = this
    let isClientSide = !!get('window')
    return {
      enabled: isClientSide && !isProduction(),
      open: false
    }
  },

  getDefaultProps () {
    return {
      version: null,
      info: null
    }
  },

  render () {
    const s = this
    let { state, props, layouts } = s

    if (!state.enabled) {
      return null
    }

    return (
      <ApDraggable className={ classnames('ap-devtool', {
        'ap-devtool-open': state.open,
        'ap-devtool-closed': !state.open
      }, props.className) }
                   onTap={ s.handleTap }
                   style={ Object.assign(layouts.draggable, props.style) }
      >
        <div className='ap-devtool-title'>Devtool</div>
        <div className='ap-devtool-display'>
          <div className='ap-devtool-closed-handle'/>
          <div className='ap-devtool-inner' ref={ (inner) => s.registerInner(inner) }>
            { s._renderCaption(window.location.origin, getEnv()) }
            { s._renderInfo(props.info || {}) }
            { s._renderActions(props.actions || {}) }
            <div>
              { props.children }
            </div>
          </div>
        </div>
      </ApDraggable>
    )
  },

  // --------------------
  // Lifecycle
  // --------------------

  // ------------------
  // For ApLayoutMixin
  // ------------------

  getInitialLayouts () {
    return {
      draggable: {
        width: 'auto',
        height: 'auto'
      }
    }
  },

  calcLayouts () {
    const s = this
    let { state } = s
    if (!state.enabled) {
      return {}
    }
    let { inner } = s
    const PADDING = 8
    let rect = inner.getBoundingClientRect()
    return {
      draggable: {
        width: rect.width + PADDING,
        height: rect.height + PADDING
      }
    }
  },

  // ------------------
  // Custom
  // ------------------

  registerInner (inner) {
    const s = this
    s.inner = inner
  },

  handleTap (e) {
    const s = this
    let byActionButton = e.target && e.target.classList.contains('ap-devtool-action-button')
    if (byActionButton) {
      return
    }
    s.setState({
      open: !s.state.open
    })
  },

  // ------------------
  // Private
  // ------------------

  _renderCaption (host, NODE_ENV) {
    const s = this
    let { props } = s
    let version = props.version
    if (version && !/^v/.test(version)) {
      version = 'v' + version
    }
    return (
      <div className='ap-devtool-caption'>
        <div>
                    <span className={ classnames(
                      'ap-devtool-env-label',
                      `ap-devtool-env-label-${stringcase.spinalcase(NODE_ENV)}`
                    ) }>{NODE_ENV}
                    </span>
          <span className=''>&nbsp;</span>
          <span className='ap-devtool-version-label'>({ version })</span>
        </div>
        <div>
          <span>{host}</span>
        </div>
      </div>
    )
  },

  _renderInfo (info) {
    const s = this
    let rows = Object.keys(info)
      .filter((name) => info[ name ] !== null)
      .filter((name) => info[ name ] !== undefined)
      .map((name) => (
        <tr className='ap-devtool-info-row'
            key={`ap-devtool-info-row-${name}`}>
          <th className='ap-devtool-cell'>{name}</th>
          <td className={ classnames('ap-devtool-cell', {
            'ap-devtool-numeric': typeof info[ name ] === 'number'
          }) }>{info[ name ]}</td>
        </tr>
      ))
    if (!rows.length) {
      return null
    }
    return (
      <table className='ap-devtool-info-table'>
        <tbody>{ rows }</tbody>
      </table>
    )
  },

  _renderActions (actions) {
    let names = Object.keys(actions || {})
    if (!names.length) {
      return null
    }
    return (
      <div className='ap-devtool-actions'>
        {
          names.map((name) =>
            <ApButton className='ap-devtool-action-button'
                      onTap={ actions[ name ] }
                      key={ name }>{ name }</ApButton>
          )
        }
      </div>
    )
  }

})

export default ApDevtool
