/**
 * apeman react package for search components.
 * @class ApSearch
 */

'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _apemanReactIcon = require('apeman-react-icon');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_CLEAR_ICON = 'ion ion-close-round';
var DEFAULT_SEARCH_ICON = 'ion ion-search';

/** @lends ApSearch */
var ApSearch = _react2.default.createClass({
  displayName: 'ApSearch',


  // --------------------
  // Specs
  // --------------------

  propTypes: {
    /** Name of search input */
    name: _react.PropTypes.string,
    /** Type of search input */
    type: _react.PropTypes.string,
    /** Value of search input */
    value: _react.PropTypes.string,
    /** Placeholder of search input */
    placeholder: _react.PropTypes.string,
    /** Icon class name of clear button */
    clearIcon: _react.PropTypes.string,
    /** Icon class name of search button */
    searchIcon: _react.PropTypes.string,
    /** Handler for clear event */
    onClear: _react.PropTypes.func,
    /** Open to input */
    open: _react.PropTypes.bool,
    /** Render with righted style */
    righted: _react.PropTypes.bool
  },

  mixins: [],

  statics: {
    DEFAULT_CLEAR_ICON: DEFAULT_CLEAR_ICON,
    DEFAULT_SEARCH_ICON: DEFAULT_SEARCH_ICON
  },

  getInitialState: function getInitialState() {
    var s = this;
    var props = s.props;

    var hasVal = !!props.value;
    return {
      closed: !hasVal && !props.open
    };
  },
  getDefaultProps: function getDefaultProps() {
    return {
      name: '',
      type: 'text',
      value: '',
      placeholder: '',
      clearIcon: DEFAULT_CLEAR_ICON,
      searchIcon: DEFAULT_SEARCH_ICON,
      onClear: null,
      open: false,
      righted: false
    };
  },
  render: function render() {
    var s = this;
    var state = s.state;
    var props = s.props;


    var hasVal = !!props.value;
    var className = (0, _classnames2.default)('ap-search-wrap', {
      'ap-search-wrap-empty': !hasVal,
      'ap-search-wrap-closed': !!state.closed,
      'ap-search-wrap-righted': !!props.righted
    });
    return _react2.default.createElement(
      'span',
      { className: className },
      _react2.default.createElement(
        'a',
        { className: 'ap-search-search-button', onClick: s.handleSearchTap },
        _react2.default.createElement(
          'span',
          { className: 'ap-search-aligner' },
          ' '
        ),
        _react2.default.createElement(_apemanReactIcon.ApIcon, { className: (0, _classnames2.default)('ap-search-search-icon', props.searchIcon) })
      ),
      _react2.default.createElement('input', { className: (0, _classnames2.default)('ap-search', props.className),
        ref: function ref(input) {
          s.input = input;
        },
        id: props.id,
        name: props.name,
        placeholder: props.placeholder,
        onChange: props.onChange,
        type: props.type,
        value: props.value || '' }),
      _react2.default.createElement(
        'a',
        { className: 'ap-search-clear-button', onClick: s.handleClearTap },
        _react2.default.createElement(
          'span',
          { className: 'ap-search-aligner' },
          ' '
        ),
        _react2.default.createElement(_apemanReactIcon.ApIcon, { className: (0, _classnames2.default)('ap-search-clear-icon', props.clearIcon) })
      )
    );
  },


  // --------------------
  // Lifecycle
  // --------------------

  // ------------------
  // Custom
  // ------------------

  handleSearchTap: function handleSearchTap(e) {
    var s = this;
    var state = s.state;

    var closed = !state.closed;
    s.setState({ closed: closed });
    var node = _reactDom2.default.findDOMNode(s.input);
    if (closed) {
      node.blur();
    } else {
      node.focus();
    }
  },
  handleClearTap: function handleClearTap(e) {
    var s = this;
    var onClear = s.props.onClear;

    if (onClear) {
      onClear(e);
    }
    var node = _reactDom2.default.findDOMNode(s.input);
    node.focus();
  }

  // ------------------
  // Private
  // ------------------

});

exports.default = ApSearch;
//# sourceMappingURL=data:application/json;base64,bnVsbA==